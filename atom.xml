<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>慢读慢写</title>
  
  <subtitle>漫漫人生</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://slowread.cn/"/>
  <updated>2017-12-17T04:29:12.552Z</updated>
  <id>http://slowread.cn/</id>
  
  <author>
    <name>at2008</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>C#本质论笔记 第3章 操作符和控制流</title>
    <link href="http://slowread.cn/2017/12/17/CSharp%E6%9C%AC%E8%B4%A8%E8%AE%BA%E7%AC%94%E8%AE%B0-%E7%AC%AC3%E7%AB%A0-%E6%93%8D%E4%BD%9C%E7%AC%A6%E5%92%8C%E6%8E%A7%E5%88%B6%E6%B5%81/"/>
    <id>http://slowread.cn/2017/12/17/CSharp本质论笔记-第3章-操作符和控制流/</id>
    <published>2017-12-16T17:05:16.000Z</published>
    <updated>2017-12-17T04:29:12.552Z</updated>
    
    <content type="html"><![CDATA[<h1 id="操作符-Operators"><a href="#操作符-Operators" class="headerlink" title="操作符 Operators"></a>操作符 Operators</h1><p>操作符，也叫<strong>运算符</strong>，英文：<strong>Operrators</strong>，见 Microsoft Docs <a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/operators/index/" target="_blank" rel="noopener">C# 运算符</a>。</p><table><thead><tr><th>名称</th><th>含义</th><th>例子</th></tr></thead><tbody><tr><td>一元运算符</td><td>接受一个操作数的运算符</td><td>++ 或 new</td></tr><tr><td>二元运算符</td><td>接受两个操作数的运算符</td><td>+ - * /</td></tr><tr><td>三元运算符</td><td>接受三个操作数，C#中唯一的条件运算符</td><td>?:</td></tr></tbody></table><a id="more"></a><h2 id="一元操作符"><a href="#一元操作符" class="headerlink" title="一元操作符"></a>一元操作符</h2><h2 id="递增和递减操作符"><a href="#递增和递减操作符" class="headerlink" title="递增和递减操作符 ++ --"></a>递增和递减操作符 <code>++</code> <code>--</code></h2><p><strong>递增运算符</strong>（Post-Increment）<code>++</code> 按 1 递增其操作数。 递增运算符可以在其操作数之前或之后出现： ++variable 和 variable++。第一种形式是前缀递增操作。 操作的结果是操作数递增<strong>后</strong>的值。 第二种形式是后缀递增操作。 操作的结果是操作数递增<strong>前</strong>的值。</p><p><strong>递减运算符</strong> (Post-Decrement） <code>--</code> 按 1 递减其操作数。 减量运算符可以在其操作数之前或之后出现：–variable 和 variable–。  第一种形式是前缀递减操作。 操作的结果是操作数递减<strong>后</strong>的值。 第二种形式是后缀递减操作。 操作的结果是操作数递减<strong>前</strong>的值。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> x = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">int</span> y = <span class="number">123</span>;</span><br><span class="line"><span class="comment">// 输出 123,124,125</span></span><br><span class="line">System.Console.WriteLine (<span class="string">"&#123;0&#125;,&#123;1&#125;,&#123;2&#125;"</span>, x++, x++, x);</span><br><span class="line"><span class="comment">// 输出 124,125,125</span></span><br><span class="line">System.Console.WriteLine (<span class="string">"&#123;0&#125;,&#123;1&#125;,&#123;2&#125;"</span>, ++y, ++y, y);</span><br></pre></td></tr></table></figure><h1 id="选择语句"><a href="#选择语句" class="headerlink" title="选择语句"></a>选择语句</h1><h2 id="if-else"><a href="#if-else" class="headerlink" title="if-else"></a>if-else</h2><blockquote><p>下列中，如果 m &gt; 10 不成立，后面代码全部不执行</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Try with m = 12 and then with m = 8.</span></span><br><span class="line"><span class="keyword">int</span> m = <span class="number">12</span>;</span><br><span class="line"><span class="keyword">int</span> n = <span class="number">18</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (m &gt; <span class="number">10</span>)</span><br><span class="line">    <span class="keyword">if</span> (n &gt; <span class="number">20</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">"Result1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">"Result2"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>下列中，如果 m &gt; 10 不成立，则执行 else 部分代码</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Try with m = 12 and then with m = 8.</span></span><br><span class="line"><span class="keyword">int</span> m = <span class="number">12</span>;</span><br><span class="line"><span class="keyword">int</span> n = <span class="number">18</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Try with m = 12 and then with m = 8.</span></span><br><span class="line"><span class="keyword">if</span> (m &gt; <span class="number">10</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &gt; <span class="number">20</span>)</span><br><span class="line">        Console.WriteLine(<span class="string">"Result1"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">"Result2"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>可以将 if 语句嵌套到 else 块中，如以下部分代码所示。</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Change the values of these variables to test the results.</span></span><br><span class="line"><span class="keyword">bool</span> Condition1 = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">bool</span> Condition2 = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">bool</span> Condition3 = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">bool</span> Condition4 = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (Condition1)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Condition1 is true.</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (Condition2)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Condition1 is false and Condition2 is true.</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (Condition3)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (Condition4)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Condition1 and Condition2 are false. Condition3 and Condition4 are true.</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Condition1, Condition2, and Condition4 are false. Condition3 is true.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Condition1, Condition2, and Condition3 are false.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h2><p>针对 3 个或更多条件测试单个表达式，switch 语句通常用作 if-else 结构的替代项。</p><blockquote><blockquote><p>示例</p></blockquote></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Example</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      <span class="keyword">int</span> caseSwitch = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">switch</span> (caseSwitch)</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">              Console.WriteLine(<span class="string">"Case 1"</span>);</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">              Console.WriteLine(<span class="string">"Case 2"</span>);</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">default</span>:</span><br><span class="line">              Console.WriteLine(<span class="string">"Default case"</span>);</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// The example displays the following output:</span></span><br><span class="line"><span class="comment">//       Case 1</span></span><br></pre></td></tr></table></figure><h3 id="开关部分"><a href="#开关部分" class="headerlink" title="开关部分"></a>开关部分</h3><p>C# 不允许从一个开关部分继续执行到下一个开关部分。 因此，以下代码将生成编译器错误。</p><blockquote><p>error CS0163: 控制不能从一个 case 标签(“case 1:”)贯穿到另一个 case 标<br>签</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (caseSwitch)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// The following switch section causes an error.</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        Console.WriteLine(<span class="string">"Case 1..."</span>);</span><br><span class="line">        <span class="comment">// Add a break or other jump statement here.</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        Console.WriteLine(<span class="string">"... and/or Case 2"</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="default-case"><a href="#default-case" class="headerlink" title="default case"></a>default case</h3><p>default case 可以在 switch 语句中<strong>以任何顺序显示</strong>。 无论其在源代码中的顺序如何，都将在对所有 case 标签进行计算之后，<strong>最后对其进行计算</strong>。</p><h3 id="匹配表达式"><a href="#匹配表达式" class="headerlink" title="匹配表达式"></a>匹配表达式</h3><p>匹配表达式提供与 case 标签中的模式相匹配的值。 语法为：</p><pre><code>switch (expr)</code></pre><p>在 C# 6 中，匹配表达式必须是返回以下类型值的表达式：</p><ul><li><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/char/" target="_blank" rel="noopener">字符型</a>。</li><li><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/string/" target="_blank" rel="noopener">字符串</a>。</li><li><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/bool/" target="_blank" rel="noopener">bool</a>。</li><li>整数值，例如 int 或 long。</li><li><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/enum/" target="_blank" rel="noopener">枚举</a>值。</li></ul><p>从 <strong>C# 7</strong> 开始，匹配表达式可以是任何非 null 表达式。</p><h3 id="switch-语句的-模式匹配"><a href="#switch-语句的-模式匹配" class="headerlink" title="switch 语句的 模式匹配"></a>switch 语句的 模式匹配</h3><p>每个 case 语句定义一个模式，如果它与匹配表达式相匹配，则会导致执行其包含的开关部分。 所有版本的 C# 都支持<strong>常量模式</strong>。 其余模式从 <strong>C# 7</strong> 开始支持。</p><h4 id="常量模式"><a href="#常量模式" class="headerlink" title="常量模式"></a>常量模式</h4><p>常量模式测试匹配表达式是否等于指定常量。 语法为：</p><pre><code>case constant:</code></pre><p>其中 constant 是要测试的值。 constant 可以是以下任何常数表达式：</p><ul><li>bool 文本，为 true 或 false。</li><li>任何整数常量，例如 int、long 或字节。</li><li>已声明 const 变量的名称。</li><li>一个枚举常量。</li><li><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/char/" target="_blank" rel="noopener">字符型</a>文本。</li><li><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/string/" target="_blank" rel="noopener">字符串</a>文本。</li></ul><blockquote><blockquote><p>示例</p></blockquote><p>使用常量模式来确定特定日期是否为周末、工作周的第一天、工作周的最后一天或工作周的中间日期。 它根据 DayOfWeek 枚举的成员计算当前日期的 DateTime.DayOfWeek 属性。</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (DateTime.Now.DayOfWeek)</span><br><span class="line">        &#123;</span><br><span class="line">           <span class="keyword">case</span> DayOfWeek.Sunday:</span><br><span class="line">           <span class="keyword">case</span> DayOfWeek.Saturday:</span><br><span class="line">              Console.WriteLine(<span class="string">"The weekend"</span>);</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">           <span class="keyword">case</span> DayOfWeek.Monday:</span><br><span class="line">              Console.WriteLine(<span class="string">"The first day of the work week."</span>);</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">           <span class="keyword">case</span> DayOfWeek.Friday:</span><br><span class="line">              Console.WriteLine(<span class="string">"The last day of the work week."</span>);</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">           <span class="keyword">default</span>:</span><br><span class="line">              Console.WriteLine(<span class="string">"The middle of the work week."</span>);</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// The example displays output like the following:</span></span><br><span class="line"><span class="comment">//       The middle of the work week.</span></span><br></pre></td></tr></table></figure><h4 id="类型模式"><a href="#类型模式" class="headerlink" title="类型模式"></a>类型模式</h4><p>类型模式可启用简洁类型计算和转换。 使用 switch 语句执行模式匹配时，会测试表达式是否可转换为指定类型，如果可以，则将其转换为该类型的一个变量。 语法为：</p><pre><code>case type varname</code></pre><blockquote><blockquote><p>示例</p></blockquote><p>使用类型模式来提供有关各种集合类型的信息。</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Example</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] values = &#123; <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span> &#125;;</span><br><span class="line">        ShowCollectionInformation(values);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> names = <span class="keyword">new</span> List&lt;<span class="keyword">string</span>&gt;();</span><br><span class="line">        names.AddRange( <span class="keyword">new</span> <span class="keyword">string</span>[] &#123; <span class="string">"Adam"</span>, <span class="string">"Abigail"</span>, <span class="string">"Bertrand"</span>, <span class="string">"Bridgette"</span> &#125; );</span><br><span class="line">        ShowCollectionInformation(names);</span><br><span class="line"></span><br><span class="line">        List&lt;<span class="keyword">int</span>&gt; numbers = <span class="literal">null</span>;</span><br><span class="line">        ShowCollectionInformation(numbers);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ShowCollectionInformation</span>(<span class="params"><span class="keyword">object</span> coll</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (coll)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> Array arr:</span><br><span class="line">               Console.WriteLine(<span class="string">$"An array with <span class="subst">&#123;arr.Length&#125;</span> elements."</span>);</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> IEnumerable&lt;<span class="keyword">int</span>&gt; ieInt:</span><br><span class="line">               Console.WriteLine(<span class="string">$"Average: <span class="subst">&#123;ieInt.Average(s =&gt; s)&#125;</span>"</span>);</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> IList list:</span><br><span class="line">               Console.WriteLine(<span class="string">$"<span class="subst">&#123;list.Count&#125;</span> items"</span>);</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> IEnumerable ie:</span><br><span class="line">               <span class="keyword">string</span> result = <span class="string">""</span>;</span><br><span class="line">               <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> ie)</span><br><span class="line">                  result += <span class="string">"$&#123;e&#125; "</span>;</span><br><span class="line">               Console.WriteLine(result);</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="literal">null</span>:</span><br><span class="line">               <span class="comment">// Do nothing for a null.</span></span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">               Console.WriteLine(<span class="string">$"A instance of type <span class="subst">&#123;coll.GetType().Name&#125;</span>"</span>);</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// The example displays the following output:</span></span><br><span class="line"><span class="comment">//     An array with 5 elements.</span></span><br><span class="line"><span class="comment">//     4 items</span></span><br></pre></td></tr></table></figure><h3 id="case-语句和-when-子句"><a href="#case-语句和-when-子句" class="headerlink" title="case 语句和 when 子句"></a>case 语句和 when 子句</h3><p>从 C# 7 开始，因为 case 语句不需要互相排斥，因此可以添加 when 子句来指定必须满足的附加条件使 case 语句计算为 true。 when 子句可以是返回布尔值的任何表达式。 when 子句的更常见用法之一是防止在匹配表达式的值为 null 时执行开关部分。</p><p>据提参见 Microsoft Docs : <a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/switch#the-case-statement-and-the-when-clause" target="_blank" rel="noopener">swittch 关键字 -&gt; case 语句和 when 子句</a></p><h3 id="高级主题：switch-case-和-枚举值"><a href="#高级主题：switch-case-和-枚举值" class="headerlink" title="高级主题：switch case 和 枚举值"></a>高级主题：switch case 和 枚举值</h3><blockquote><p>直接利用枚举值例子</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">EnumSwitchCase</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">enum</span> Days &#123; Sunday = <span class="number">6</span>, Monday = <span class="number">3</span>, Tuesday, Wednesday, Thursday, Friday, Saturday &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Days Day = Days.Tuesday;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (Day)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> Days.Sunday:</span><br><span class="line">                Console.WriteLine(Days.Sunday);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> Days.Monday:</span><br><span class="line">                Console.WriteLine(Days.Monday);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> Days.Tuesday:</span><br><span class="line">                Console.WriteLine(Days.Tuesday);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Console.ReadKey();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 输出</span></span><br><span class="line"><span class="comment">Tuesday</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><blockquote><p>枚举值显式显式转换例子</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">EnumTest</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">enum</span> Day &#123; Sunday = <span class="number">6</span>, Monday = <span class="number">3</span>, Tuesday, Wednesday, Thursday, Friday, Saturday &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> ienum = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (ienum)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> (<span class="keyword">int</span>)Day.Sunday:</span><br><span class="line">                Console.WriteLine(Day.Sunday);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> (<span class="keyword">int</span>)Day.Monday:</span><br><span class="line">                Console.WriteLine(Day.Monday);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> (<span class="keyword">int</span>)Day.Tuesday:</span><br><span class="line">                Console.WriteLine(Day.Tuesday);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Console.ReadKey();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 输出</span></span><br><span class="line"><span class="comment">Tuesday</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h1 id="迭代语句"><a href="#迭代语句" class="headerlink" title="迭代语句"></a>迭代语句</h1><h2 id="do"><a href="#do" class="headerlink" title="do"></a>do</h2><p>do 语句重复执行一个语句或语句块，直到指定的表达式计算为 false 值。 循环体必须括在大括号 {} 内，除非它由单个语句组成。 在这种情况下，大括号是可选的。</p><blockquote><p>在下面的示例中，只要变量 x 小于 5，do-while 循环语句就开始执行。</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TestDoWhile</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span> (<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(x);</span><br><span class="line">            x++;</span><br><span class="line">        &#125; <span class="keyword">while</span> (x &lt; <span class="number">5</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    Output:</span></span><br><span class="line"><span class="comment">    0</span></span><br><span class="line"><span class="comment">    1</span></span><br><span class="line"><span class="comment">    2</span></span><br><span class="line"><span class="comment">    3</span></span><br><span class="line"><span class="comment">    4</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><blockquote><p>与 while 语句不同的是，do-while 循环会在计算条件表达式之前执行一次。</p><p>在 do-while 块中的任何点，都可使用 ==break== 语句跳出循环。 可通过使用 ==continue== 语句直接步入 while 表达式计算语句。 如果 while 表达式计算结果为 true，则继续执行循环中的第一个语句。 如果表达式的计算结果为 false，则继续执行 do-while 循环后的第一个语句。</p><p>do-while 循环还可以通过 goto、return 或 throw 语句退出。</p></blockquote><h2 id="while"><a href="#while" class="headerlink" title="while"></a>while</h2><p>while 语句执行一条语句或一个语句块，直到指定的表达式的计算结果为 false 为止。</p><blockquote><p>示例</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">WhileTest</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (n &lt; <span class="number">6</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">"Current value of n is &#123;0&#125;"</span>, n);</span><br><span class="line">            n++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    Output:</span></span><br><span class="line"><span class="comment">    Current value of n is 1</span></span><br><span class="line"><span class="comment">    Current value of n is 2</span></span><br><span class="line"><span class="comment">    Current value of n is 3</span></span><br><span class="line"><span class="comment">    Current value of n is 4</span></span><br><span class="line"><span class="comment">    Current value of n is 5</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><blockquote><p>因为 while 表达式的测试在每次执行循环之前开始，所以 while 循环执行零次或多次。 这不同于 do 循环，该循环执行一次或多次。</p><p>break、goto、return 或 throw 语句将控制转移到循环外时，while 循环可能终止。 若要将控制传递到下一个迭代，而不退出循环，则使用 continue 语句。</p></blockquote><h2 id="for"><a href="#for" class="headerlink" title="for"></a>for</h2><p>使用 for 循环，可以重复运行一个语句或语句块，直到指定的表达式的计算结果为 false 为止。 这种类型的循环可用于循环==访问数组==，以及==事先知道==循环要在其中进行==循环访问的次数==的其他应用程序。</p><blockquote><p>在下面的示例中，i 的值被写入控制台，并在循环的每次迭代过程中递增 1。</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">ForLoopTest</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Output:</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">4</span></span><br><span class="line"><span class="comment">5</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><blockquote><p>因为 while 表达式的测试在每次执行循环之前开始，所以 while 循环执行零次或多次。 这不同于 do 循环，该循环执行一次或多次。</p><p>break、goto、return 或 throw 语句将控制转移到循环外时，while 循环可能终止。 若要将控制传递到下一个迭代，而不退出循环，则使用 continue 语句。</p><p>下面的示例阐释了几种不太常见的选择：为初始化表达式部分中的外部循环变量赋值、同时在初始化表达式部分和迭代器部分中调用 Console.WriteLine 方法，以及更改迭代器部分中的两个变量的值。</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line">     <span class="keyword">int</span> i;</span><br><span class="line">     <span class="keyword">int</span> j = <span class="number">10</span>;</span><br><span class="line">     <span class="keyword">for</span> (i = <span class="number">0</span>, Console.WriteLine(<span class="string">"Start: &#123;0&#125;"</span>,i); i &lt; j; i++, j--, Console.WriteLine(<span class="string">"i=&#123;0&#125;, j=&#123;1&#125;"</span>, i, j))</span><br><span class="line">     &#123;</span><br><span class="line">         <span class="comment">// Body of the loop.</span></span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">// Output:</span></span><br><span class="line"> <span class="comment">// Start: 0</span></span><br><span class="line"> <span class="comment">// i=1, j=9</span></span><br><span class="line"> <span class="comment">// i=2, j=8</span></span><br><span class="line"> <span class="comment">// i=3, j=7</span></span><br><span class="line"> <span class="comment">// i=4, j=6</span></span><br><span class="line"> <span class="comment">// i=5, j=5</span></span><br></pre></td></tr></table></figure><blockquote><p>定义 for 语句的所有表达式都是可选的。 例如，以下语句创建一个无限循环。</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (; ; )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="foreach-in"><a href="#foreach-in" class="headerlink" title="foreach in"></a>foreach in</h2><p>foreach 语句针对实现 System.Collections.IEnumerable 或 System.Collections.Generic.IEnumerable<t> 接口的数组或集合中的每个元素重复一组嵌入语句。</t></p><p>在 foreach 块中的任何点上，可以使用 break 中断关键字中断该循环，或者可以使用 continue 继续关键字单步执行到循环中的下一次迭代。</p><ul><li>显示整数数组内容的典型 foreach 循环</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] fibarray = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">13</span> &#125;;</span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">int</span> element <span class="keyword">in</span> fibarray)</span><br><span class="line">&#123;</span><br><span class="line">    System.Console.WriteLine(element);</span><br><span class="line">&#125;</span><br><span class="line">System.Console.WriteLine();</span><br><span class="line"><span class="comment">// Output:</span></span><br><span class="line"><span class="comment">// 0</span></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"><span class="comment">// 5</span></span><br><span class="line"><span class="comment">// 8</span></span><br><span class="line"><span class="comment">// 13</span></span><br></pre></td></tr></table></figure><ul><li>执行相同操作的 for 循环</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] fibarray = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">13</span> &#125;;</span><br><span class="line"><span class="comment">// Compare the previous loop to a similar for loop.</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; fibarray.Length; i++)</span><br><span class="line">&#123;</span><br><span class="line">    System.Console.WriteLine(fibarray[i]);</span><br><span class="line">&#125;</span><br><span class="line">System.Console.WriteLine();</span><br><span class="line"><span class="comment">// Output:</span></span><br><span class="line"><span class="comment">// 0</span></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"><span class="comment">// 5</span></span><br><span class="line"><span class="comment">// 8</span></span><br><span class="line"><span class="comment">// 13</span></span><br></pre></td></tr></table></figure><ul><li>维护数组中元素数计数的 foreach 循环</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] fibarray = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">13</span> &#125;;</span><br><span class="line"><span class="comment">// You can maintain a count of the elements in the collection.</span></span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">int</span> element <span class="keyword">in</span> fibarray)</span><br><span class="line">&#123;</span><br><span class="line">    count += <span class="number">1</span>;</span><br><span class="line">    System.Console.WriteLine(<span class="string">"Element #&#123;0&#125;: &#123;1&#125;"</span>, count, element);</span><br><span class="line">&#125;</span><br><span class="line">System.Console.WriteLine(<span class="string">"Number of elements in the array: &#123;0&#125;"</span>, count);</span><br><span class="line"><span class="comment">// Output:</span></span><br><span class="line"><span class="comment">// Element #1: 0</span></span><br><span class="line"><span class="comment">// Element #2: 1</span></span><br><span class="line"><span class="comment">// Element #3: 1</span></span><br><span class="line"><span class="comment">// Element #4: 2</span></span><br><span class="line"><span class="comment">// Element #5: 3</span></span><br><span class="line"><span class="comment">// Element #6: 5</span></span><br><span class="line"><span class="comment">// Element #7: 8</span></span><br><span class="line"><span class="comment">// Element #8: 13</span></span><br><span class="line"><span class="comment">// Number of elements in the array: 8</span></span><br></pre></td></tr></table></figure><blockquote><p>因为 while 表达式的测试在每次执行循环之前开始，所以 while 循环执行零次或多次。 这不同于 do 循环，该循环执行一次或多次。</p></blockquote><h1 id="跳转语句"><a href="#跳转语句" class="headerlink" title="跳转语句"></a>跳转语句</h1><p>使用跳转语句执行分支，这将立即转移程序控制。 事实上，可以用跳转语句退出循环，或者跳过以此循环的剩余部分并开始下一次循环–即使当前循环条件仍然为true。跳转语句中使用下列关键字：</p><ul><li>break</li><li>continue</li><li>goto</li><li>return</li></ul><h2 id="break"><a href="#break" class="headerlink" title="break"></a>break</h2><p>C#使用brek语句退出循环或者switch语句。任何时候遇到break语句，控制都会立即离开循环或者switch。</p><p>break 语句将终止其所在位置的最接近封闭循环或 switch 语句。 控制权将传递给已终止语句后面的语句（若有）。</p><blockquote><blockquote><p>示例</p></blockquote><p>在此示例中，条件语句包含一个应从 1 计数到 100 的计数器；但 break 语句在计数器计数到 4 后终止了循环。</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">BreakTest</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">5</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            Console.WriteLine(i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Keep the console open in debug mode.</span></span><br><span class="line">        Console.WriteLine(<span class="string">"Press any key to exit."</span>);</span><br><span class="line">        Console.ReadKey();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> Output:</span></span><br><span class="line"><span class="comment">    1</span></span><br><span class="line"><span class="comment">    2</span></span><br><span class="line"><span class="comment">    3</span></span><br><span class="line"><span class="comment">    4</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><blockquote><blockquote><p>示例</p></blockquote><p>在此示例中，break 语句用于中断内层嵌套循环，并将控制权返回给外层循环。</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">BreakInNestedLoops</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] numbers = &#123; <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span> &#125;;</span><br><span class="line">        <span class="keyword">char</span>[] letters = &#123; <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>, <span class="string">'g'</span>, <span class="string">'h'</span>, <span class="string">'i'</span>, <span class="string">'j'</span> &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Outer loop</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; numbers.Length; x++)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">"num = &#123;0&#125;"</span>, numbers[x]);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Inner loop</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; letters.Length; y++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (y == x)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// Return control to outer loop</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                Console.Write(<span class="string">" &#123;0&#125; "</span>, letters[y]);</span><br><span class="line">            &#125;</span><br><span class="line">            Console.WriteLine();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Keep the console open in debug mode.</span></span><br><span class="line">        Console.WriteLine(<span class="string">"Press any key to exit."</span>);</span><br><span class="line">        Console.ReadKey();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Output:</span></span><br><span class="line"><span class="comment">    num = 0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    num = 1</span></span><br><span class="line"><span class="comment">     a</span></span><br><span class="line"><span class="comment">    num = 2</span></span><br><span class="line"><span class="comment">     a  b</span></span><br><span class="line"><span class="comment">    num = 3</span></span><br><span class="line"><span class="comment">     a  b  c</span></span><br><span class="line"><span class="comment">    num = 4</span></span><br><span class="line"><span class="comment">     a  b  c  d</span></span><br><span class="line"><span class="comment">    num = 5</span></span><br><span class="line"><span class="comment">     a  b  c  d  e</span></span><br><span class="line"><span class="comment">    num = 6</span></span><br><span class="line"><span class="comment">     a  b  c  d  e  f</span></span><br><span class="line"><span class="comment">    num = 7</span></span><br><span class="line"><span class="comment">     a  b  c  d  e  f  g</span></span><br><span class="line"><span class="comment">    num = 8</span></span><br><span class="line"><span class="comment">     a  b  c  d  e  f  g  h</span></span><br><span class="line"><span class="comment">    num = 9</span></span><br><span class="line"><span class="comment">     a  b  c  d  e  f  g  h  i</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h2 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h2><p>continue 语句将控制传递到其中出现的封闭 while、do、for 或 foreach 语句的下一次迭代。如果循环条件仍然为 true，循环将继续执行。</p><blockquote><blockquote><p>示例</p></blockquote><p>在本示例中，计数器最初是从 1 到 10 进行计数。 通过结合使用 continue 语句和表达式 (i &lt; 9)，跳过 continue 和 for 主体末尾之间的语句。</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">ContinueTest</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &lt; <span class="number">9</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            Console.WriteLine(i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Keep the console open in debug mode.</span></span><br><span class="line">        Console.WriteLine(<span class="string">"Press any key to exit."</span>);</span><br><span class="line">        Console.ReadKey();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Output:</span></span><br><span class="line"><span class="comment">9</span></span><br><span class="line"><span class="comment">10</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="goto"><a href="#goto" class="headerlink" title="goto"></a>goto</h2><p>C# 确实支持 goto ，并且，<strong>不仅仅</strong>可以用在 switch 语句中。</p><ul><li>goto 语句将程序控制直接传递给标记语句。</li><li>goto 的一个通常用法是将控制传递给特定的 switch-case 标签或 switch 语句中的默认标签。</li><li>goto 语句还用于跳出深嵌套循环。</li></ul><blockquote><blockquote><p>示例</p></blockquote><p>下面的示例演示了 goto 在 switch 语句中的使用。</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">SwitchTest</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Console.WriteLine(<span class="string">"Coffee sizes: 1=Small 2=Medium 3=Large"</span>);</span><br><span class="line">        Console.Write(<span class="string">"Please enter your selection: "</span>);</span><br><span class="line">        <span class="keyword">string</span> s = Console.ReadLine();</span><br><span class="line">        <span class="keyword">int</span> n = <span class="keyword">int</span>.Parse(s);</span><br><span class="line">        <span class="keyword">int</span> cost = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">switch</span> (n)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                cost += <span class="number">25</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                cost += <span class="number">25</span>;</span><br><span class="line">                <span class="keyword">goto</span> <span class="keyword">case</span> <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                cost += <span class="number">50</span>;</span><br><span class="line">                <span class="keyword">goto</span> <span class="keyword">case</span> <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                Console.WriteLine(<span class="string">"Invalid selection."</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (cost != <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">"Please insert &#123;0&#125; cents."</span>, cost);</span><br><span class="line">        &#125;</span><br><span class="line">        Console.WriteLine(<span class="string">"Thank you for your business."</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Keep the console open in debug mode.</span></span><br><span class="line">        Console.WriteLine(<span class="string">"Press any key to exit."</span>);</span><br><span class="line">        Console.ReadKey();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Sample Input:  2</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Sample Output:</span></span><br><span class="line"><span class="comment">Coffee sizes: 1=Small 2=Medium 3=Large</span></span><br><span class="line"><span class="comment">Please enter your selection: 2</span></span><br><span class="line"><span class="comment">Please insert 50 cents.</span></span><br><span class="line"><span class="comment">Thank you for your business.</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><blockquote><blockquote><p>示例</p></blockquote><p>下面的示例演示了使用 goto 跳出嵌套循环。</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">GotoTest1</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">200</span>, y = <span class="number">4</span>;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">string</span>[,] array = <span class="keyword">new</span> <span class="keyword">string</span>[x, y];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Initialize the array:</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; x; i++)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; y; j++)</span><br><span class="line">                array[i, j] = (++count).ToString();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Read input:</span></span><br><span class="line">        Console.Write(<span class="string">"Enter the number to search for: "</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Input a string:</span></span><br><span class="line">        <span class="keyword">string</span> myNumber = Console.ReadLine();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Search:</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; x; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; y; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (array[i, j].Equals(myNumber))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">goto</span> Found;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Console.WriteLine(<span class="string">"The number &#123;0&#125; was not found."</span>, myNumber);</span><br><span class="line">        <span class="keyword">goto</span> Finish;</span><br><span class="line"></span><br><span class="line">    Found:</span><br><span class="line">        Console.WriteLine(<span class="string">"The number &#123;0&#125; is found."</span>, myNumber);</span><br><span class="line"></span><br><span class="line">    Finish:</span><br><span class="line">        Console.WriteLine(<span class="string">"End of search."</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Keep the console open in debug mode.</span></span><br><span class="line">        Console.WriteLine(<span class="string">"Press any key to exit."</span>);</span><br><span class="line">        Console.ReadKey();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Sample Input: 44</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Sample Output</span></span><br><span class="line"><span class="comment">Enter the number to search for: 44</span></span><br><span class="line"><span class="comment">The number 44 is found.</span></span><br><span class="line"><span class="comment">End of search.</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="return"><a href="#return" class="headerlink" title="return"></a>return</h2><p>return 语句可终止它所在的方法的执行，并将控制权返回给调用方法。 它还可以返回可选值。 如果方法是 <strong>void</strong> 类型，则 return 语句可以<strong>省略</strong>。</p><blockquote><blockquote><p>示例</p></blockquote><p>在下面的示例中，该方法CalculateArea()返回局部变量area作为double值</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">ReturnTest</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">double</span> <span class="title">CalculateArea</span>(<span class="params"><span class="keyword">int</span> r</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> area = r * r * Math.PI;</span><br><span class="line">        <span class="keyword">return</span> area;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> radius = <span class="number">5</span>;</span><br><span class="line">        <span class="keyword">double</span> result = CalculateArea(radius);</span><br><span class="line">        Console.WriteLine(<span class="string">"The area is &#123;0:0.00&#125;"</span>, result);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Keep the console open in debug mode.</span></span><br><span class="line">        Console.WriteLine(<span class="string">"Press any key to exit."</span>);</span><br><span class="line">        Console.ReadKey();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Output: The area is 78.54</span></span><br></pre></td></tr></table></figure><h1 id="C-预处理指令"><a href="#C-预处理指令" class="headerlink" title="C# 预处理指令"></a>C# 预处理指令</h1><p>控制流语句中的表达式是在运行时求值。相反，C#预处理器在编译时调用。</p><h2 id="define-和-undef"><a href="#define-和-undef" class="headerlink" title="#define 和 #undef"></a>#define 和 #undef</h2><p>使用 #define 来定义符号。 将符号用作传递给 #if 指令的表达式时，该表达式的计算结果为 <strong>true</strong>，如以下示例所示：</p><pre><code>#define DEBUG</code></pre><p>还可以通过 /define 编译器选项来定义符号。 可以通过 #undef 取消定义符号。</p><ul><li>#undef 允许你定义一个符号，这样一来，通过将该符号用作 #if 指令中的表达式，表达式将计算为 <strong>false</strong>。</li></ul><h2 id="if-elif-else-和-endif"><a href="#if-elif-else-和-endif" class="headerlink" title="#if, #elif, #else, 和 #endif"></a>#if, #elif, #else, 和 #endif</h2><p>以 #if 指令开头的条件指令必须以 #endif 指令显式终止</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// preprocessor_if.cs</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DEBUG</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MYTEST</span></span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyClass</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> (DEBUG &amp;&amp; !MYTEST)</span></span><br><span class="line">        Console.WriteLine(<span class="string">"DEBUG is defined"</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">elif</span> (!DEBUG &amp;&amp; MYTEST)</span></span><br><span class="line">        Console.WriteLine(<span class="string">"MYTEST is defined"</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">elif</span> (DEBUG &amp;&amp; MYTEST)</span></span><br><span class="line">        Console.WriteLine(<span class="string">"DEBUG and MYTEST are defined"</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">        Console.WriteLine(<span class="string">"DEBUG and MYTEST are not defined"</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="warning-和-error"><a href="#warning-和-error" class="headerlink" title="#warning 和 #error"></a>#warning 和 #error</h2><ul><li>#warning 可从代码中的特定位置生成一个级别的警告。</li><li>#error 可从代码中的特定位置生成错误。</li><li>编译器遇到 #warning 指令，会显示 #warning 指令后面的文本，然后<strong>继续编译</strong>。</li><li>编译器遇到 #error 指令，会显示后面的文本，然后<strong>立即退出编译</strong>，不会生成IL代码。</li></ul><h2 id="region-和-endregion"><a href="#region-和-endregion" class="headerlink" title="#region 和 #endregion"></a>#region 和 #endregion</h2><p>利用 #region 和 #endregion，可以指定在使用 Visual Studio 编辑器的大纲功能时可展开或折叠的代码块。</p><ul><li>#region 块必须通过 #endregion 指令终止。</li><li>#region 块不能与 #if 块重叠。 但是，可以将 #region 块嵌套在 #if 块内，或将 #if 块嵌套在 #region 块内。</li></ul><h2 id="line"><a href="#line" class="headerlink" title="#line"></a>#line</h2><ul><li>#line 可修改编译器的行号及（可选）用于错误和警告的文件名输出。</li></ul><p>此示例演示如何报告与行号相关联的两个警告。 #line 200 指令将行号强制设为 200（尽管默认值为 #7），直到下一个 #line 指令前，文件名都将报告为“特殊”。 #line 默认指令将行号返回至其默认行号，默认行号对由上个指令重新编号的行进行计数。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">MainClass</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">line</span> 200 "Special"</span></span><br><span class="line">        <span class="keyword">int</span> i;    <span class="comment">// CS0168 on line 200</span></span><br><span class="line">        <span class="keyword">int</span> j;    <span class="comment">// CS0168 on line 201</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">line</span> default</span></span><br><span class="line">        <span class="keyword">char</span> c;   <span class="comment">// CS0168 on line 9</span></span><br><span class="line">        <span class="keyword">float</span> f;  <span class="comment">// CS0168 on line 10</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">line</span> hidden // numbering not affected</span></span><br><span class="line">        <span class="keyword">string</span> s;</span><br><span class="line">        <span class="keyword">double</span> d; <span class="comment">// CS0168 on line 13</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>#line hidden 指令能对调试程序隐藏连续行，当开发者逐行执行代码时，介于 #line hidden 和下一 #line 指令（假设它不是其他 #line hidden 指令）间的任何行都将被跳过。</li></ul><p>意思是，调试器会执行 #hidden 后面代码，只是不会在 #hidden 后面代码调试停留。即便设置了断点，也会被调试器忽略。</p><blockquote><blockquote><p>示例</p></blockquote><p>下列示例演示调试程序如何忽略代码中的隐藏行。 运行示例时，它将显示三行文本。 但是，如果按照示例所示设置断点、并按 F10 逐行执行代码，可观察到调试程序忽略隐藏行。 另请注意，即使在隐藏行设置断点，调试程序仍将忽略它。<br>C#</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// preprocessor_linehidden.cs</span></span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">class</span> <span class="title">MainClass</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Console.WriteLine(<span class="string">"Normal line #1."</span>); <span class="comment">// Set break point here.</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">line</span> hidden</span></span><br><span class="line">        Console.WriteLine(<span class="string">"Hidden line."</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">line</span> default</span></span><br><span class="line">        Console.WriteLine(<span class="string">"Normal line #2."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行时输出结果：</p><pre><code>Normal line #1.Hidden line.Normal line #2.</code></pre><h2 id="pragam"><a href="#pragam" class="headerlink" title="#pragam"></a>#pragam</h2><ul><li>#pragma 指令可以启用或者禁用特定的编译警告。</li></ul><p>下面例子禁止“字段未使用”警告，然后在编译MyClass类后还原该警告。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> <span class="meta-keyword">warning</span> disable 169</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyClass</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> neverUsedField;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> <span class="meta-keyword">warning</span> restore 169</span></span><br></pre></td></tr></table></figure><blockquote><p>若要查找警告编号，请在 Visual Studio 中生成项目，然后在“输出”窗口中查找警告编号。这是要干嘛？😥</p></blockquote><h1 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h1>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;操作符-Operators&quot;&gt;&lt;a href=&quot;#操作符-Operators&quot; class=&quot;headerlink&quot; title=&quot;操作符 Operators&quot;&gt;&lt;/a&gt;操作符 Operators&lt;/h1&gt;&lt;p&gt;操作符，也叫&lt;strong&gt;运算符&lt;/strong&gt;，英文：&lt;strong&gt;Operrators&lt;/strong&gt;，见 Microsoft Docs &lt;a href=&quot;https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/operators/index/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;C# 运算符&lt;/a&gt;。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名称&lt;/th&gt;
&lt;th&gt;含义&lt;/th&gt;
&lt;th&gt;例子&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;一元运算符&lt;/td&gt;
&lt;td&gt;接受一个操作数的运算符&lt;/td&gt;
&lt;td&gt;++ 或 new&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;二元运算符&lt;/td&gt;
&lt;td&gt;接受两个操作数的运算符&lt;/td&gt;
&lt;td&gt;+ - * /&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;三元运算符&lt;/td&gt;
&lt;td&gt;接受三个操作数，C#中唯一的条件运算符&lt;/td&gt;
&lt;td&gt;?:&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
    
    </summary>
    
    
      <category term="C#" scheme="http://slowread.cn/tags/C/"/>
    
      <category term="C#本质论" scheme="http://slowread.cn/tags/C-%E6%9C%AC%E8%B4%A8%E8%AE%BA/"/>
    
      <category term="Essential C#" scheme="http://slowread.cn/tags/Essential-C/"/>
    
  </entry>
  
  <entry>
    <title>Visual Studio Code VSCode 常用 插件 扩展</title>
    <link href="http://slowread.cn/2017/12/14/Visual-Studio-Code-%E5%B8%B8%E7%94%A8%E6%8F%92%E4%BB%B6/"/>
    <id>http://slowread.cn/2017/12/14/Visual-Studio-Code-常用插件/</id>
    <published>2017-12-14T04:56:48.000Z</published>
    <updated>2017-12-17T01:23:46.334Z</updated>
    
    <content type="html"><![CDATA[<h1 id="界面主题"><a href="#界面主题" class="headerlink" title="界面主题"></a>界面主题</h1><ul><li>Monokai : VSCcode 内置主题</li><li>Agila : 包含多个主题</li><li>Dark-Dracula Theme : Dracula 风格主题里面比较好的</li><li>Nosferatu : Dracula 风格主题</li></ul><a id="more"></a><ul><li>monokai light : 白色，背景色类色默认的vs亮色主题背景</li><li>FlatUI : 包含多个主题</li><li>Flatland Monokai Theme :</li><li>theme-dark-monokai :</li><li>Monokai Dark Soda :</li><li>Monokai Light :</li></ul><h1 id="图标主题"><a href="#图标主题" class="headerlink" title="图标主题"></a>图标主题</h1><ul><li>vscode-icons：Icons : 主要推荐</li><li>material icon theme : 备选</li></ul><h1 id="功能插件"><a href="#功能插件" class="headerlink" title="功能插件"></a>功能插件</h1><ul><li>C# : VSCode 开发 C# 必备</li><li>C# FixFormat : 格式化代码，好用</li><li>C# Extensions : 提高开发效率的扩展工具</li><li>Bracket Pair Colorizer ：对括号对进行着色，再也不会眼晕了。</li><li>Markdown All in One : All in One ，好用</li><li>markdownlint : 编写 Markdown 文件时智能提示，有助于养成好习惯。</li><li>Markdown Table Prettifier : Markdown 文件中，对表格进行强制格式化，看起来更整齐，舒服。</li><li>XML Tools  ：作者 Josh Johnson - XML 格式化/Tree View </li><li>XML Tools （备选） : 作者 Qub -  格式化XML文档 Alt+Shift+F </li><li>Output Colorizer : 可以终端日志输出着色，实用</li><li>vscode-fileheader: 添加头header comment</li><li>Setting Sync: 同步你的设置和插件</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;界面主题&quot;&gt;&lt;a href=&quot;#界面主题&quot; class=&quot;headerlink&quot; title=&quot;界面主题&quot;&gt;&lt;/a&gt;界面主题&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Monokai : VSCcode 内置主题&lt;/li&gt;
&lt;li&gt;Agila : 包含多个主题&lt;/li&gt;
&lt;li&gt;Dark-Dracula Theme : Dracula 风格主题里面比较好的&lt;/li&gt;
&lt;li&gt;Nosferatu : Dracula 风格主题&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="VSCode" scheme="http://slowread.cn/tags/VSCode/"/>
    
      <category term="插件" scheme="http://slowread.cn/tags/%E6%8F%92%E4%BB%B6/"/>
    
      <category term="Visual Studio" scheme="http://slowread.cn/tags/Visual-Studio/"/>
    
      <category term="Visual Studio Code" scheme="http://slowread.cn/tags/Visual-Studio-Code/"/>
    
  </entry>
  
  <entry>
    <title>推荐2个好看的linux发行版本</title>
    <link href="http://slowread.cn/2017/12/14/%E6%8E%A8%E8%8D%902%E4%B8%AA%E5%A5%BD%E7%9C%8B%E7%9A%84linux%E5%8F%91%E8%A1%8C%E7%89%88%E6%9C%AC/"/>
    <id>http://slowread.cn/2017/12/14/推荐2个好看的linux发行版本/</id>
    <published>2017-12-13T17:21:31.000Z</published>
    <updated>2017-12-17T04:27:47.160Z</updated>
    
    <content type="html"><![CDATA[<p>高清图片，加载时间有点长…</p><h1 id="elementary-OS"><a href="#elementary-OS" class="headerlink" title="elementary OS"></a>elementary OS</h1><p>官网地址：<a href="http://www.elementary.io/" target="_blank" rel="noopener">http://www.elementary.io/</a></p><p>界面截图</p><a id="more"></a><p><img src="http://slowread.cn/images/material/elementary-OS-0.png" alt="image"></p><p><img src="http://slowread.cn/images/material/elementary-OS-1.png" alt="image"></p><p><img src="http://slowread.cn/images/material/elementary-OS-2.png" alt="image"></p><h1 id="feren-OS"><a href="#feren-OS" class="headerlink" title="feren OS"></a>feren OS</h1><p>官网地址：<a href="https://ferenos.weebly.com/" target="_blank" rel="noopener">https://ferenos.weebly.com/</a></p><p>界面截图</p><p><img src="http://slowread.cn/images/material/feren-OS-x64-0.png" alt="image"></p><p><img src="http://slowread.cn/images/material/feren-OS-x64-1.png" alt="image"></p><p><img src="http://slowread.cn/images/material/feren-OS-x64-2.png" alt="image"></p><p><img src="http://slowread.cn/images/material/feren-OS-x64-3.png" alt="image"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;高清图片，加载时间有点长…&lt;/p&gt;
&lt;h1 id=&quot;elementary-OS&quot;&gt;&lt;a href=&quot;#elementary-OS&quot; class=&quot;headerlink&quot; title=&quot;elementary OS&quot;&gt;&lt;/a&gt;elementary OS&lt;/h1&gt;&lt;p&gt;官网地址：&lt;a href=&quot;http://www.elementary.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.elementary.io/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;界面截图&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="http://slowread.cn/tags/Linux/"/>
    
      <category term="elementary OS" scheme="http://slowread.cn/tags/elementary-OS/"/>
    
      <category term="feren OS" scheme="http://slowread.cn/tags/feren-OS/"/>
    
  </entry>
  
  <entry>
    <title>NumLock灯在多个linux版本中的不同设置方法</title>
    <link href="http://slowread.cn/2017/12/14/NumLock%E7%81%AF%E5%9C%A8%E5%A4%9A%E4%B8%AAlinux%E7%89%88%E6%9C%AC%E4%B8%AD%E7%9A%84%E4%B8%8D%E5%90%8C%E8%AE%BE%E7%BD%AE%E6%96%B9%E6%B3%95/"/>
    <id>http://slowread.cn/2017/12/14/NumLock灯在多个linux版本中的不同设置方法/</id>
    <published>2017-12-13T16:27:18.000Z</published>
    <updated>2017-12-17T04:28:30.613Z</updated>
    
    <content type="html"><![CDATA[<h1 id="elementary-OS"><a href="#elementary-OS" class="headerlink" title="elementary OS"></a>elementary OS</h1><p>第一步：安装numlockx，输入命令</p><pre><code>sudo apt-get install numlockx</code></pre><p>第二步：用 vim 打开 /etc/lightdm/pantheon-greeter.conf 文件，取消numlock行前面的 #</p><pre><code># activate-numlock=true.</code></pre><a id="more"></a><p>结果如下图：</p><p><img src="http://slowread.cn/images/material/linux-numlock-eos.png" alt="image"></p><p>最后：重启或者注销后。小键盘就可以自动启动了</p><blockquote><p>Tips: vim怎么插入内容呢？</p><ul><li>快捷键 i 切换到插入模式</li><li>方向键调整光标到插入位置</li><li>复制粘贴代码</li><li>Esc键退出插入模式，回到默认的命令模式</li><li>输入命令 :wq 表示保存并退出</li></ul></blockquote><h1 id="ferenOS，Linux-Mint"><a href="#ferenOS，Linux-Mint" class="headerlink" title="ferenOS，Linux Mint"></a>ferenOS，Linux Mint</h1><p>第一步：安装numlockx，输入命令</p><pre><code>sudo apt-get install numlockx</code></pre><p>第二步：用 vim 打开 /etc/lightdm/lightdm.conf文件，最后一行添加 </p><pre><code>greeter-setup-script=/usr/bin/numlockx on</code></pre><blockquote><p>Tips: 敲入下面命令编辑文件</p></blockquote><pre><code>sudo vi /etc/lightdm/lightdm.conf</code></pre><p>结果如下图：</p><p><img src="http://slowread.cn/images/material/linux-numlock-mint-ferenos.png" alt="image"></p><p>同样的，重启或者注销后，生效。</p><h1 id="CentOS-，Scientific-Linux，Fedora-and-other-rpm-based"><a href="#CentOS-，Scientific-Linux，Fedora-and-other-rpm-based" class="headerlink" title="CentOS ，Scientific Linux，Fedora and other rpm based"></a>CentOS ，Scientific Linux，Fedora and other rpm based</h1><ul><li>先安装numlockx,可以去opensuse的软件中心里找rpm包进行安装</li><li>下载地址：<a href="https://pkgs.org/download/numlockx/" target="_blank" rel="noopener">https://pkgs.org/download/numlockx/</a></li><li>安装命令： sudo rpm -i numlockx-1.2-6.el7.nux.x86_64.rpm<ul><li>或者：sudo yum install numlockx</li></ul></li><li>先备份 cp /etc/gdm/Init/Default /etc/gdm/Init/Default_backup</li><li>再修改 vim /etc/gdm/Init/Default</li><li>在exit 0之前加上/usr/bin/numlockx on,重启就会发现小键盘已经打开了！</li></ul><h1 id="Ubuntu-and-other-debian-based"><a href="#Ubuntu-and-other-debian-based" class="headerlink" title="Ubuntu and other debian based"></a>Ubuntu and other debian based</h1><h2 id="基于-gdm"><a href="#基于-gdm" class="headerlink" title="基于 gdm"></a>基于 gdm</h2><p>安装 numlockx ,在终端中输入命令：</p><pre><code>sudo apt-get install numlockx</code></pre><p>配置 numlockx</p><pre><code>sudo gedit /etc/gdm/Init/Default</code></pre><p>在 exit 0 之前，添加如下内容：</p><pre><code>#set numlock onif [ -x /usr/bin/numlockx ]; then/usr/bin/numlockx onfi</code></pre><p>结果如下图：</p><p><img src="http://slowread.cn/images/material/linux-numlock-ubuntu.png" alt="image"></p><h2 id="基于-lightdm"><a href="#基于-lightdm" class="headerlink" title="基于 lightdm"></a>基于 lightdm</h2><pre><code>sudo gedit /etc/lightdm/lightdm.conf</code></pre><p>最后一行添加下面语句：</p><pre><code>greeter-setup-script=/usr/bin/numlockx on</code></pre><p>结果如下图：</p><p><img src="http://slowread.cn/images/material/linux-numlock-ubuntu-other.png" alt="image"></p><p>重启或者注销后，生效。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;elementary-OS&quot;&gt;&lt;a href=&quot;#elementary-OS&quot; class=&quot;headerlink&quot; title=&quot;elementary OS&quot;&gt;&lt;/a&gt;elementary OS&lt;/h1&gt;&lt;p&gt;第一步：安装numlockx，输入命令&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo apt-get install numlockx
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;第二步：用 vim 打开 /etc/lightdm/pantheon-greeter.conf 文件，取消numlock行前面的 #&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# activate-numlock=true.
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="http://slowread.cn/tags/Linux/"/>
    
      <category term="NumLock" scheme="http://slowread.cn/tags/NumLock/"/>
    
  </entry>
  
  <entry>
    <title>C#本质论笔记 第2章 数据类型</title>
    <link href="http://slowread.cn/2017/12/13/CSharp%E6%9C%AC%E8%B4%A8%E8%AE%BA%E7%AC%94%E8%AE%B0-%E7%AC%AC2%E7%AB%A0-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <id>http://slowread.cn/2017/12/13/CSharp本质论笔记-第2章-数据类型/</id>
    <published>2017-12-13T08:27:35.000Z</published>
    <updated>2017-12-17T05:58:20.865Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><p>预定义类型(predefined type)/基元类型(primitive type)，也翻译为基本类型、基础类型或者原始类型。</p><a id="more"></a><table><thead><tr><th>类型</th><th>Size</th><th>Range</th><th>BCL name</th><th>Signed</th><th>精度</th><th>后缀</th><th>例子</th></tr></thead><tbody><tr><td>sbyte</td><td>8 bits</td><td>-128 to 127</td><td>System.SByte</td><td>是</td><td></td><td></td><td></td></tr><tr><td>byte</td><td>8 bits</td><td>0 to 255</td><td>System.Byte</td><td>否</td><td></td><td></td><td></td></tr><tr><td>short</td><td>16 bits</td><td>-32,768 to 32,767</td><td>System.Int16</td><td>是</td><td></td><td></td><td></td></tr><tr><td>ushort</td><td>16 bits</td><td>0 to 65,535</td><td>System.UInt16</td><td>否</td><td></td><td></td><td></td></tr><tr><td>int</td><td>32 bits</td><td>-2,147,483,648 to 2,147,483,647</td><td>System.Int32</td><td>是</td><td></td><td></td><td></td></tr><tr><td>uint</td><td>32 bits</td><td>0 到 4,294,967,295</td><td>System.UInt32</td><td>否</td><td></td><td>U或u</td><td></td></tr><tr><td>long</td><td>64 bits</td><td>-9,223,372,036,854,775,808 <br> to <br> 9,223,372,036,854,775,807</td><td>System.Int64</td><td>是</td><td></td><td>L或l</td><td></td></tr><tr><td>ulong</td><td>64 bits</td><td>-9,223,372,036,854,775,808 <br> to <br> 9,223,372,036,854,775,807</td><td>System.UInt64</td><td>否</td><td></td><td>UL或ul</td><td></td></tr><tr><td>float</td><td>32 bits</td><td>±1.5e−45 到 ±3.4e38</td><td>System.Single</td><td></td><td>7</td><td>F或f</td><td></td></tr><tr><td>double</td><td>64 bits</td><td>±5.0e−324 到 ±1.7e308</td><td>System.Double</td><td></td><td>15-16</td><td>D或d</td><td></td></tr><tr><td>decimal</td><td>128 bits</td><td>±1.0e−28 到 ±7.9e28</td><td>System.Decimal</td><td></td><td>28-29</td><td>M或m</td><td></td></tr><tr><td>bool</td><td>bits</td><td></td><td>System.Boolean</td><td></td><td></td><td></td><td></td></tr><tr><td>char</td><td>16 bits <br> Unicode 字符</td><td>U+0000 到 U+ffff</td><td>System.Char</td><td></td><td></td><td></td><td>char test; <br> test = ‘A’</td></tr><tr><td>string</td><td></td><td></td><td>System.String</td><td></td><td></td><td></td><td>string test; <br> test = “A”</td></tr><tr><td>object</td><td></td><td></td><td>System.Object</td><td></td><td></td><td></td><td></td></tr><tr><td>dynamic</td><td></td><td></td><td>无相应.NET类型</td><td></td><td></td><td></td></tr></tbody></table><blockquote><p>类型关键字和BCL name效果相同，规范建议指定数据类型时使用C#关键字，而不是BCL名称（例如，使用==string==而不是System.String或者==String==）。</p><p>后缀不区分大小写，一般建议采用大写。但对于long ，强烈建议使用大写字母Ｌ，因为小写字母ｌ和数字１不好区分。</p><p>关于指数记数法，需要使用 e 或者 E 中缀，在中缀字母后添加正整数或者负整数，并在字面量的最后添加恰当的数据类型后缀。例如将阿伏加德罗常熟作为float输出，代码如下：</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.Console.WriteLine(<span class="number">6.023E23</span>F);</span><br></pre></td></tr></table></figure><blockquote><p>输出结果</p></blockquote><pre><code>6.023E+23</code></pre><h1 id="经常用到的数字格式化输出例子"><a href="#经常用到的数字格式化输出例子" class="headerlink" title="经常用到的数字格式化输出例子"></a>经常用到的数字格式化输出例子</h1><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">hello</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> dValue = <span class="number">12345.6789</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//几种格式转换输出方式</span></span><br><span class="line">        System.Console.WriteLine (dValue); <span class="comment">//原值输出输出  12345.6789</span></span><br><span class="line">        System.Console.WriteLine (<span class="string">"&#123;0&#125;"</span>, dValue);</span><br><span class="line">        System.Console.WriteLine (<span class="keyword">string</span>.Format (<span class="string">"&#123;0&#125;"</span>, dValue));</span><br><span class="line">        System.Console.WriteLine (dValue.ToString ());</span><br><span class="line"></span><br><span class="line">        System.Console.WriteLine (<span class="string">"以下几种方法在数据有效范围内效果相同："</span>);</span><br><span class="line">        System.Console.WriteLine (<span class="string">"WriteLine (dValue);"</span>);</span><br><span class="line">        System.Console.WriteLine (<span class="string">"WriteLine (\"&#123;0&#125;\", dValue);"</span>);</span><br><span class="line">        System.Console.WriteLine (<span class="string">"WriteLine (string.Format (\"&#123;0&#125;\", dValue));"</span>);</span><br><span class="line">        System.Console.WriteLine (<span class="string">"WriteLine (dValue.ToString ());"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>输出结果</p></blockquote><pre><code>12345.678912345.678912345.678912345.6789以下几种方法在数据有效范围内效果相同：WriteLine (dValue);WriteLine (&quot;{0}&quot;, dValue);WriteLine (string.Format (&quot;{0}&quot;, dValue));WriteLine (dValue.ToString ());</code></pre><h1 id="基本数值类型"><a href="#基本数值类型" class="headerlink" title="基本数值类型"></a>基本数值类型</h1><p>C#基本数值类型包括整数类型、浮点类型以及decimal类型。</p><blockquote><p>浮点数的精度是可变的。例如浮点数 0.1，可以表示成 0.0999999999 或者 0.100000001（或者任何非常接近0.1的数）。</p><p>decimal是一种特殊的浮点类型，是128位精度的10进制浮点类型，能够存书大数字而无表示错误，适合大而精确的计算。</p><ul><li>与==二进制==浮点数不同，decimal类型保证范围内所有的==十进制==数都是精确的，0.1就是0.1。</li></ul><p>==<strong>关于浮点精度理解</strong>==，目前计算机是2进制（只有0，1状态）的运算机器，所有小于1的数，只能用除法计算得到结果，计算机中的除法就是移位。</p><ul><li>例如0.1，表示成分数是1/10，分母10不是2的整数次幂，因此1/10不能用有限的二进制小数表示。</li></ul></blockquote><h2 id="字面值或字面量-literal-value"><a href="#字面值或字面量-literal-value" class="headerlink" title="字面值或字面量(literal value)"></a>字面值或字面量(literal value)</h2><blockquote><p>literal value 表示源代码中的固定值，就是数据值本身。Microsoft Docs 将 <code>literal</code> 翻译作 <code>文本</code>。</p><ul><li>个人理解，字面量可以叫做常数，常数值，固定值等等，可以是用户自己定义的或者系统定义的常数、符号等（例如：==123==、==’A’==、==\n== 等）。</li></ul><p>例如，下面代码中的数字值：</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.Console.WriteLine(<span class="number">42</span>);</span><br><span class="line">System.Console.WriteLine(<span class="number">1.618034</span>);</span><br></pre></td></tr></table></figure><blockquote><p>输出结果</p></blockquote><pre><code>421.618034</code></pre><blockquote><p>用变量定义来实现上面的效果，定义int 类型变量 x 并赋值 42 ，定义 double 类型变量 y 并赋值 1.618034 。</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> x = <span class="number">42</span>;</span><br><span class="line"><span class="keyword">double</span> y = <span class="number">1.618034</span>;</span><br><span class="line">System.Console.WriteLine(x);</span><br><span class="line">System.Console.WriteLine(y);</span><br></pre></td></tr></table></figure><blockquote><p>输出结果</p></blockquote><pre><code>421.618034</code></pre><h2 id="初学者主题-使用硬编码要慎重"><a href="#初学者主题-使用硬编码要慎重" class="headerlink" title="初学者主题:使用硬编码要慎重"></a>初学者主题:使用<code>硬编码</code>要慎重</h2><p>直接将值放到源代码中成为硬编码（==hardcoding==），如果以后需要更改值，就必须重新编译代码。给予方便维护考虑，可以考虑从外部获取值，比如从一个配置文件中，这样以后修改值的时候，不需要重新编译代码。</p><blockquote><p>带小数点的字面值，编译器自动解释成 double 类型。</p><p>整数值（没有小数点）通常默认为 int，前提是值在 int 类型存储范围内。如果值太大，编译器会把它解释成 long 。</p><p>C# 允许想非 int 类型赋值，前提是字面值对于目标数据类型来说是合法的。例如，short s = 42和byte b = 77都是允许的。但值一点进队字面值成立。如果不使用额外语法，b = s就是非法的。</p></blockquote><h2 id="数据精度相关代码示例"><a href="#数据精度相关代码示例" class="headerlink" title="数据精度相关代码示例"></a>数据精度相关代码示例</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.Console.WriteLine(<span class="number">1.234567890123456</span>);</span><br><span class="line">System.Console.WriteLine(<span class="number">1.012345678901234</span>);</span><br></pre></td></tr></table></figure><blockquote><p>输出结果</p></blockquote><pre><code>1.234567890123461.01234567890123</code></pre><p>受限于 double 类型的精度，超过精度的遵循==四舍五入==原则截取。</p><blockquote><p>要显示具有完整精度的数字，必须将字面值显示生命为 decimal 类型，知识通过追加一个M（或者m）后缀来实现的。</p><p>下面代码指定一个 decimal 字面值</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.Console.WriteLine(<span class="number">1.234567890123456</span>M);</span><br><span class="line">System.Console.WriteLine(<span class="number">1.012345678901234</span>m);</span><br></pre></td></tr></table></figure><blockquote><p>输出结果</p></blockquote><pre><code>1.2345678901234561.012345678901234</code></pre><h2 id="初学者主题-十六进制表示法-Hexadecimal-Notation"><a href="#初学者主题-十六进制表示法-Hexadecimal-Notation" class="headerlink" title="初学者主题:十六进制表示法 Hexadecimal Notation"></a>初学者主题:十六进制表示法 Hexadecimal Notation</h2><p>C#允许指定十六进制值，需要附加 0x 或者 0X 前缀（效果一样），如下示例：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用16进制字面量显示数值10</span></span><br><span class="line">System.Console.WriteLine(<span class="number">0x000A</span>);</span><br><span class="line">System.Console.WriteLine(<span class="number">0x000a</span>);</span><br><span class="line">System.Console.WriteLine(<span class="number">0X000A</span>);</span><br><span class="line">System.Console.WriteLine(<span class="number">0X000a</span>);</span><br></pre></td></tr></table></figure><blockquote><p>输出结果</p></blockquote><pre><code>10101010</code></pre><p>注意，代码输出结果是10，而不是0x000A 或者 0x000a 。</p><h2 id="高级主题-将数格式化成十六进制"><a href="#高级主题-将数格式化成十六进制" class="headerlink" title="高级主题:将数格式化成十六进制"></a>高级主题:将数格式化成十六进制</h2><p>要以十六进制形式格式化输出一个数值，必须使用==x==或者==X==数值格式说明符。==大小写==决定了十六进制字母的大小写，数值字面量可采用十进制或者十六进制形式，结果一样。如下示例：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//显示数值 "0xA" 或者 “0xa”</span></span><br><span class="line"><span class="comment">//字面量为十进制数值，格式化为十六进制，大写</span></span><br><span class="line">System.Console.WriteLine(<span class="string">"0x&#123;0:X&#125;"</span>, <span class="number">10</span>);</span><br><span class="line"><span class="comment">//字面量为十进制数值，格式化为十六进制，小写</span></span><br><span class="line">System.Console.WriteLine(<span class="string">"0x&#123;0:x&#125;"</span>, <span class="number">10</span>);</span><br><span class="line"><span class="comment">//字面量为十六进制大写数值，格式化为十六进制，小写</span></span><br><span class="line">System.Console.WriteLine(<span class="string">"0x&#123;0:x&#125;"</span>, <span class="number">0X000A</span>);</span><br><span class="line"><span class="comment">//字面量为十六进制小写数值，格式化为十六进制，大写</span></span><br><span class="line">System.Console.WriteLine(<span class="string">"0x&#123;0:X&#125;"</span>, <span class="number">0X000a</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> <span class="keyword">value</span>;</span><br><span class="line"><span class="keyword">value</span> = <span class="number">0X000a</span>;</span><br><span class="line">System.Console.WriteLine(<span class="keyword">value</span>.ToString(<span class="string">"X"</span>));</span><br><span class="line">System.Console.WriteLine(<span class="string">"0x&#123;0&#125;"</span>, <span class="keyword">value</span>.ToString(<span class="string">"X"</span>));</span><br></pre></td></tr></table></figure><blockquote><p>输出结果</p></blockquote><pre><code>0xA0xa0xa0xAA0xA</code></pre><h2 id="高级主题-round-trip-（往返过程）格式化"><a href="#高级主题-round-trip-（往返过程）格式化" class="headerlink" title="高级主题:round-trip （往返过程）格式化"></a>高级主题:round-trip （往返过程）格式化</h2><p>在格式化字符串时，使用round-trip格式说明符(R 或者 r)，用于确保转换为字符串的数值将再次分析为相同的数值。只有 Single、 Double 和 BigInteger 类型支持此格式。</p><blockquote><p>例如，string.Format(“{0}”,0.1234567890123125) 结果是 0.123456789012313</p><p>而， string.Format(“{0:R}”,0.1234567890123125) 结果是 0.1234567890123125 。</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">double</span> number = <span class="number">0.1234567890123125</span>;</span><br><span class="line">        <span class="keyword">double</span> result;</span><br><span class="line">        <span class="keyword">string</span> text;</span><br><span class="line"></span><br><span class="line">        text = <span class="keyword">string</span>.Format(<span class="string">"&#123;0&#125;"</span>,number);</span><br><span class="line">        <span class="comment">//double.Parase 将数字的字符串表示形式转换为它的等效双精度浮点数。</span></span><br><span class="line">        result = <span class="keyword">double</span>.Parse(text);</span><br><span class="line"></span><br><span class="line">        System.Console.WriteLine(number);</span><br><span class="line">        System.Console.WriteLine(<span class="string">"text = &#123;0&#125;"</span> , text);</span><br><span class="line">        System.Console.WriteLine(result);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//double.ToSring() 将此实例的数值转换为其等效的字符串表示形式。</span></span><br><span class="line">        System.Console.WriteLine(number.ToString());</span><br><span class="line">        System.Console.WriteLine(<span class="string">"&#123;0&#125;: text = number"</span>, text == number.ToString());</span><br><span class="line"></span><br><span class="line">        System.Console.WriteLine(<span class="string">"&#123;0&#125;: result = number"</span>, result != number);</span><br><span class="line"></span><br><span class="line">        text = <span class="keyword">string</span>.Format(<span class="string">"&#123;0:R&#125;"</span>,number);</span><br><span class="line">        System.Console.WriteLine(<span class="string">"text = &#123;0&#125;"</span> , text);</span><br><span class="line">        result = <span class="keyword">double</span>.Parse(text);</span><br><span class="line">        System.Console.WriteLine(<span class="string">"&#123;0&#125;: result = number"</span>, result == number);</span><br><span class="line"></span><br><span class="line">        System.Console.ReadKey();        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>输出结果</p></blockquote><pre><code>0.123456789012313text = 0.1234567890123130.1234567890123130.123456789012313True: text = numberTrue: result = numbertext = 0.1234567890123125True: result = number</code></pre><h2 id="标准数字格式字符串-Numeric-Format-Strings"><a href="#标准数字格式字符串-Numeric-Format-Strings" class="headerlink" title="标准数字格式字符串(Numeric Format Strings)"></a>标准数字格式字符串(Numeric Format Strings)</h2><blockquote><p>标准数字格式字符串用于格式化通用数值类型。 标准数字格式字符串采用 Axx 的形式，其中：</p><ul><li>A 是称为格式说明符的单个字母字符。任何包含一个以上字母字符（包括空白）的数字格式字符串都被解释为自定义数字格式字符串。</li><li>xx 是称为精度说明符的可选整数。 精度说明符的范围从 0 到 99，并且影响结果中的位数。请注意，精度说明符控制数字的字符串表示形式中的数字个数。 它不舍入该数字。若要执行舍入运算，请使用 Math.Ceiling、 Math.Floor 或 Math.Round 方法。</li><li>当精度说明符控制结果字符串中的小数位数时，结果字符串反映远离零的一侧舍入的数字（即，使用 MidpointRounding.AwayFromZero）。</li><li>所有数字类型的 ToString 方法的某些重载支持标准数字格式字符串。 例如，可将数字格式字符串提供给 ToString(String) 类型的 ToString(String, IFormatProvider) 方法和 Int32 方法。 .NET Framework 复合格式化功能也支持标准数字格式字符串，该功能由 Write 和 WriteLine 类的某些 Console 和 StreamWriter 方法、 String.Format 方法以及 StringBuilder.AppendFormat 方法使用。复合格式功能允许你将多个数据项的字符串表示形式包含在单个字符串中，以指定字段宽度，并在字段中对齐数字。</li></ul><p>下表描述标准的数字格式说明符并显示由每个格式说明符产生的示例输出。</p></blockquote><table><thead><tr><th>格式说明符</th><th>名称</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td>“C”或“c”</td><td>货币</td><td>结果：货币值。<br>受以下类型支持：所有数值类型。<br>精度说明符：小数位数。<br>默认值精度说明符：<br>由 NumberFormatInfo.CurrencyDecimalDigits 定义。<br>更多信息： 货币（“C”）格式说明符。</td><td>123.456 (“C”, en-US) -&gt; $123.46 <br> 123.456 (“C”, fr-FR) -&gt; 123,46 € <br>123.456 (“C”, ja-JP) -&gt; ¥123 <br> -123.456 (“C3”, en-US) -&gt; ($123.456)<br>-123.456 (“C3”, fr-FR) -&gt; -123,456 €<br>-123.456 (“C3”, ja-JP) -&gt; -¥123.456</td></tr><tr><td>“D”或“d”</td><td>Decimal</td><td>结果：整型数字，负号可选。<br>受以下类型支持：==仅整型==。<br>精度说明符：最小位数。<br>默认值精度说明符：所需的最小位数。<br>更多信息： 十进制（“D”）格式说明符。</td><td>1234 (“D”) -&gt; 1234 <br> -1234 (“D6”) -&gt; -001234</td></tr><tr><td>“E”或“e”</td><td>指数<br>(科学型)</td><td>结果：指数记数法。<br>受以下类型支持：所有数值类型。<br>精度说明符：小数位数。<br>默认值精度说明符：6。<br>更多信息： 指数（“E”）格式说明符。</td><td>1052.0329112756 (“E”, en-US) -&gt; 1.052033E+003<br>1052.0329112756 (“e”, fr-FR) -&gt; 1,052033e+003<br>-1052.0329112756 (“e2”, en-US) -&gt; -1.05e+003<br>-1052.0329112756 (“E2”, fr_FR) -&gt; -1,05E+003</td></tr><tr><td>“F”或“f”</td><td>定点</td><td>结果：整数和小数，负号可选。<br>受以下类型支持：所有数值类型。<br>精度说明符：小数位数。<br>默认值精度说明符：<br>由 NumberFormatInfo.NumberDecimalDigits 定义。<br>更多信息： 定点（“F”）格式说明符。</td><td>1234.567 (“F”, en-US) -&gt; 1234.57<br>1234.567 (“F”, de-DE) -&gt; 1234,57<br>1234 (“F1”, en-US) -&gt; 1234.0<br>1234 (“F1”, de-DE) -&gt; 1234,0<br>-1234.56 (“F4”, en-US) -&gt; -1234.5600<br>-1234.56 (“F4”, de-DE) -&gt; -1234,5600</td></tr><tr><td>“G”或“g”</td><td>常规</td><td>结果：最紧凑的定点表示法或科学记数法。<br>受以下类型支持：所有数值类型。<br>精度说明符：有效位数。<br>默认值精度说明符：取决于数值类型。<br>更多信息：常规（“G”）格式说明符。</td><td>-123.456 (“G”, en-US) -&gt; -123.456<br>-123.456 (“G”, sv-SE) -&gt; -123,456<br>123.4546 (“G4”, en-US) -&gt; 123.5<br>123.4546 (“G4”, sv-SE) -&gt; 123,5<br>-1.234567890e-25 (“G”, en-US) -&gt; -1.23456789E-25<br>-1.234567890e-25 (“G”, sv-SE) -&gt; -1,23456789E-25</td></tr><tr><td>“N”或“n”</td><td>数字</td><td>结果：整数和小数、组分隔符和小数分隔符，负号可选。<br>受以下类型支持：所有数值类型。<br>精度说明符：所需的小数位数。<br>默认值精度说明符：<br>由 NumberFormatInfo.NumberDecimalDigits 定义。<br>更多信息： 数字（“N”）格式说明符。</td><td>1234.567 (“N”, en-US) -&gt; 1,234.57<br>1234.567 (“N”, ru-RU) -&gt; 1 234,57<br>1234 (“N1”, en-US) -&gt; 1,234.0<br>1234 (“N1”, ru-RU) -&gt; 1 234,0<br>-1234.56 (“N3”, en-US) -&gt; -1,234.560<br>-1234.56 (“N3”, ru-RU) -&gt; -1 234,560</td></tr><tr><td>“P”或“p”</td><td>百分比</td><td>结果：乘以 100 并显示百分比符号的数字。<br>受以下类型支持：所有数值类型。<br> 精度说明符：所需的小数位数。<br>默认值精度说明符：<br>由 NumberFormatInfo.PercentDecimalDigits 定义。<br>更多信息： 百分比（“P”）格式说明符。</td><td>1 (“P”, en-US) -&gt; 100.00 %<br>1 (“P”, fr-FR) -&gt; 100,00 %<br>-0.39678 (“P1”, en-US) -&gt; -39.7 %<br>-0.39678 (“P1”, fr-FR) -&gt; -39,7 %</td></tr><tr><td>“R”或“r”</td><td>往返过程</td><td>结果：可以往返至相同数字的字符串。<br>受以下类型支持： Single、 Double 和 BigInteger。<br>精度说明符：忽略。<br>更多信息： 往返过程（“R”）格式说明符。</td><td>123456789.12345678 (“R”) -&gt; 123456789.12345678<br>-1234567890.12345678 (“R”) -&gt; -1234567890.1234567</td></tr><tr><td>“X”或“x”</td><td>十六进制</td><td>结果：十六进制字符串。<br>受以下类型支持：仅整型。<br>精度说明符：结果字符串中的位数。<br>更多信息： 十六进制（“X”）格式说明符。</td><td>255 (“X”) -&gt; FF<br>-1 (“x”) -&gt; ff<br>255 (“x4”) -&gt; 00ff<br>-1 (“X4”) -&gt; 00FF</td></tr><tr><td>任何<br>其他单个字符</td><td>未知说明符</td><td>结果：在运行时引发 FormatException。</td></tr></tbody></table><h2 id="自定义数字格式字符串"><a href="#自定义数字格式字符串" class="headerlink" title="自定义数字格式字符串"></a>自定义数字格式字符串</h2><blockquote><p>你可以创建自定义数字格式字符串，这种字符串由一个或多个自定义数字说明符组成，用于定义设置数值数据格式的方式。 自定义数字格式字符串是任何不属于 ==标准数字格式字符串== 的格式字符串。</p><p>所有数字类型的 <strong>ToString</strong> 方法的某些重载支持自定义数字格式字符串。 例如，可将数字格式字符串提供给 Int32 类型的 ToString(String) 方法和 ToString(String, IFormatProvider) 方法。 .NET Framework 复合格式化功能也支持自定义数字格式字符串，该功能由 Console 和 StreamWriter 类的某些 <strong>Write</strong> 和 <strong>WriteLine</strong> 方法、 String.Format 方法以及 StringBuilder.AppendFormat 方法所使用。</p><p>下表描述自定义数字格式说明符并显示由每个格式说明符产生的示例输出。</p></blockquote><table><thead><tr><th>格式说明符</th><th>名称</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td>“0”</td><td>零占位符</td><td>用对应的数字（如果存在）替换零；否则，将在结果字符串中显示零。</td><td>1234.5678 (“00000”) -&gt;01235<br>0.45678 (“0.00”, en-US) -&gt; 0.46<br>0.45678 (“0.00”, fr-FR) -&gt; 0,46</td></tr><tr><td>“#”</td><td>数字占位符</td><td>用对应的数字（如果存在）替换“#”符号；<br>否则，不会在结果字符串中显示任何数字。</td><td>1234.5678 (“#####”) -&gt; 1235<br>0.45678 (“#.##”, en-US) -&gt; .46<br>0.45678 (“#.##”, fr-FR) -&gt; ,46</td></tr><tr><td>“.”</td><td>小数点</td><td>确定小数点分隔符在结果字符串中的位置。</td><td>0.45678 (“0.00”, en-US) -&gt; 0.46<br>0.45678 (“0.00”, fr-FR) -&gt; 0,46</td></tr><tr><td>“,”</td><td>组分隔符和数字比例换算</td><td>用作组分隔符和数字比例换算说明符。<br>作为组分隔符时，它在各个组之间插入本地化的组分隔符字符。<br>作为数字比例换算说明符，对于每个指定的逗号，它将数字除以1000。</td><td>组分隔符说明符：<br>2147483647 (“##,#”, en-US) -&gt; 2,147,483,647<br>2147483647 (“##,#”, es-ES) -&gt; 2.147.483.647<br>比例换算说明符：<br>2147483647 (“#,#,,”, en-US) -&gt; 2,147<br>2147483647 (“#,#,,”, es-ES) -&gt; 2.147</td></tr><tr><td>“%”</td><td>百分比占位符</td><td>将数字乘以 100，并在结果字符串中插入本地化的百分比符号。</td><td>0.3697 (“%#0.00”, en-US) -&gt; %36.97<br>0.3697 (“%#0.00”, el-GR) -&gt; %36,97<br>0.3697 (“##.0 %”, en-US) -&gt; 37.0 %<br>0.3697 (“##.0 %”, el-GR) -&gt; 37,0 %</td></tr><tr><td>“‰”</td><td>千分比占位符</td><td>将数字乘以 1000，并在结果字符串中插入本地化的千分比符号。</td><td>0.03697 (“#0.00‰”, en-US) -&gt; 36.97‰<br>0.03697 (“#0.00‰”, ru-RU) -&gt; 36,97‰</td></tr><tr><td>“E0”<br>“E+0”<br>“E-0”<br>“e0”<br>“e+0”<br>“e-0”</td><td>指数表示法</td><td>如果后跟至少一个0（零），则使用指数表示法设置结果格式。<br>“E”或“e”指示指数符号在结果字符串中是大写还是小写。<br>跟在“E”或“e”字符后面的零的数目确定指数中的最小位数。 <br>加号 (+)指示符号字符总是置于指数前面。<br>减号(-)指示符号字符仅置于负指数前面。</td><td>987654 (“#0.0e0”) -&gt; 98.8e4<br>1503.92311 (“0.0##e+00”) -&gt; 1.504e+03<br>1.8901385E-16 (“0.0e+00”) -&gt; 1.9e-16</td></tr><tr><td>\</td><td>转义符</td><td>使下一个字符被解释为文本而不是自定义格式说明符。</td><td>987654 (“###00#“) -&gt; #987654#</td></tr><tr><td>‘string’<br>“string”</td><td>文本字符串分隔符</td><td>指示应复制到未更改的结果字符串的封闭字符。</td><td>68 (“# ‘ degrees’”) -&gt; 68 degrees<br>68 (“# ‘ degrees’”) -&gt; 68 degrees</td></tr><tr><td>;</td><td>部分分隔符</td><td>通过分隔格式字符串定义正数、负数和零各部分。</td><td>12.345 (“#0.0#;(#0.0#);-\0-“) -&gt; 12.35<br>0 (“#0.0#;(#0.0#);-\0-“) -&gt; -0-<br>-12.345 (“#0.0#;(#0.0#);-\0-“) -&gt; (12.35)<br>12.345 (“#0.0#;(#0.0#)”) -&gt; 12.35<br>0 (“#0.0#;(#0.0#)”) -&gt; 0.0<br>-12.345 (“#0.0#;(#0.0#)”) -&gt; (12.35)</td></tr><tr><td>其他</td><td>所有其他字符</td><td>字符将复制到未更改的结果字符串。</td><td>68 (“# °”) -&gt; 68 °</td></tr></tbody></table><h2 id="标准数字格式化字符串-简单例子"><a href="#标准数字格式化字符串-简单例子" class="headerlink" title="标准数字格式化字符串 简单例子"></a>标准数字格式化字符串 简单例子</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Globalization;</span><br><span class="line"><span class="keyword">using</span> System.Threading;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">NumericFormats</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// Display string representations of numbers for en-us culture</span></span><br><span class="line">        CultureInfo ci = <span class="keyword">new</span> CultureInfo (<span class="string">"en-us"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Output floating point values</span></span><br><span class="line">        <span class="keyword">double</span> floating = <span class="number">10761.937554</span>;</span><br><span class="line">        Console.WriteLine (<span class="string">"原始数字：10761.937554"</span>);</span><br><span class="line">        Console.WriteLine (<span class="string">"C: &#123;0&#125;"</span>,</span><br><span class="line">            floating.ToString (<span class="string">"C"</span>, ci)); <span class="comment">// Displays "C: $10,761.94"</span></span><br><span class="line">        Console.WriteLine (<span class="string">"E: &#123;0&#125;"</span>,</span><br><span class="line">            floating.ToString (<span class="string">"E03"</span>, ci)); <span class="comment">// Displays "E: 1.076E+004"</span></span><br><span class="line">        Console.WriteLine (<span class="string">"F: &#123;0&#125;"</span>,</span><br><span class="line">            floating.ToString (<span class="string">"F04"</span>, ci)); <span class="comment">// Displays "F: 10761.9376"         </span></span><br><span class="line">        Console.WriteLine (<span class="string">"G: &#123;0&#125;"</span>,</span><br><span class="line">            floating.ToString (<span class="string">"G"</span>, ci)); <span class="comment">// Displays "G: 10761.937554"</span></span><br><span class="line">        Console.WriteLine (<span class="string">"N: &#123;0&#125;"</span>,</span><br><span class="line">            floating.ToString (<span class="string">"N03"</span>, ci)); <span class="comment">// Displays "N: 10,761.938"</span></span><br><span class="line">        Console.WriteLine (<span class="string">"P: &#123;0&#125;"</span>,</span><br><span class="line">            (floating / <span class="number">10000</span>).ToString (<span class="string">"P02"</span>, ci)); <span class="comment">// Displays "P: 107.62 %"</span></span><br><span class="line">        Console.WriteLine (<span class="string">"R: &#123;0&#125;"</span>,</span><br><span class="line">            floating.ToString (<span class="string">"R"</span>, ci)); <span class="comment">// Displays "R: 10761.937554"            </span></span><br><span class="line">        Console.WriteLine ();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Output integral values</span></span><br><span class="line">        <span class="keyword">int</span> integral = <span class="number">8395</span>;</span><br><span class="line">        Console.WriteLine (<span class="string">"原始数字：8395"</span>);</span><br><span class="line">        Console.WriteLine (<span class="string">"C: &#123;0&#125;"</span>,</span><br><span class="line">            integral.ToString (<span class="string">"C"</span>, ci)); <span class="comment">// Displays "C: $8,395.00"</span></span><br><span class="line">        Console.WriteLine (<span class="string">"D: &#123;0&#125;"</span>,</span><br><span class="line">            integral.ToString (<span class="string">"D6"</span>, ci)); <span class="comment">// Displays "D: 008395" </span></span><br><span class="line">        Console.WriteLine (<span class="string">"E: &#123;0&#125;"</span>,</span><br><span class="line">            integral.ToString (<span class="string">"E03"</span>, ci)); <span class="comment">// Displays "E: 8.395E+003"</span></span><br><span class="line">        Console.WriteLine (<span class="string">"F: &#123;0&#125;"</span>,</span><br><span class="line">            integral.ToString (<span class="string">"F01"</span>, ci)); <span class="comment">// Displays "F: 8395.0"    </span></span><br><span class="line">        Console.WriteLine (<span class="string">"G: &#123;0&#125;"</span>,</span><br><span class="line">            integral.ToString (<span class="string">"G"</span>, ci)); <span class="comment">// Displays "G: 8395"</span></span><br><span class="line">        Console.WriteLine (<span class="string">"N: &#123;0&#125;"</span>,</span><br><span class="line">            integral.ToString (<span class="string">"N01"</span>, ci)); <span class="comment">// Displays "N: 8,395.0"</span></span><br><span class="line">        Console.WriteLine (<span class="string">"P: &#123;0&#125;"</span>,</span><br><span class="line">            (integral / <span class="number">10000.0</span>).ToString (<span class="string">"P02"</span>, ci)); <span class="comment">// Displays "P: 83.95 %"</span></span><br><span class="line">        Console.WriteLine (<span class="string">"X: 0x&#123;0&#125;"</span>,</span><br><span class="line">            integral.ToString (<span class="string">"X"</span>, ci)); <span class="comment">// Displays "X: 0x20CB"</span></span><br><span class="line">        Console.WriteLine ();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>输出结果</p></blockquote><pre><code>原始数字：10761.937554C: $10,761.94E: 1.076E+004F: 10761.9376G: 10761.937554N: 10,761.938P: 107.62%R: 10761.937554原始数字：8395C: $8,395.00D: 008395E: 8.395E+003F: 8395.0G: 8395N: 8,395.0P: 83.95%X: 0x20CB</code></pre><h2 id="标准数字格式化字符串-详细例子"><a href="#标准数字格式化字符串-详细例子" class="headerlink" title="标准数字格式化字符串 详细例子"></a>标准数字格式化字符串 详细例子</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Globalization;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">hello</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> dValue = <span class="number">12345.6789</span>;</span><br><span class="line">        <span class="keyword">int</span> iValue = <span class="number">12345</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//几种格式转换输出方式</span></span><br><span class="line">        System.Console.WriteLine (dValue); <span class="comment">//原值输出输出  12345.6789</span></span><br><span class="line">        System.Console.WriteLine (<span class="string">"&#123;0&#125;"</span>, dValue);</span><br><span class="line">        System.Console.WriteLine (<span class="keyword">string</span>.Format (<span class="string">"&#123;0&#125;"</span>, dValue));</span><br><span class="line">        System.Console.WriteLine (dValue.ToString ());</span><br><span class="line"></span><br><span class="line">        System.Console.WriteLine (<span class="string">"以下几种方法在数据有效范围内效果相同："</span>);</span><br><span class="line">        System.Console.WriteLine (<span class="string">"WriteLine (dValue);"</span>);</span><br><span class="line">        System.Console.WriteLine (<span class="string">"WriteLine (\"&#123;0&#125;\", dValue);"</span>);</span><br><span class="line">        System.Console.WriteLine (<span class="string">"WriteLine (string.Format (\"&#123;0&#125;\", dValue));"</span>);</span><br><span class="line">        System.Console.WriteLine (<span class="string">"WriteLine (dValue.ToString ());"</span>);</span><br><span class="line">        System.Console.WriteLine (<span class="string">"======================================"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//■■ 货币 "C" 格式说明符 ■■//</span></span><br><span class="line">        Console.WriteLine (<span class="string">"&#123;0:c&#125;"</span>, dValue); <span class="comment">//货币格式  默认两位小数  输出 ￥12,345.68</span></span><br><span class="line">        Console.WriteLine (<span class="string">"&#123;0:c2&#125;"</span>, dValue); <span class="comment">//货币格式 输出 指定两位小数  ￥12,345.68</span></span><br><span class="line">        Console.WriteLine (dValue.ToString (<span class="string">"C"</span>)); <span class="comment">//货币格式  输出  ￥12,345.68KT</span></span><br><span class="line">        Console.WriteLine (dValue.ToString (<span class="string">"C2"</span>)); <span class="comment">//货币格式  输出  ￥12,345.68</span></span><br><span class="line">        Console.WriteLine (dValue.ToString (<span class="string">"C3"</span>)); <span class="comment">//货币格式  指定三位小数  输出  ￥12,345.679</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//货币格式 当前国家 默认位小数 输出 ￥12,345.68</span></span><br><span class="line">        <span class="comment">//System.Globalization. CultureInfo.CurrentCulture</span></span><br><span class="line">        Console.WriteLine (dValue.ToString (<span class="string">"C"</span>, CultureInfo.CurrentCulture));</span><br><span class="line">        <span class="comment">//货币格式 当前国家 指定两位小数 输出 ￥12,345.68</span></span><br><span class="line">        Console.WriteLine (dValue.ToString (<span class="string">"C2"</span>, CultureInfo.CurrentCulture));</span><br><span class="line">        <span class="comment">//货币格式 中国货币 指定三位小数 输出 ￥12,345.679</span></span><br><span class="line">        Console.WriteLine (dValue.ToString (<span class="string">"C3"</span>,</span><br><span class="line">            CultureInfo.CreateSpecificCulture (<span class="string">"zh-CN"</span>)));</span><br><span class="line">        <span class="comment">//货币格式 丹麦货币 指定三位小数 输出 12.345,679 kr.</span></span><br><span class="line">        Console.WriteLine (dValue.ToString (<span class="string">"C3"</span>,</span><br><span class="line">            CultureInfo.CreateSpecificCulture (<span class="string">"da-DK"</span>)));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//■■ 十进制 "D" 格式例子 ■■//</span></span><br><span class="line">        Console.WriteLine (iValue.ToString (<span class="string">"D"</span>)); <span class="comment">//输出 12345</span></span><br><span class="line">        Console.WriteLine (iValue.ToString (<span class="string">"D8"</span>)); <span class="comment">//输出 00012345</span></span><br><span class="line">        iValue = <span class="number">-12345</span>;</span><br><span class="line">        Console.WriteLine (iValue.ToString (<span class="string">"D"</span>)); <span class="comment">//输出 -12345</span></span><br><span class="line">        Console.WriteLine (iValue.ToString (<span class="string">"D8"</span>)); <span class="comment">//输出 -00012345</span></span><br><span class="line">        <span class="comment">//错误示例 “D”只接受整型 其他编译不通过</span></span><br><span class="line">        <span class="comment">//Console.WriteLine(dValue.ToString("D8"));</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//■■ 指数 "E" 格式说明符 ■■//</span></span><br><span class="line">        Console.WriteLine (dValue.ToString (<span class="string">"E"</span>)); <span class="comment">//输出 1.234568E+004</span></span><br><span class="line">        Console.WriteLine (dValue.ToString (<span class="string">"E10"</span>)); <span class="comment">//输出 1.2345678900E+004</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//■■ 定点 “F” 格式说明符 ■■//</span></span><br><span class="line">        iValue = <span class="number">12345</span>;</span><br><span class="line">        Console.WriteLine (iValue.ToString (<span class="string">"F"</span>)); <span class="comment">//输出 12345.00</span></span><br><span class="line"></span><br><span class="line">        iValue = <span class="number">-12345</span>;</span><br><span class="line">        Console.WriteLine (iValue.ToString (<span class="string">"F3"</span>)); <span class="comment">//输出 12345.000</span></span><br><span class="line"></span><br><span class="line">        dValue = <span class="number">12345.6789</span>;</span><br><span class="line">        Console.WriteLine (dValue.ToString (<span class="string">"F"</span>)); <span class="comment">//输出 12345.68</span></span><br><span class="line">        Console.WriteLine (dValue.ToString (<span class="string">"F0"</span>)); <span class="comment">//输出 12345</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//■■ 常规 “G” 格式说明符 ■■//</span></span><br><span class="line">        dValue = <span class="number">12345.6789</span>;</span><br><span class="line">        Console.WriteLine (dValue.ToString (<span class="string">"G"</span>)); <span class="comment">// Displays  12345.6789</span></span><br><span class="line">        Console.WriteLine (dValue.ToString (<span class="string">"G"</span>,</span><br><span class="line">            CultureInfo.CreateSpecificCulture (<span class="string">"fr-FR"</span>))); <span class="comment">// Displays 12345,6789</span></span><br><span class="line"></span><br><span class="line">        Console.WriteLine (dValue.ToString (<span class="string">"G7"</span>)); <span class="comment">// Displays 12345.68</span></span><br><span class="line"></span><br><span class="line">        dValue = <span class="number">.0000023</span>;</span><br><span class="line">        Console.WriteLine (dValue.ToString (<span class="string">"G"</span>)); <span class="comment">// Displays 2.3E-06  </span></span><br><span class="line">        Console.WriteLine (dValue.ToString (<span class="string">"G"</span>,</span><br><span class="line">            CultureInfo.CreateSpecificCulture (<span class="string">"fr-FR"</span>))); <span class="comment">// Displays 2,3E-06</span></span><br><span class="line"></span><br><span class="line">        dValue = <span class="number">.0023</span>;</span><br><span class="line">        Console.WriteLine (dValue.ToString (<span class="string">"G"</span>)); <span class="comment">// Displays 0.0023</span></span><br><span class="line"></span><br><span class="line">        dValue = <span class="number">1234</span>;</span><br><span class="line">        Console.WriteLine (dValue.ToString (<span class="string">"G2"</span>)); <span class="comment">// Displays 1.2E+03</span></span><br><span class="line"></span><br><span class="line">        dValue = Math.PI;</span><br><span class="line">        Console.WriteLine (dValue.ToString (<span class="string">"G5"</span>)); <span class="comment">// Displays 3.1416</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//■■ 数字 “N” 格式说明符 ■■//</span></span><br><span class="line">        dValue = <span class="number">-12345.6789</span>;</span><br><span class="line">        Console.WriteLine (dValue.ToString (<span class="string">"G"</span>)); <span class="comment">// Displays  12345.6789N</span></span><br><span class="line"></span><br><span class="line">        Console.WriteLine (dValue.ToString (<span class="string">"N1"</span>,</span><br><span class="line">            CultureInfo.CreateSpecificCulture (<span class="string">"sv-SE"</span>))); <span class="comment">// Displays -12 445,7</span></span><br><span class="line"></span><br><span class="line">        iValue = <span class="number">123456789</span>;</span><br><span class="line">        Console.WriteLine (iValue.ToString (<span class="string">"N1"</span>,</span><br><span class="line">            CultureInfo.InvariantCulture)); <span class="comment">// Displays 123,456,789.0</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//■■ 数字 “N” 格式说明符 ■■//</span></span><br><span class="line">        dValue = <span class="number">-.2468013</span>;</span><br><span class="line">        Console.WriteLine (dValue.ToString (<span class="string">"P"</span>)); <span class="comment">// Displays -24.68 %</span></span><br><span class="line"></span><br><span class="line">        Console.WriteLine (dValue.ToString (<span class="string">"P1"</span>,</span><br><span class="line">            CultureInfo.CreateSpecificCulture (<span class="string">"sv-SE"</span>))); <span class="comment">// Displays  -24,68%  </span></span><br><span class="line"></span><br><span class="line">        Console.WriteLine (dValue.ToString (<span class="string">"P1"</span>,</span><br><span class="line">            CultureInfo.InvariantCulture)); <span class="comment">// Displays -24.7 %</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//■■ 数字 “R” 格式说明符 ■■//</span></span><br><span class="line">        dValue = Math.PI;</span><br><span class="line">        Console.WriteLine (dValue.ToString (<span class="string">"r"</span>)); <span class="comment">// Displays 3.1415926535897931</span></span><br><span class="line">        Console.WriteLine (dValue.ToString (<span class="string">"r"</span>,</span><br><span class="line">            CultureInfo.CreateSpecificCulture (<span class="string">"fr-FR"</span>))); <span class="comment">// Displays 3,1415926535897931</span></span><br><span class="line">        dValue = <span class="number">1.623e-21</span>;</span><br><span class="line">        Console.WriteLine (dValue.ToString (<span class="string">"r"</span>)); <span class="comment">// Displays 1.623E-21</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//■■ 十六进制 “X” 格式说明符 ■■//</span></span><br><span class="line">        iValue = <span class="number">0x2045e</span>;</span><br><span class="line">        Console.WriteLine (iValue.ToString (<span class="string">"x"</span>)); <span class="comment">// Displays 2045e</span></span><br><span class="line">        Console.WriteLine (iValue.ToString (<span class="string">"X"</span>)); <span class="comment">// Displays 2045E</span></span><br><span class="line">        Console.WriteLine (iValue.ToString (<span class="string">"X8"</span>)); <span class="comment">// Displays 0002045E</span></span><br><span class="line"></span><br><span class="line">        iValue = <span class="number">123456789</span>;</span><br><span class="line">        Console.WriteLine (iValue.ToString (<span class="string">"X"</span>)); <span class="comment">// Displays 75BCD15</span></span><br><span class="line">        Console.WriteLine (iValue.ToString (<span class="string">"X2"</span>)); <span class="comment">// Displays 75BCD15</span></span><br><span class="line"></span><br><span class="line">        Console.ReadKey ();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自定义数字格式化字符串例子"><a href="#自定义数字格式化字符串例子" class="headerlink" title="自定义数字格式化字符串例子"></a>自定义数字格式化字符串例子</h2><blockquote><p>下面的示例演示两个自定义数字格式字符串。 在这两个示例中，数字占位符 (#) 显示数值数据，且所有其他字符被复制到结果字符串。</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Globalization;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Example</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> number1 = <span class="number">1234567890</span>;</span><br><span class="line">        <span class="keyword">string</span> value1 = number1.ToString (<span class="string">"(###) ###-####"</span>);</span><br><span class="line">        Console.WriteLine (value1);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> number2 = <span class="number">42</span>;</span><br><span class="line">        <span class="keyword">string</span> value2 = number2.ToString (<span class="string">"My Number = #"</span>);</span><br><span class="line">        Console.WriteLine (value2);</span><br><span class="line">        <span class="comment">// The example displays the following output:</span></span><br><span class="line">        <span class="comment">//       (123) 456-7890</span></span><br><span class="line">        <span class="comment">//       My Number = 42</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="更多基本类型"><a href="#更多基本类型" class="headerlink" title="更多基本类型"></a>更多基本类型</h1><h2 id="char-（字符）类型"><a href="#char-（字符）类型" class="headerlink" title="char （字符）类型"></a>char （字符）类型</h2><blockquote><p><code>char</code> 关键字用于声明 <code>System.Char</code> 结构的实例，.NET Framework 使用该结构来表示 Unicode 字符。 <code>Char</code> 对象的值为 16 位的==数字（序号）值==（见Microsoft Docs C# 参考 <a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/char" target="_blank" rel="noopener">char</a>）。</p><ul><li>Unicode 字符用于表示世界各地大多数的书面语言。</li></ul></blockquote><table><thead><tr><th>类型</th><th>范围</th><th>大小</th><th>.NET Framwork</th></tr></thead><tbody><tr><td>char</td><td>U+0000 到 U+FFFF</td><td>Unicode 16 位字符</td><td>System.char</td></tr></tbody></table><blockquote><ul><li>后面经常用到的 \uxxxx 转义序列，XXXX是代表某个Unicode字符的16进制编码值。通过System.Text.Encoding.UTF8.GetBytes(char[])和System.Text.UnicodeEncoding.GetBytes(String)这些方法得到的值是10进制的，需要（通过 ==标准数字格式字符串== 中的 ==X2== ）转换成16进制，就是相应的Unicode编码了。</li></ul><p>char 可以隐式转换为 ushort、 int、 uint、 long、 ulong、 float、 double 或 decimal。 但是，不存在从其他类型到 char 类型的隐式转换。</p><p>char 类型的常数可以写成==字符==（例如 ‘x’）、==十六进制换码序列==（例如 ‘\t’）或 ==Unicode== （例如 ‘\u02C0’）表示形式。 您也可以显式转换整数字符代码。 在下面的示例中，几个 char 变量使用同一字符 X 初始化：</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">class</span> <span class="title">charType</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">char</span>[] chars = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">7</span>];</span><br><span class="line"></span><br><span class="line">        chars[<span class="number">0</span>] = <span class="string">'X'</span>; <span class="comment">// Character literal</span></span><br><span class="line">        chars[<span class="number">1</span>] = <span class="string">'\x0058'</span>; <span class="comment">// Hexadecimal</span></span><br><span class="line">        chars[<span class="number">2</span>] = <span class="string">'\u0058'</span>; <span class="comment">// Unicode</span></span><br><span class="line">        chars[<span class="number">3</span>] = (<span class="keyword">char</span>)<span class="number">88</span>; <span class="comment">// Cast from integral type</span></span><br><span class="line">        chars[<span class="number">4</span>] = (<span class="keyword">char</span>)<span class="number">0x0058</span>; <span class="comment">//  转换自16进制整型</span></span><br><span class="line">        chars[<span class="number">5</span>] = <span class="string">'\x5927'</span>; <span class="comment">//汉字 大 的Unicode编码</span></span><br><span class="line">        chars[<span class="number">6</span>] = <span class="string">'大'</span>; <span class="comment">//汉字 大</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">char</span> c <span class="keyword">in</span> chars)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.Write(c + <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Console.WriteLine();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取汉字“大”的编码。保存为一个字节序列</span></span><br><span class="line">        <span class="keyword">byte</span>[] bytes = Encoding.Unicode.GetBytes(<span class="string">"大"</span>);</span><br><span class="line">        <span class="comment">//得到编码的10进制字节数据 [39][89]</span></span><br><span class="line">        Console.WriteLine(<span class="string">"[&#123;0&#125;][&#123;1&#125;]"</span>, bytes[<span class="number">0</span>], bytes[<span class="number">1</span>]);</span><br><span class="line">        <span class="comment">//得到编码的16进制字节数据 [27][59] ,显示是litte-Endian方式</span></span><br><span class="line">        Console.WriteLine(<span class="string">"[&#123;0:X2&#125;][&#123;1:X2&#125;]"</span>, bytes[<span class="number">0</span>], bytes[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断 大端 Big-Endian 小端 Little-Endian</span></span><br><span class="line">        <span class="keyword">if</span> (BitConverter.IsLittleEndian)</span><br><span class="line">            Array.Reverse(bytes); <span class="comment">// 转换为 大端模式 结果为 [59][27]</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//输出 [59][27]</span></span><br><span class="line">        Console.WriteLine(<span class="string">"[&#123;0:X2&#125;][&#123;1:X2&#125;]"</span>, bytes[<span class="number">0</span>], bytes[<span class="number">1</span>]);  </span><br><span class="line"></span><br><span class="line">        Console.ReadKey();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//得到字符串中个字符(char)的Unicode编码</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">string</span> <span class="title">GetUnicode</span>(<span class="params"><span class="keyword">string</span> text</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">string</span> result = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; text.Length; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> ((<span class="keyword">int</span>)text[i] &gt; <span class="number">32</span> &amp;&amp; (<span class="keyword">int</span>)text[i] &lt; <span class="number">127</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                result += text[i].ToString();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                result += <span class="keyword">string</span>.Format(<span class="string">"\\u&#123;0:x4&#125;"</span>, (<span class="keyword">int</span>)text[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>输出结果</p></blockquote><pre><code>X X X X X 大 大[39][89][27][59][59][27]</code></pre><h3 id="高级主题：解析字符串中字符的16进制编码（Unicode）"><a href="#高级主题：解析字符串中字符的16进制编码（Unicode）" class="headerlink" title="高级主题：解析字符串中字符的16进制编码（Unicode）"></a>高级主题：解析字符串中字符的16进制编码（Unicode）</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span> (<span class="params"><span class="keyword">string</span>[] args</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">string</span> input = <span class="string">"你好 大世界！Hello World!"</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; input.Length; i++) &#123;</span><br><span class="line">            <span class="comment">// 占位符 方式</span></span><br><span class="line">            Console.Write (<span class="string">"&#123;0&#125; &#123;1&#125; "</span>, input[i], ((<span class="keyword">int</span>) input[i]).ToString (<span class="string">"X"</span>));</span><br><span class="line">            <span class="comment">// 字符串内插 $ 方式</span></span><br><span class="line">            Console.Write (<span class="string">$"<span class="subst">&#123;input[i]&#125;</span> <span class="subst">&#123;((<span class="keyword">int</span>)input[i]).ToString(<span class="string">"X"</span>)&#125;</span> "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.Console.WriteLine ();</span><br><span class="line">        Console.ReadKey ();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>输出结果</p></blockquote><pre><code>你 4F60 好 597D   20 大 5927 世 4E16 界 754C ！ FF01 H 48 e 65 l 6C l 6C o 6F   20 W 57 o 6F r 72 l 6C d 64 ! 21</code></pre><h3 id="高级主题：大端-Big-Endian-小端-Little-Endian"><a href="#高级主题：大端-Big-Endian-小端-Little-Endian" class="headerlink" title="高级主题：大端 Big-Endian 小端 Little-Endian"></a>高级主题：大端 Big-Endian 小端 Little-Endian</h3><p>不同的计算机结构采用不同的字节顺序存储数据。” Big-endian”表示最大的有效字节位于单词的左端。” Little-endian”表示最大的有效字节位于单词的右端。</p><blockquote><p>另以一种解释</p><ul><li>Little-Endian 就是低位字节排放在内存的低地址端，高位字节排放在内存的高地址端。</li><li>Big-Endian 就是高位字节排放在内存的低地址端，低位字节排放在内存的高地址端。</li></ul><p>例子，比如数字0x12 34 56 78在内存中的表示形式为：</p><ul><li>大端模式：</li></ul></blockquote><pre><code>低地址 -----------------&gt; 高地址0x12  |  0x34  |  0x56  |  0x78</code></pre><blockquote><ul><li>小端模式：</li></ul></blockquote><pre><code>低地址 ------------------&gt; 高地址0x78  |  0x56  |  0x34  |  0x12</code></pre><blockquote><p>可见，大端模式和字符串的存储模式类似。</p><ul><li>具体例子：汉字“大”（\u5927）的Unicode编码在 Little-endian 模式（以及 Big-endian 模式）CPU内存中的存放方式（假设从地址0x4000开始存放）为：</li></ul></blockquote><table><thead><tr><th>内存地址</th><th>小端模式存放内容</th><th>大端模式存放内容</th></tr></thead><tbody><tr><td>0x4000</td><td>0x27</td><td>0x59</td></tr><tr><td>0x4001</td><td>0x59</td><td>0x27</td></tr></tbody></table><h3 id="转义序列-escape-sequence"><a href="#转义序列-escape-sequence" class="headerlink" title="转义序列 escape sequence"></a>转义序列 escape sequence</h3><blockquote><p>由反斜杠 ( \ ) 后接字母或数字组合构成的字符组合称为“转义序列”。要在字符常量中表示换行符，单引号或某些其他字符，你必须使用转义序列。 转义序列被视为单个字符，因此，它是有效的字符常量。</p><p>转义序列通常用于指定操作，例如终端和打印机上的回车和制表符移动。它们还用于提供非打印字符的文本表现形式和通常具有特殊意义的字符，例如双引号 ( “ )。 下表列出 ANSI 转义序列以及它们所表示的内容。</p><p>请注意，在字符序列将被错误解释为三元组的情况下，前接反斜杠的问号 ( \?) 指定文本问号。</p></blockquote><table><thead><tr><th>转义序列</th><th>含义（字符名称）</th><th>Unicode Encoding（Unicode 编码）</th></tr></thead><tbody><tr><td>\’</td><td>单引号</td><td>0x0027</td></tr><tr><td>\”</td><td>双引号</td><td>0x0022</td></tr><tr><td>\\</td><td>反斜杠</td><td>0x005C</td></tr><tr><td>\?</td><td>文本问号</td></tr><tr><td>\0</td><td>Null</td><td>0x0000</td></tr><tr><td>\a</td><td>Alert 或 Bell 铃声(提醒)</td><td>0x0007</td></tr><tr><td>\b</td><td>Backspace 退格</td><td>0x0008</td></tr><tr><td>\f</td><td>换页</td><td>0x000C</td></tr><tr><td>\n</td><td>换行</td><td>0x000A</td></tr><tr><td>\r</td><td>回车</td><td>0x000D</td></tr><tr><td>\t</td><td>水平制表符</td><td>0x0009</td></tr><tr><td>\v</td><td>垂直制表符</td><td>0x000B</td></tr><tr><td>\ ooo</td><td>在八进制表示法的 ASCII 字符</td></tr><tr><td>\uxxxx</td><td>16进制Unicode字符，Unicode 转义序列</td><td>\u0041 = “A”</td></tr><tr><td>\x [h][h][h]h</td><td>16进制Unicode字符，（前三个占位符可选），\uxxxx的长度可变版本。<br><br>除长度可变外，Unicode 转义序列与“\u”类似。</td><td>\u3A</td></tr><tr><td>\x hh</td><td>以十六进制表示法的 ASCII 字符</td></tr><tr><td>\x hhhh</td><td>十六进制表示法的 Unicode 字符<br><br>（如果此转义序列用于宽字符常量或 Unicode 字符串文本）。<br><br>以十六进制表示法，则此转义序列用于常量宽字符或 Unicode 字符串的 Unicode 字符。<br><br>例如，WCHAR f = L’\x4e00’ <br><br>或 WCHAR b[] = L”The Chinese character for one is \x4e00”。</td><td>\x0041 = “A”</td></tr><tr><td>\Unnnnnnnn</td><td>U代理项对的 Unicode 转义序列。</td><td>\Unnnnnnnn</td></tr></tbody></table><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><h3 id="常规-regular-和逐字-verbatim-字符串"><a href="#常规-regular-和逐字-verbatim-字符串" class="headerlink" title="常规 regular 和逐字 verbatim 字符串"></a>常规 regular 和逐字 verbatim 字符串</h3><blockquote><p>常规字符串</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">string</span> columns = <span class="string">"Column 1\tColumn 2\tColumn 3"</span>;</span><br><span class="line"><span class="comment">//Output: Column 1        Column 2        Column 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">string</span> rows = <span class="string">"Row 1\r\nRow 2\r\nRow 3"</span>;</span><br><span class="line"><span class="comment">/* Output:</span></span><br><span class="line"><span class="comment">  Row 1</span></span><br><span class="line"><span class="comment">  Row 2</span></span><br><span class="line"><span class="comment">  Row 3</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">string</span> title = <span class="string">"\"The \u00C6olean Harp\", by Samuel Taylor Coleridge"</span>;</span><br><span class="line"><span class="comment">//Output: "The Æolean Harp", by Samuel Taylor Coleridge</span></span><br></pre></td></tr></table></figure><blockquote><p>逐字字符串</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">string</span> filePath = <span class="string">@"C:\Users\scoleridge\Documents\"</span>;</span><br><span class="line"><span class="comment">//Output: C:\Users\scoleridge\Documents\</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">string</span> text = <span class="string">@"My pensive SARA ! thy soft cheek reclined</span></span><br><span class="line"><span class="string">    Thus on mine arm, most soothing sweet it is</span></span><br><span class="line"><span class="string">    To sit beside our Cot,..."</span>;</span><br><span class="line"><span class="comment">/* Output:</span></span><br><span class="line"><span class="comment">My pensive SARA ! thy soft cheek reclined</span></span><br><span class="line"><span class="comment">   Thus on mine arm, most soothing sweet it is</span></span><br><span class="line"><span class="comment">   To sit beside our Cot,... </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">System.Console.Write (<span class="string">@"begin</span></span><br><span class="line"><span class="string">             /\</span></span><br><span class="line"><span class="string">            /  \</span></span><br><span class="line"><span class="string">           /    \</span></span><br><span class="line"><span class="string">          /      \</span></span><br><span class="line"><span class="string">         /________\</span></span><br><span class="line"><span class="string">end"</span>);</span><br><span class="line"><span class="comment">/*输出</span></span><br><span class="line"><span class="comment">begin</span></span><br><span class="line"><span class="comment">             /\</span></span><br><span class="line"><span class="comment">            /  \</span></span><br><span class="line"><span class="comment">           /    \</span></span><br><span class="line"><span class="comment">          /      \</span></span><br><span class="line"><span class="comment">         /________\</span></span><br><span class="line"><span class="comment">end</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">string</span> quote = <span class="string">@"Her name was ""Sara."""</span>;</span><br><span class="line"><span class="comment">//Output: Her name was "Sara."</span></span><br></pre></td></tr></table></figure><h3 id="C-中的字符串内插（-）"><a href="#C-中的字符串内插（-）" class="headerlink" title="C# 中的字符串内插（$）"></a>C# 中的字符串内插（$）</h3><blockquote><p>借助==字符串内插==，可以将字符串中的占位符替换成字符串变量的值。 在 C# 6 中，我们最终实现了这种样式的字符串内插。 可以在字符串前面使用 $，以指明应使用变量/表达式替换相应的值。</p><ul><li>在低于 C# 6 的版本中，使用 System.String.Format 实现字符串内插。 虽然这样做是可行的，但由于要用到编号占位符，因此加大了读取难度且过程更为冗长。</li></ul></blockquote><h4 id="先决条件"><a href="#先决条件" class="headerlink" title="先决条件"></a>先决条件</h4><blockquote><p>使用==字符串内插==，必须将计算机设置为运行 ==.Net Core==。</p></blockquote><h4 id="字符串内插简介"><a href="#字符串内插简介" class="headerlink" title="字符串内插简介"></a>字符串内插简介</h4><blockquote><p>使用 System.String.Format在字符串中指定要被字符串后面的参数替换的“==占位符==”。 例如：</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> firstName = <span class="string">"Matt"</span>;</span><br><span class="line"><span class="keyword">var</span> lastName = <span class="string">"Groves"</span>;</span><br><span class="line"><span class="keyword">var</span> str = String.Format(<span class="string">"My name is &#123;0&#125; &#123;1&#125;"</span>, firstName, lastName);</span><br><span class="line">Console.WriteLine(str);</span><br></pre></td></tr></table></figure><blockquote><p>输出结果</p></blockquote><pre><code>“My name is Matt Groves”</code></pre><blockquote><p>在 C# 6 中，定义内插字符串的方式为，在内插字符串前面添加 ==$== 符号，然后直接在字符串中使用变量，而不使用 String.Format。 例如：</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> firstName = <span class="string">"Matt"</span>;</span><br><span class="line"><span class="keyword">var</span> lastName = <span class="string">"Groves"</span>;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">$"My name is <span class="subst">&#123;firstName&#125;</span> <span class="subst">&#123;lastName&#125;</span>"</span>;</span><br><span class="line">Console.WriteLine(str);</span><br></pre></td></tr></table></figure><blockquote><p>输出结果</p></blockquote><pre><code>“My name is Matt Groves”</code></pre><blockquote><p>不必局限于变量。 ==可以在括号内使用任意表达式==。 例如：</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">    Console.WriteLine(<span class="string">$"This is line number <span class="subst">&#123;i + <span class="number">1</span>&#125;</span>"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>输出结果</p></blockquote><pre><code>This is line number 1This is line number 2This is line number 3This is line number 4This is line number 5</code></pre><h4 id="字符串内插的工作方式"><a href="#字符串内插的工作方式" class="headerlink" title="字符串内插的工作方式"></a>字符串内插的工作方式</h4><blockquote><p>在后台，编译器将此类字符串内插语法转换成 String.Format。 因此，可以执行之前使用 String.Format 执行的相同操作。</p><p>例如，可以添加填充和数值格式：</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> rand = <span class="keyword">new</span> Random();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">998</span>; i &lt; <span class="number">1005</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> randomDecimal = rand.NextDouble() * <span class="number">10000</span>;</span><br><span class="line">    Console.WriteLine(<span class="string">$"<span class="subst">&#123;i, <span class="number">-10</span>&#125;</span> <span class="subst">&#123;randomDecimal, <span class="number">6</span>:N2&#125;</span>"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>输出结果</p></blockquote><pre><code>998        5,177.67999        6,719.301000       9,910.611001       529.341002       1,349.861003       2,660.821004       6,227.77</code></pre><h3 id="字符串转字符数组"><a href="#字符串转字符数组" class="headerlink" title="字符串转字符数组"></a>字符串转<code>字符</code>数组</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">class</span> <span class="title">TestRef</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">string</span> a = <span class="string">"Hello World! 你好 大世界"</span>;</span><br><span class="line">        <span class="keyword">char</span>[] b = a.ToCharArray ();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; b.Length; i++) &#123;</span><br><span class="line">            Console.Write (b[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 输出 Hello World! 你好 大世界</span></span><br><span class="line"></span><br><span class="line">        Console.WriteLine ();</span><br><span class="line"></span><br><span class="line">        Array.Reverse (b);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; b.Length; i++) &#123;</span><br><span class="line">            Console.Write (b[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 输出 界世大 好你 !dlroW olleH</span></span><br><span class="line"></span><br><span class="line">        System.Console.ReadKey ();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字符串数组"><a href="#字符串数组" class="headerlink" title="字符串数组"></a>字符串数组</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//只有在使用字符串数组初始化字符串时，才能使用 new 运算符串讲字符串对象</span></span><br><span class="line"><span class="keyword">string</span>[] xx = <span class="keyword">new</span> <span class="keyword">string</span>[<span class="number">8</span>];</span><br><span class="line">xx[<span class="number">0</span>] = <span class="string">"aaaa"</span>;</span><br><span class="line">xx[<span class="number">1</span>] = <span class="string">"bbbb"</span>;</span><br><span class="line">System.Console.WriteLine(xx[<span class="number">0</span>]); <span class="comment">//输出 aaaa</span></span><br><span class="line">System.Console.WriteLine(xx[<span class="number">1</span>]); <span class="comment">//输出 bbbb</span></span><br></pre></td></tr></table></figure><h3 id="字符串对象的不可变性"><a href="#字符串对象的不可变性" class="headerlink" title="字符串对象的不可变性"></a>字符串对象的不可变性</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">string</span> text;</span><br><span class="line"></span><br><span class="line">System.Console.Write (<span class="string">"Enter text: "</span>);</span><br><span class="line">text = System.Console.ReadLine ();</span><br><span class="line"></span><br><span class="line"><span class="comment">// UNEXPECTED:  Does not convert text to uppercase</span></span><br><span class="line">text.ToUpper ();</span><br><span class="line"></span><br><span class="line">System.Console.WriteLine (text);</span><br></pre></td></tr></table></figure><blockquote><p>输出结果</p></blockquote><pre><code>Enter text: This is a test of the emergency broadcast system.This is a test of the emergency broadcast system.</code></pre><blockquote><p>字符串对象是“==不可变的==”：它们在创建后无法更改。 看起来是在修改字符串的所有 String 方法和 C# 运算符实际上都是在新的字符串对象中返回结果。</p><p>因此，text.ToUpper()不会改变 text 的内容为大写，而是返回了一个新的字符串，它需要保存到变量中，或者直接传给System.Console.WriteLine()。下面代码是改进后的：</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">string</span> text, uppercase;</span><br><span class="line">System.Console.Write (<span class="string">"Enter text: "</span>);</span><br><span class="line">text = System.Console.ReadLine (); <span class="comment">// Return a new string in uppercase</span></span><br><span class="line">uppercase = text.ToUpper ();</span><br><span class="line">System.Console.WriteLine (uppercase);</span><br></pre></td></tr></table></figure><blockquote><p>输出结果</p></blockquote><pre><code>Enter text: This is a test of the emergency broadcast system.THIS IS A TEST OF THE EMERGENCY BROADCAST SYSTEM.</code></pre><h3 id="访问单个字符"><a href="#访问单个字符" class="headerlink" title="访问单个字符"></a>访问单个字符</h3><blockquote><p>可以使用包含索引值的数组表示法来获取对单个字符的只读访问权限，如下面的示例中所示：</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">string</span> s5 = <span class="string">"Printing backwards"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s5.Length; i++)</span><br><span class="line">&#123;</span><br><span class="line">    System.Console.Write(s5[s5.Length - i - <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Output: "sdrawkcab gnitnirP"</span></span><br></pre></td></tr></table></figure><blockquote><p>如果 String 方法不提供修改字符串中的各个字符所需的功能，可以使用 ==StringBuilder== 对象“就地”修改各个字符，再新建字符串来使用 StringBuilder 方法存储结果。 在下面的示例中，假定必须以特定方式修改原始字符串，然后存储结果以供未来使用：</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">string</span> question = <span class="string">"hOW DOES mICROSOFT wORD DEAL WITH THE cAPS lOCK KEY?"</span>;</span><br><span class="line">System.Text.StringBuilder sb = <span class="keyword">new</span> System.Text.StringBuilder(question);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; sb.Length; j++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (System.Char.IsLower(sb[j]) == <span class="literal">true</span>)</span><br><span class="line">        sb[j] = System.Char.ToUpper(sb[j]);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (System.Char.IsUpper(sb[j]) == <span class="literal">true</span>)</span><br><span class="line">        sb[j] = System.Char.ToLower(sb[j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Store the new string.</span></span><br><span class="line"><span class="keyword">string</span> corrected = sb.ToString();</span><br><span class="line">System.Console.WriteLine(corrected);</span><br><span class="line"><span class="comment">// Output: How does Microsoft Word deal with the Caps Lock key?</span></span><br></pre></td></tr></table></figure><h3 id="使用-StringBuilder-快速创建字符串"><a href="#使用-StringBuilder-快速创建字符串" class="headerlink" title="使用 StringBuilder 快速创建字符串"></a>使用 StringBuilder 快速创建字符串</h3><blockquote><p>.NET 中的字符串操作进行了高度的优化，在大多数情况下不会显著影响性能。 但是，在某些情况下（例如，执行数百次或数千次的紧密循环），字符串操作可能影响性能。 StringBuilder 类创建字符串缓冲区，用于在程序执行多个字符串操控时提升性能。 使用 StringBuilder 字符串，还可以重新分配各个字符，而内置字符串数据类型则不支持这样做。 例如，此代码更改字符串的内容，而无需创建新的字符串：</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">System.Text.StringBuilder sb = <span class="keyword">new</span> System.Text.StringBuilder(<span class="string">"Rat: the ideal pet"</span>);</span><br><span class="line">sb[<span class="number">0</span>] = <span class="string">'C'</span>;</span><br><span class="line">System.Console.WriteLine(sb.ToString());</span><br><span class="line">System.Console.ReadLine();</span><br><span class="line"></span><br><span class="line"><span class="comment">//Outputs Cat: the ideal pet</span></span><br></pre></td></tr></table></figure><blockquote><p>在以下示例中，StringBuilder 对象用于通过一组数字类型创建字符串：</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">TestStringBuilder</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.Text.StringBuilder sb = <span class="keyword">new</span> System.Text.StringBuilder();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Create a string composed of numbers 0 - 9</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            sb.Append(i.ToString());</span><br><span class="line">        &#125;</span><br><span class="line">        System.Console.WriteLine(sb);  <span class="comment">// displays 0123456789</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Copy one character of the string (not possible with a System.String)</span></span><br><span class="line">        sb[<span class="number">0</span>] = sb[<span class="number">9</span>];</span><br><span class="line"></span><br><span class="line">        System.Console.WriteLine(sb);  <span class="comment">// displays 9123456789</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Null-字符串和空字符串"><a href="#Null-字符串和空字符串" class="headerlink" title="Null 字符串和空字符串"></a>Null 字符串和空字符串</h3><blockquote><p>空字符串是包含零个字符的 System.String 对象实例。 空字符串常用在各种编程方案中，表示空文本字段。 可以对空字符串调用方法，因为它们是有效的 System.String 对象。 对空字符串进行了初始化，如下所示：</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">string</span> s = String.Empty;</span><br></pre></td></tr></table></figure><blockquote><p>相比较而言，null 字符串并不指 System.String 对象实例，只要尝试对 null 字符串调用方法，都会引发 NullReferenceException。 但是，可以在串联和与其他字符串的比较操作中使用 null 字符串。 以下示例说明了对 null 字符串的引用会引发和不会引发意外的某些情况：</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">string</span> str = <span class="string">"hello"</span>;</span><br><span class="line">    <span class="keyword">string</span> nullStr = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">string</span> emptyStr = String.Empty;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">string</span> tempStr = str + nullStr;</span><br><span class="line">    <span class="comment">// Output of the following line: hello</span></span><br><span class="line">    Console.WriteLine(tempStr);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> b = (emptyStr == nullStr);</span><br><span class="line">    <span class="comment">// Output of the following line: False</span></span><br><span class="line">    Console.WriteLine(b);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// The following line creates a new empty string.</span></span><br><span class="line">    <span class="keyword">string</span> newStr = emptyStr + nullStr;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Null strings and empty strings behave differently. The following</span></span><br><span class="line">    <span class="comment">// two lines display 0.</span></span><br><span class="line">    Console.WriteLine(emptyStr.Length);</span><br><span class="line">    Console.WriteLine(newStr.Length);</span><br><span class="line">    <span class="comment">// The following line raises a NullReferenceException.</span></span><br><span class="line">    <span class="comment">//Console.WriteLine(nullStr.Length);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// The null character can be displayed and counted, like other chars.</span></span><br><span class="line">    <span class="keyword">string</span> s1 = <span class="string">"\x0"</span> + <span class="string">"abc"</span>;</span><br><span class="line">    <span class="keyword">string</span> s2 = <span class="string">"abc"</span> + <span class="string">"\x0"</span>;</span><br><span class="line">    <span class="comment">// Output of the following line: * abc*</span></span><br><span class="line">    Console.WriteLine(<span class="string">"*"</span> + s1 + <span class="string">"*"</span>);</span><br><span class="line">    <span class="comment">// Output of the following line: *abc *</span></span><br><span class="line">    Console.WriteLine(<span class="string">"*"</span> + s2 + <span class="string">"*"</span>);</span><br><span class="line">    <span class="comment">// Output of the following line: 4</span></span><br><span class="line">    Console.WriteLine(s2.Length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="比较字符串"><a href="#比较字符串" class="headerlink" title="比较字符串"></a>比较字符串</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">string</span> sCompare = <span class="string">"h"</span>;</span><br><span class="line"><span class="keyword">int</span> result = <span class="keyword">string</span>.Compare (sCompare, <span class="string">"a"</span>);</span><br><span class="line">System.Console.WriteLine (result); <span class="comment">//输出  1   "h" &gt; "a" </span></span><br><span class="line">result = <span class="keyword">string</span>.Compare (sCompare, <span class="string">"h"</span>, <span class="literal">true</span>);</span><br><span class="line">System.Console.WriteLine (result); <span class="comment">//输出  0   "h" = "h" </span></span><br><span class="line">result = <span class="keyword">string</span>.Compare (sCompare, <span class="string">"x"</span>, <span class="literal">true</span>);</span><br><span class="line">System.Console.WriteLine (result); <span class="comment">//输出 -1   "h" &lt; "x"</span></span><br></pre></td></tr></table></figure><h3 id="子字符串"><a href="#子字符串" class="headerlink" title="子字符串"></a>子字符串</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">string</span> s3 = <span class="string">"Visual C# Express"</span>;</span><br><span class="line">System.Console.WriteLine (s3.Substring (<span class="number">7</span>, <span class="number">2</span>)); <span class="comment">// Output: "C#"</span></span><br><span class="line"></span><br><span class="line">System.Console.WriteLine (s3.Replace (<span class="string">"C#"</span>, <span class="string">"Basic"</span>)); </span><br><span class="line"><span class="comment">// Output: "Visual Basic Express"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Index values are zero-based</span></span><br><span class="line"><span class="keyword">int</span> index = s3.IndexOf (<span class="string">"C"</span>); <span class="comment">// index = 7</span></span><br></pre></td></tr></table></figure><h1 id="null-和-void、"><a href="#null-和-void、" class="headerlink" title="null 和 void、"></a>null 和 void、</h1><blockquote><p>null 值表明变量不引用任何有效的对象。void 表示没有类型、或者没有任何值。</p></blockquote><h2 id="null"><a href="#null" class="headerlink" title="null"></a>null</h2><blockquote><p>null 可以作为字符串类型的字面量。null 值只能赋给引用类型、指针类型和可空类型。变量设为null，会显式地设置引用，使它不指向任何位置。</p><p>null 不等于 “” 。”” 意味变量有一个叫做“空字符串”的值。null 以为这变量无任何值。</p></blockquote><h2 id="void"><a href="#void" class="headerlink" title="void"></a>void</h2><blockquote><p>指定为 void 类型就无需传递任何数据了。void 本质上并不是一个数据类型，知识用于指出没有数据类型这一事实。</p></blockquote><h3 id="高级主题：隐式类型的局部变量"><a href="#高级主题：隐式类型的局部变量" class="headerlink" title="高级主题：隐式类型的局部变量"></a>高级主题：隐式类型的局部变量</h3><blockquote><p>C# 3.0增加了上下文关键字 var 来声明隐式类型的局部变量。该变量在编译时仍然会接收一个类型，但该类型是由编译器提供的。</p><p>虽然允许使用 var 取代显示的数据类型，但是在数据类型已知的情况下，最好不要使用 var。</p><p>C# 3.0添加 var 的目的是支持匿名类型。匿名类型是在方法内部动态声明数据类型，而不是通过显式的类定义来生命的，如下例：</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SamplesString</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> patent1 =</span><br><span class="line">            <span class="keyword">new</span> &#123;</span><br><span class="line">                Title = <span class="string">"Bifocals"</span>,</span><br><span class="line">                YearOfPublication = <span class="string">"1784"</span></span><br><span class="line">            &#125;;</span><br><span class="line">        <span class="keyword">var</span> patent2 =</span><br><span class="line">            <span class="keyword">new</span> &#123;</span><br><span class="line">                Title = <span class="string">"Phonograph"</span>,</span><br><span class="line">                YearOfPublication = <span class="string">"1877"</span></span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">        System.Console.WriteLine (<span class="string">"&#123;0&#125; (&#123;1&#125;)"</span>,</span><br><span class="line">            patent1.Title, patent1.YearOfPublication);</span><br><span class="line"></span><br><span class="line">        System.Console.WriteLine (<span class="string">"&#123;0&#125; (&#123;1&#125;)"</span>,</span><br><span class="line">            patent2.Title, patent2.YearOfPublication);</span><br><span class="line"></span><br><span class="line">        Console.ReadKey ();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>输出结果</p></blockquote><pre><code>Bifocals (1784)Phonograph (1877)</code></pre><blockquote><p>var 声明局部变量的各种方式</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// i is compiled as an int</span></span><br><span class="line"><span class="keyword">var</span> i = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// s is compiled as a string</span></span><br><span class="line"><span class="keyword">var</span> s = <span class="string">"Hello"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// a is compiled as int[]</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span>[] &#123; <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// expr is compiled as IEnumerable&lt;Customer&gt;</span></span><br><span class="line"><span class="comment">// or perhaps IQueryable&lt;Customer&gt;</span></span><br><span class="line"><span class="keyword">var</span> expr =</span><br><span class="line">    <span class="keyword">from</span> c <span class="keyword">in</span> customers</span><br><span class="line">    <span class="keyword">where</span> c.City == <span class="string">"London"</span></span><br><span class="line">    <span class="keyword">select</span> c;</span><br><span class="line"></span><br><span class="line"><span class="comment">// anon is compiled as an anonymous type</span></span><br><span class="line"><span class="keyword">var</span> anon = <span class="keyword">new</span> &#123; Name = <span class="string">"Terry"</span>, Age = <span class="number">34</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// list is compiled as List&lt;int&gt;</span></span><br><span class="line"><span class="keyword">var</span> list = <span class="keyword">new</span> List&lt;<span class="keyword">int</span>&gt;();</span><br></pre></td></tr></table></figure><blockquote><p>在以下上下文中，使用 var 关键字</p><ul><li>在 for 初始化语句中。</li></ul></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> x = <span class="number">1</span>; x &lt; <span class="number">10</span>; x++)</span><br></pre></td></tr></table></figure><blockquote><ul><li>在 foreach 初始化语句中。</li></ul></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">foreach</span>(<span class="keyword">var</span> item <span class="keyword">in</span> list)&#123;...&#125;</span><br></pre></td></tr></table></figure><blockquote><ul><li>在 using 域间中。</li></ul></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> (<span class="keyword">var</span> file = <span class="keyword">new</span> StreamReader(<span class="string">"C:\\myfile.txt"</span>)) &#123;...&#125;</span><br></pre></td></tr></table></figure><h1 id="可空修饰符-可以为null的类型"><a href="#可空修饰符-可以为null的类型" class="headerlink" title="可空修饰符 可以为null的类型 ?"></a>可空修饰符 可以为null的类型 ?</h1><p>C# 2.0 开始引入的这个特性，没有值表示“未定义”的意思。</p><blockquote><p>可通过以下两种方式之一声明可为 null 的类型：</p></blockquote><pre><code>System.Nullable&lt;T&gt; variableT? variable</code></pre><blockquote><p>T 是可以为 null 的类型的基础类型。 T 可以是包括 struct 在内的任意值类型；它不能是引用类型。</p></blockquote><h2 id="可为-null-的类型示例-int"><a href="#可为-null-的类型示例-int" class="headerlink" title="可为 null 的类型示例 int?"></a>可为 null 的类型示例 int?</h2><blockquote><p>任何值类型都可用作 作为null的类型 的基础。例如：</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>? i = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">double</span>? d1 = <span class="number">3.14</span>;</span><br><span class="line"><span class="keyword">bool</span>? flag = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">char</span>? letter = <span class="string">'a'</span>;</span><br><span class="line"><span class="keyword">int</span>?[] arr = <span class="keyword">new</span> <span class="keyword">int</span>?[<span class="number">10</span>];</span><br></pre></td></tr></table></figure><h2 id="可为-null-的类型的成员"><a href="#可为-null-的类型的成员" class="headerlink" title="可为 null 的类型的成员"></a>可为 null 的类型的成员</h2><blockquote><p>可以为 null 的类型的每个实例都有两个公共只读属性：</p><ul><li>==HasValue== 类型为 bool。 如果该变量包含非 null 值，则将其设置为 true。</li><li>==Value== 与基础类型相同。 如果 HasValue 为 true，则 Value 包含有意义的值。 如果 HasValue 是 false，则访问 Value 将引发 InvalidOperationException。</li></ul><p>将 null 赋给值类型，在数据库编程中尤其有用。在数据表中，经常出现值类型的列允许为空的情况。除非允许包含 null 值，否则在C#代码中检索这些列并将他们的值赋给对应的字段会出现问题。可控修饰符妥善地解决了这个问题。</p></blockquote><h2 id="高级主题：null-合并运算符"><a href="#高级主题：null-合并运算符" class="headerlink" title="高级主题：null 合并运算符 ??"></a>高级主题：null 合并运算符 ??</h2><blockquote><p>?? 运算符定义一个默认值，若将一个可为 null 的类型赋给不可为 null 的类型，则会返回该值。</p><p>?? 运算符称作 null 合并运算符 (空接合操作符)。 如果此运算符的左操作数不为 null，则此运算符将返回左操作数；否则返回右操作数。</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>? x = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Set y to the value of x if x is NOT null; otherwise,</span></span><br><span class="line"><span class="comment">// if x == null, set y to -1.</span></span><br><span class="line"><span class="keyword">int</span> y = x ?? <span class="number">-1</span>;</span><br></pre></td></tr></table></figure><blockquote><p>空接合操作符可以“链接”。例如，对于表达式 <code>x ?? y ?? z</code> ,如果 x 不为 null 则返回 x ；否则，如果 y 不为 null 则返回 y；否则返回 z。</p></blockquote><h2 id="高级主题：NULL条件运算符"><a href="#高级主题：NULL条件运算符" class="headerlink" title="高级主题：NULL条件运算符 ?. ?["></a>高级主题：NULL条件运算符 ?. ?[</h2><p>用于在执行成员访问 ==(?.)== 或索引 ==(?[)== ==操作之前==，测试是否存在 NULL。 这些运算符可帮助编写更少的代码来处理 null 检查，尤其是对于下降到数据结构。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>? length = customers?.Length; <span class="comment">// null if customers is null   </span></span><br><span class="line">Customer first = customers?[<span class="number">0</span>];  <span class="comment">// null if customers is null </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// null if customers, the first customer, or Orders is null</span></span><br><span class="line"><span class="keyword">int</span>? count = customers?[<span class="number">0</span>]?.Orders?.Count();  </span><br><span class="line"></span><br><span class="line"><span class="comment">// ?. 结合 ??</span></span><br><span class="line"><span class="keyword">int</span>? len = customers?.Length ?? <span class="number">0</span>;</span><br></pre></td></tr></table></figure><h2 id="高级主题：条件运算符"><a href="#高级主题：条件运算符" class="headerlink" title="高级主题：条件运算符 ?:"></a>高级主题：条件运算符 <code>?:</code></h2><p>条件运算符 <code>?:</code> 根据 Boolean 表达式的值返回两个值之一。下面是条件运算符的语法。</p><pre><code>condition ? first_expression : second_expression;</code></pre><p><code>condition</code> 的计算结果必须为 <code>true</code> 或 <code>false</code>。 如果 <code>condition</code> 为 <code>true</code>，则将计算 <code>first_expression</code> 并使其成为结果。 如果 <code>condition</code> 为 <code>false</code>，则将计算 <code>second_expression</code> 并使其成为结果。 只计算两个表达式之一。<br><code>first_expression</code> 和 <code>second_expression</code> 的类型必须相同，或者必须存在从一种类型到另一种类型的隐式转换。</p><p>你可通过使用条件运算符表达可能更确切地要求 <code>if-else</code> 构造的计算。 例如，以下代码首先使用 <code>if</code> 语句，然后使用条件运算符将整数分类为正整数或负整数。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> input = Convert.ToInt32(Console.ReadLine());</span><br><span class="line"><span class="keyword">string</span> classify;</span><br><span class="line"></span><br><span class="line"><span class="comment">// if-else construction.</span></span><br><span class="line"><span class="keyword">if</span> (input &gt; <span class="number">0</span>)</span><br><span class="line">    classify = <span class="string">"positive"</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    classify = <span class="string">"negative"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ?: conditional operator.</span></span><br><span class="line">classify = (input &gt; <span class="number">0</span>) ? <span class="string">"positive"</span> : <span class="string">"negative"</span>;</span><br></pre></td></tr></table></figure><blockquote><p>条件运算符为右联运算符。 表达式 <code>a ? b : c ? d : e</code> 作为 <code>a ? b : (c ? d : e)</code> 而非 <code>(a ? b : c) ? d : e</code> 进行计算。</p><p>无法重载条件运算符。</p></blockquote><h1 id="类型的分类"><a href="#类型的分类" class="headerlink" title="类型的分类"></a>类型的分类</h1><h2 id="值类型"><a href="#值类型" class="headerlink" title="值类型"></a>值类型</h2><p>C# 中有两种类型：==引用类型==和==值类型==。 引用类型的变量存储对其数据（对象）的引用，而值类型的变量直接包含其数据。 对于引用类型，两种变量可引用同一对象；因此，对一个变量执行的操作会影响另一个变量所引用的对象。 对于值类型，每个变量都具有其自己的数据副本，对一个变量执行的操作不会影响另一个变量（ref 和 out 参数变量除外，请参阅 ref 和 out 参数修饰符）。</p><blockquote><p>值类型直接包含值，变量引用的位置就是值在内存中的实际存储位置。</p><ul><li>将一个变量的值赋给另一个变量会导致在新变量的位置创建原始变量值的一个内存副本。</li><li>类似的，将值类型的示例传给方法，如 Console.WriteLine(),也会产生一个内存副本。</li><li>由于值类型需要创建内存副本，因此定义时不要让它们占用太多内存（通常应该给小于16字节）。</li></ul></blockquote><h2 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h2><blockquote><p>引用类型的变量存储的时对数据存储位置的引用，而不是直接存储数据。</p></blockquote><h1 id="数据类型-转换"><a href="#数据类型-转换" class="headerlink" title="数据类型 转换"></a>数据类型 转换</h1><h2 id="显式转换（explicit-conversions-casts-强制转换）"><a href="#显式转换（explicit-conversions-casts-强制转换）" class="headerlink" title="显式转换（explicit conversions | casts | 强制转换）"></a>显式转换（explicit conversions | casts | 强制转换）</h2><blockquote><p>显式转换需要强制转换运算符。在==转换中可能丢失信息时或在出于其他原因转换可能不成功==时，必须进行强制转换。 典型的示例包括从数值到精度较低或范围较小的类型的转换和从基类实例到派生类的转换。</p><p>如果进行转换可能会导致信息丢失，则编译器会要求执行显式转换，显式转换也称为强制转换。 强制转换是显式告知编译器你打算进行转换且你知道可能会发生数据丢失的一种方式。 若要执行强制转换，请在要转换的值或变量前面的括号中指定要强制转换到的类型。下面的程序将 double 强制转换为 int。==如不强制转换则该程序不会进行编译==。</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Test</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> x = <span class="number">1234.7</span>;</span><br><span class="line">        <span class="keyword">int</span> a;</span><br><span class="line">        <span class="comment">// Cast double to int.</span></span><br><span class="line">        a = (<span class="keyword">int</span>)x;</span><br><span class="line">        System.Console.WriteLine(a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Output: 1234</span></span><br></pre></td></tr></table></figure><blockquote><p>有关支持的显式数值转换的列表，请参阅<a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/explicit-numeric-conversions-table" target="_blank" rel="noopener">显式数值转换表</a>。</p></blockquote><h3 id="高级主题：checked-和-unchecked-转换"><a href="#高级主题：checked-和-unchecked-转换" class="headerlink" title="高级主题：checked 和 unchecked 转换"></a>高级主题：checked 和 unchecked 转换</h3><blockquote><ul><li>在 cheecked 块内，如果在运行时发生一次溢出的赋值，就会引发异常。</li></ul></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">checked</span> &#123;</span><br><span class="line">            <span class="comment">// int.MaxValue equals 2147483647</span></span><br><span class="line">            <span class="keyword">int</span> n = <span class="keyword">int</span>.MaxValue;</span><br><span class="line">            n = n + <span class="number">1</span>;</span><br><span class="line">            System.Console.WriteLine (n);</span><br><span class="line">        &#125;</span><br><span class="line">        Console.ReadKey ();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>输出结果</p></blockquote><pre><code>未经处理的异常:  System.OverflowException: 算术运算导致溢出。在 Program.Main()</code></pre><blockquote><p>unchecked 块，强制不进行一处检查，不会为块中溢出的赋值引发异常。</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">unchecked</span> &#123;</span><br><span class="line">            <span class="comment">// int.MaxValue equals 2147483647</span></span><br><span class="line">            <span class="keyword">int</span> n = <span class="keyword">int</span>.MaxValue;</span><br><span class="line">            n = n + <span class="number">1</span>;</span><br><span class="line">            System.Console.WriteLine (n);</span><br><span class="line">        &#125;</span><br><span class="line">        Console.ReadKey ();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>输出结果</p></blockquote><pre><code>-2147483648</code></pre><h2 id="隐式转换（implicit-conversions）"><a href="#隐式转换（implicit-conversions）" class="headerlink" title="隐式转换（implicit conversions）"></a>隐式转换（implicit conversions）</h2><blockquote><p>由于该转换是一种类型==安全的转换，不会导致数据丢失==，因此不需要任何特殊的语法。 </p><p>对于内置数值类型，如果要存储的值==无需截断或四舍五入==即可适应变量，则可以进行隐式转换。 例如，long 类型的变量（8 字节整数）能够存储 int（在 32 位计算机上为 4 字节）可存储的任何值。</p><ul><li>隐式转换无需使用转换操作符</li></ul></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> intNumber = <span class="number">31416</span>;</span><br><span class="line"><span class="keyword">long</span> longNumber = intNumber;</span><br></pre></td></tr></table></figure><blockquote><ul><li>隐式转换 也可以强制添加转换操作符</li></ul></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> intNumber = <span class="number">31416</span>;</span><br><span class="line"><span class="keyword">long</span> longNumber = (<span class="keyword">long</span>) intNumber;</span><br></pre></td></tr></table></figure><h2 id="不使用转型操作符的类型转换"><a href="#不使用转型操作符的类型转换" class="headerlink" title="不使用转型操作符的类型转换"></a>不使用转型操作符的类型转换</h2><blockquote><p>==字符串到数值类型== 转换，需要使用 Parse()/TryParse() 这样的方法。每个数值类型都包含 Parse()/TryParse() 方法，它允许将字符串还换成对应的数值类型。</p><p>例子</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">string</span> text = <span class="string">"9.11E-31"</span>;</span><br><span class="line"><span class="keyword">float</span> kgElectronMass = <span class="keyword">float</span>.Parse(text);</span><br></pre></td></tr></table></figure><blockquote><p>还可以利用 ==特殊类型System.Convert== 将一种类型转换成另一种类型。不过，System.Convert只支持预定义类型，而且是不可扩展的。它允许从任何==基元(基本)类型==（bool, char, sbyte, short, int, long, ushort, uint, ulong, float, double, decimal, DateTime, and string）转换到任何其它基元(基本)类型。参考 MSDN <a href="https://msdn.microsoft.com/zh-cn/library/system.convert(v=vs.110" target="_blank" rel="noopener">Convert</a>.aspx) 类。</p><p>例子</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">string</span> middleCText = <span class="string">"261.626"</span>;</span><br><span class="line"><span class="keyword">double</span> middleC = System.Convert.ToDouble(middleCText);</span><br><span class="line"><span class="keyword">bool</span> boolean = System.Convert.ToBoolean(middleC);</span><br></pre></td></tr></table></figure><blockquote><p>除了以上方法，所有类型都支持==ToString()方法== 转换，可以用它得到一个类型的值的字符串表示。</p><p>例子</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bool</span> boolean = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">string</span> text = boolean.ToString();</span><br><span class="line">System.Console.WriteLine(text); <span class="comment">// Display "True"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> dVal = <span class="number">-1.123456</span>;</span><br><span class="line">text=dVal.ToString();</span><br><span class="line">System.Console.WriteLine(dVal);<span class="comment">// Display "-1.123456"</span></span><br></pre></td></tr></table></figure><h2 id="高级主题：TryParse"><a href="#高级主题：TryParse" class="headerlink" title="高级主题：TryParse()"></a>高级主题：TryParse()</h2><p>从 C# 2.0 开始，所有基元数据数据类型都包含静态 TryParse() 方法。该方法与 Parse() 非常相似，知识在缓缓失败的清康熙，它不引发异常，而是返回 false ，如下示例：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> number;</span><br><span class="line"><span class="keyword">string</span> input;</span><br><span class="line"></span><br><span class="line">System.Console.Write(<span class="string">"Enter a number: "</span>);</span><br><span class="line">input = System.Console.ReadLine();</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">double</span>.TryParse(input, <span class="keyword">out</span> number))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Converted correctly, now use number</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    System.Console.WriteLine(</span><br><span class="line">        <span class="string">"The text entered was not a valid number."</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="高级主题：字符串转换为数字"><a href="#高级主题：字符串转换为数字" class="headerlink" title="高级主题：字符串转换为数字"></a>高级主题：字符串转换为数字</h2><blockquote><p>字符串转数字的几种方法：</p><ul><li>Parse 转换对象必须是组成合适数值类型（int、long、ulong、float、decimal 等）的字符。(例如：Int32.Parse(“-15”))</li><li>TryParse 转换对象必须是组成合适数值类型（int、long、ulong、float、decimal 等）的字符。（例如：Int32.TryParse(“-15”, out j)）</li><li>Convert.ToInt32 针对各种数值类型(int、long、float等，例如：Convert.ToInt32(“-15”))</li></ul><p>如果你具有字符串，则调用 TryParse 方法（例如 int.TryParse(“11”)）会稍微更加高效且简单。 使用 Convert 方法对于实现 IConvertible 的常规对象更有用。</p><p>可以对预期字符串会包含的数值类型（如 ==System.Int32== 类型）使用 Parse 或 TryParse 方法。 <strong>Convert.ToUInt32</strong> 方法在内部使用 Parse。 如果字符串的格式无效，则 Parse 会引发异常，而 TryParse 会返回 false。</p></blockquote><h3 id="示例-Parse-和-TryParse-例：System-Int32-Parse"><a href="#示例-Parse-和-TryParse-例：System-Int32-Parse" class="headerlink" title="示例 Parse 和 TryParse 例：System.Int32.Parse"></a>示例 Parse 和 TryParse 例：System.Int32.Parse</h3><blockquote><p>==Parse 和 TryParse== 方法会忽略字符串开头和末尾的空格，但所有其他字符必须是组成合适数值类型（int、long、ulong、float、decimal 等）的字符。 组成数字的字符中的任何空格都会导致错误。 例如，可以使用 decimal.TryParse 分析“10”、“10.3”、“ 10 ”，但不能使用此方法分析从“10X”、“1 0”（注意空格）、“10 .3”（注意空格）、“10e1”（float.TryParse 在此处适用）等中分析出 10。</p><p>下面的示例演示了对 Parse 和 TryParse 的成功调用和不成功的调用。</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> numVal = Int32.Parse (<span class="string">"-105"</span>);</span><br><span class="line">        Console.WriteLine (numVal);</span><br><span class="line">        <span class="comment">// Output: -105</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">double</span> dVal = Double.Parse(<span class="string">"105.12345"</span>);</span><br><span class="line">        Console.WriteLine(dVal);</span><br><span class="line">        <span class="comment">// 输出 105.12345</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// TryParse returns true if the conversion succeeded</span></span><br><span class="line">        <span class="comment">// and stores the result in j.</span></span><br><span class="line">        <span class="keyword">int</span> j;</span><br><span class="line">        <span class="keyword">if</span> (Int32.TryParse (<span class="string">"-105"</span>, <span class="keyword">out</span> j))</span><br><span class="line">            Console.WriteLine (j);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            Console.WriteLine (<span class="string">"String could not be parsed."</span>);</span><br><span class="line">        <span class="comment">// Output: -105</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> m = Int32.Parse (<span class="string">"abc"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FormatException e) &#123;</span><br><span class="line">            Console.WriteLine (e.Message);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Output: Input string was not in a correct format.</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">string</span> inputString = <span class="string">"abc"</span>;</span><br><span class="line">        <span class="keyword">int</span> numValue;</span><br><span class="line">        <span class="keyword">bool</span> parsed = Int32.TryParse (inputString, <span class="keyword">out</span> numValue);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!parsed)</span><br><span class="line">            Console.WriteLine (<span class="string">"Int32.TryParse could not parse '&#123;0&#125;' to an int.\n"</span>, inputString);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Output: Int32.TryParse could not parse 'abc' to an int.</span></span><br><span class="line"></span><br><span class="line">        Console.ReadKey ();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="示例-Convert-例：System-Convert-ToInt32"><a href="#示例-Convert-例：System-Convert-ToInt32" class="headerlink" title="示例 Convert  例：System.Convert.ToInt32"></a>示例 Convert  例：System.Convert.ToInt32</h3><blockquote><p>下表列出了 Convert 类中可使用的一些方法。</p></blockquote><table><thead><tr><th>数值类型</th><th>方法</th></tr></thead><tbody><tr><td>decimal</td><td>ToDecimal(String)</td></tr><tr><td>float</td><td>ToSingle(String)</td></tr><tr><td>double</td><td>ToDouble(String)</td></tr><tr><td>short</td><td>ToInt16(String)</td></tr><tr><td>int</td><td>ToInt32(String)</td></tr><tr><td>long</td><td>ToInt64(String)</td></tr><tr><td>ushort</td><td>ToUInt16(String)</td></tr><tr><td>uint</td><td>ToUInt32(String)</td></tr><tr><td>ulong</td><td>ToUInt64(String)</td></tr></tbody></table><blockquote><p>此示例调用 Convert.ToInt32(String) 方法将输入的 string 转换为 int。 代码将捕获此方法可能引发的最常见的两个异常：FormatException 和 OverflowException。 如果该数字可以递增而不溢出整数存储位置，则程序使结果加上 1 并打印输出。</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span> (<span class="params"><span class="keyword">string</span>[] args</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> numVal = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">bool</span> repeat = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (repeat) &#123;</span><br><span class="line">            Console.WriteLine (<span class="string">"Enter a number between −2,147,483,648 and +2,147,483,647 (inclusive)."</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">string</span> input = Console.ReadLine ();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// ToInt32 can throw FormatException or OverflowException.</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                numVal = Convert.ToInt32 (input);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (FormatException e) &#123;</span><br><span class="line">                Console.WriteLine (<span class="string">"Input string is not a sequence of digits."</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (OverflowException e) &#123;</span><br><span class="line">                Console.WriteLine (<span class="string">"The number cannot fit in an Int32."</span>);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (numVal &lt; Int32.MaxValue) &#123;</span><br><span class="line">                    Console.WriteLine (<span class="string">"The new value is &#123;0&#125;"</span>, numVal + <span class="number">1</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    Console.WriteLine (<span class="string">"numVal cannot be incremented beyond its current value"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            Console.WriteLine (<span class="string">"Go again? Y/N"</span>);</span><br><span class="line">            <span class="keyword">string</span> go = Console.ReadLine ();</span><br><span class="line">            <span class="keyword">if</span> (go == <span class="string">"Y"</span> || go == <span class="string">"y"</span>) &#123;</span><br><span class="line">                repeat = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                repeat = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Keep the console open in debug mode.</span></span><br><span class="line">        Console.WriteLine (<span class="string">"Press any key to exit."</span>);</span><br><span class="line">        Console.ReadKey ();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Sample Output:</span></span><br><span class="line">    <span class="comment">// Enter a number between -2,147,483,648 and +2,147,483,647 (inclusive).</span></span><br><span class="line">    <span class="comment">// 473</span></span><br><span class="line">    <span class="comment">// The new value is 474</span></span><br><span class="line">    <span class="comment">// Go again? Y/N</span></span><br><span class="line">    <span class="comment">// y</span></span><br><span class="line">    <span class="comment">// Enter a number between -2,147,483,648 and +2,147,483,647 (inclusive).</span></span><br><span class="line">    <span class="comment">// 2147483647</span></span><br><span class="line">    <span class="comment">// numVal cannot be incremented beyond its current value</span></span><br><span class="line">    <span class="comment">// Go again? Y/N</span></span><br><span class="line">    <span class="comment">// Y</span></span><br><span class="line">    <span class="comment">// Enter a number between -2,147,483,648 and +2,147,483,647 (inclusive).</span></span><br><span class="line">    <span class="comment">// -1000</span></span><br><span class="line">    <span class="comment">// The new value is -999</span></span><br><span class="line">    <span class="comment">// Go again? Y/N</span></span><br><span class="line">    <span class="comment">// n</span></span><br><span class="line">    <span class="comment">// Press any key to exit.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="高级主题：字节数组转换为数字-BitConverter"><a href="#高级主题：字节数组转换为数字-BitConverter" class="headerlink" title="高级主题：字节数组转换为数字 BitConverter"></a>高级主题：字节数组转换为数字 BitConverter</h2><blockquote><p>此示例演示如何使用 BitConverter 类将字节数组转换为 int 然后又转换回字节数组。 例如，在从网络读取字节之后，可能需要将字节转换为内置数据类型。 除了示例中的 ToInt32(Byte[],Int32) 方法之外，下表还列出了 BitConverter 类中将字节（来自字节数组）转换为其他内置类型的方法。</p></blockquote><table><thead><tr><th>返回类型</th><th>方法</th></tr></thead><tbody><tr><td>bool</td><td>ToBoolean(Byte[],Int32)</td></tr><tr><td>char</td><td>ToChar(Byte[],Int32)</td></tr><tr><td>double</td><td>ToDouble(Byte[],Int32)</td></tr><tr><td>short</td><td>ToInt16(Byte[],Int32)</td></tr><tr><td>int</td><td>ToInt32(Byte[],Int32)</td></tr><tr><td>long</td><td>ToInt64(Byte[],Int32)</td></tr><tr><td>float</td><td>ToSingle(Byte[],Int32)</td></tr><tr><td>ushort</td><td>ToUInt16(Byte[],Int32)</td></tr><tr><td>uint</td><td>ToUInt32(Byte[],Int32)</td></tr><tr><td>ulong</td><td>ToUInt64(Byte[],Int32)</td></tr></tbody></table><blockquote><p>Returns a 32-bit signed integer converted from four bytes at a specified position in a byte array.</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">ToInt32</span> (<span class="params"><span class="keyword">byte</span>[] <span class="keyword">value</span>, <span class="keyword">int</span> startIndex</span>)</span>;</span><br></pre></td></tr></table></figure><h3 id="示例-BitConverter-ToInt32"><a href="#示例-BitConverter-ToInt32" class="headerlink" title="示例 BitConverter.ToInt32"></a>示例 BitConverter.ToInt32</h3><blockquote><p>此示例初始化字节数组，并在计算机体系结构为 ==little-endian==（即首先存储最低有效字节）的情况下==反转数组==，然后调用 ToInt32(Byte[],Int32) 方法以将数组中的四个字节转换为 int。 ToInt32(Byte[],Int32) 的第二个参数指定字节数组的起始索引。</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">byte</span>[] bytes = &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">25</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// If the system architecture is little-endian (that is, little end first),</span></span><br><span class="line"><span class="comment">// reverse the byte array.</span></span><br><span class="line"><span class="keyword">if</span> (BitConverter.IsLittleEndian)</span><br><span class="line">    Array.Reverse(bytes);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i = BitConverter.ToInt32(bytes, <span class="number">0</span>);</span><br><span class="line">Console.WriteLine(<span class="string">"int: &#123;0&#125;"</span>, i);</span><br><span class="line"><span class="comment">// Output: int: 25</span></span><br></pre></td></tr></table></figure><h3 id="示例-BitConverter-GetBytes"><a href="#示例-BitConverter-GetBytes" class="headerlink" title="示例 BitConverter.GetBytes"></a>示例 BitConverter.GetBytes</h3><blockquote><p>在本示例中，将调用 BitConverter 类的 GetBytes(Int32) 方法，将 int 转换为字节数组。</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">byte</span>[] bytes = BitConverter.GetBytes(<span class="number">201805978</span>);</span><br><span class="line">Console.WriteLine(<span class="string">"byte array: "</span> + BitConverter.ToString(bytes));</span><br><span class="line"><span class="comment">// Output: byte array: 9A-50-07-0C</span></span><br></pre></td></tr></table></figure><h2 id="高级主题：十六进制字符串与数值类型之间转换"><a href="#高级主题：十六进制字符串与数值类型之间转换" class="headerlink" title="高级主题：十六进制字符串与数值类型之间转换"></a>高级主题：十六进制字符串与数值类型之间转换</h2><blockquote><p>以下示例演示如何执行下列任务：</p><ul><li>获取字符串中每个字符的十六进制值。</li><li>获取与十六进制字符串中的每个值对应的 char。</li><li>将十六进制 string 转换为 int。</li><li>将十六进制 string 转换为 float。</li><li>将字节数组转换为十六进制 string。&gt; - </li></ul></blockquote><h3 id="示例-解析字符得到16进制值"><a href="#示例-解析字符得到16进制值" class="headerlink" title="示例 解析字符得到16进制值"></a>示例 解析字符得到16进制值</h3><p>此示例输出 string 中每个字符的十六进制值。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span> (<span class="params"><span class="keyword">string</span>[] args</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">string</span> input = <span class="string">"你好 大世界！Hello World!"</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; input.Length; i++) &#123;</span><br><span class="line">            <span class="comment">// 占位符 方式</span></span><br><span class="line">            <span class="comment">//Console.Write ("&#123;0&#125; &#123;1&#125; ", input[i], ((int) input[i]).ToString ("X"));</span></span><br><span class="line">            <span class="comment">// 字符串内插 $ 方式</span></span><br><span class="line">            Console.Write (<span class="string">$"<span class="subst">&#123;input[i]&#125;</span> <span class="subst">&#123;((<span class="keyword">int</span>)input[i]).ToString(<span class="string">"X"</span>)&#125;</span> "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.Console.WriteLine ();</span><br><span class="line">        Console.ReadKey ();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>你 4F60 好 597D   20 大 5927 世 4E16 界 754C ！ FF01 H 48 e 65 l 6C l 6C o 6F   20 W 57 o 6F r 72 l 6C d 64 ! 21</code></pre><h3 id="示例-从16进制值得到对应字符"><a href="#示例-从16进制值得到对应字符" class="headerlink" title="示例 从16进制值得到对应字符"></a>示例 从16进制值得到对应字符</h3><p>此示例分析十六进制值的 string 并输出对应于每个十六进制值的字符。 首先，调用 Split(Char[]) 方法以获取每个十六进制值作为数组中的单个 string。 然后，调用 ToInt32(String, Int32)将十六进制值转换为表示为 int 的十进制值。示例中演示了 2 种不同方法，用于获取对应于该字符代码的字符。 第 1 种方法是使用 ConvertFromUtf32(Int32)，它将对应于整型参数的字符作为 string 返回。 第 2 种方法是将 int 显式转换为 char。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span> (<span class="params"><span class="keyword">string</span>[] args</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将指定的 Unicode 码位转换为 UTF-16 编码字符串。</span></span><br><span class="line">        <span class="keyword">string</span> hexValues = <span class="string">"5927 20 48 65 6C 6C 6F 20 57 6F 72 6C 64 21"</span>; <span class="comment">// 大 Hello World！</span></span><br><span class="line">        <span class="keyword">string</span>[] hexValuesSplit = hexValues.Split(<span class="string">' '</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; hexValuesSplit.Length; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 将 16 进制数值 转换为 整型（10进制）</span></span><br><span class="line">            <span class="keyword">int</span> <span class="keyword">value</span> = Convert.ToInt32(hexValuesSplit[i], <span class="number">16</span>);</span><br><span class="line">            <span class="comment">// 得到 编码值对应的 字符 | 将指定的 Unicode 码位转换为 UTF-16 编码字符串。</span></span><br><span class="line">            <span class="keyword">string</span> stringValule = <span class="keyword">char</span>.ConvertFromUtf32(<span class="keyword">value</span>);</span><br><span class="line">            System.Console.Write(stringValule);</span><br><span class="line">            <span class="comment">//一句话表示，有点难于解读</span></span><br><span class="line">            <span class="comment">//System.Console.Write(char.ConvertFromUtf32(Convert.ToInt32(hexValuesSplit[i],16)));</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.Console.WriteLine ();</span><br><span class="line">        Console.ReadKey ();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果</p><pre><code>大 Hello World!</code></pre><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><p>可以将同一类型的多个变量存储在一个数组数据结构中。 通过指定数组的元素类型来声明数组。</p><pre><code>type[] arrayName;</code></pre><p>数组具有以下属性：</p><ul><li>数组可以是一维(==Single-Dimesional==)、多维(==Multidimesional==)或交错(==Jagged==)的。</li><li>创建数组实例时，将建立纬度数量和每个纬度的长度。这些值在实例的生存期内无法更改。</li><li>交错数组是数组的数组,因此其元素为引用类型且被初始化为<code>null</code>。</li><li>数组从零开始编制索引：包含 <code>n</code> 元素的数组从 <code>0</code> 索引到 <code>n-1</code>。</li><li>数组元素可以是任何类型，其中包括数组类型。</li></ul><h2 id="数组的维数"><a href="#数组的维数" class="headerlink" title="数组的维数"></a>数组的维数</h2><p>使用 <code>Rank</code> 属性显示数组的维数。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Declare and initialize an array:</span></span><br><span class="line"><span class="keyword">int</span>[,] theArray = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>, <span class="number">10</span>];</span><br><span class="line"><span class="comment">// 输出 这是一个 2 维数组。</span></span><br><span class="line">System.Console.WriteLine(<span class="string">"这是一个 &#123;0&#125; 维数组。"</span>, theArray.Rank);</span><br></pre></td></tr></table></figure><h2 id="一维数组"><a href="#一维数组" class="headerlink" title="一维数组"></a>一维数组</h2><h3 id="数组声明-一维"><a href="#数组声明-一维" class="headerlink" title="数组声明 一维"></a>数组声明 一维</h3><blockquote><p>声明五个整数的一维数组，如以下示例所示：</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] array = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>];</span><br></pre></td></tr></table></figure><blockquote><p>此数组包含从 <code>array[0]</code> 到 <code>array[4]</code> 的元素。 <code>new</code> 运算符用于创建数组并将数组元素初始化为其默认值。在此示例中，所有数组元素都将被==初始化为零==。</p><p>声明字符串数组</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">string</span>[] stringArray = <span class="keyword">new</span> <span class="keyword">string</span>[<span class="number">6</span>];</span><br></pre></td></tr></table></figure><h3 id="数组初始化-一维"><a href="#数组初始化-一维" class="headerlink" title="数组初始化 一维"></a>数组初始化 一维</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] array1 = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; <span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span> &#125;;</span><br><span class="line"><span class="keyword">string</span>[] weekDays = <span class="keyword">new</span> <span class="keyword">string</span>[] &#123; <span class="string">"Sun"</span>, <span class="string">"Mon"</span>, <span class="string">"Tue"</span>, <span class="string">"Wed"</span>, <span class="string">"Thu"</span>, <span class="string">"Fri"</span>, <span class="string">"Sat"</span> &#125;;</span><br></pre></td></tr></table></figure><blockquote><p>声明初始化的缩写(快捷)方式</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] array1 = &#123; <span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span> &#125;;</span><br><span class="line"><span class="keyword">string</span>[] weekDays = &#123; <span class="string">"Sun"</span>, <span class="string">"Mon"</span>, <span class="string">"Tue"</span>, <span class="string">"Wed"</span>, <span class="string">"Thu"</span>, <span class="string">"Fri"</span>, <span class="string">"Sat"</span> &#125;;</span><br></pre></td></tr></table></figure><blockquote><p>可以在不初始化的情况下声明数组变量，但必须使用 <code>new</code> 运算符向此变量分配数组。 例如:</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] array3;</span><br><span class="line">array3 = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; <span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span> &#125;;   <span class="comment">// OK</span></span><br><span class="line"><span class="comment">//array3 = &#123;1, 3, 5, 7, 9&#125;;   // Error</span></span><br></pre></td></tr></table></figure><h2 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h2><blockquote><p>多为数组的每一维的大小都必须一致。而 ==交错数组== （jagged array）则不需要。</p><p>得到多维数组中某一维的长度，不是使用Length属性，而是使用数组的GetLength()示例方法。</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bool</span>[,,] cells;</span><br><span class="line">cells = <span class="keyword">new</span> <span class="keyword">bool</span>[<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>];</span><br><span class="line">System.Console.WriteLine(cells.GetLength(<span class="number">0</span>));   <span class="comment">// Displays 2</span></span><br></pre></td></tr></table></figure><h3 id="数组声明-多维"><a href="#数组声明-多维" class="headerlink" title="数组声明 多维"></a>数组声明 多维</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明创建一个具有四行两列的二维数组。</span></span><br><span class="line"><span class="keyword">int</span>[,] array = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">4</span>, <span class="number">2</span>];</span><br><span class="line"><span class="comment">// 声明创建一个具有三个维度（4、2 和 3）的数组。</span></span><br><span class="line"><span class="keyword">int</span>[, ,] array1 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">4</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br></pre></td></tr></table></figure><h3 id="数组初始化-多维"><a href="#数组初始化-多维" class="headerlink" title="数组初始化 多维"></a>数组初始化 多维</h3><blockquote><p>声明后即可初始化数组，如以下示例所示。</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Two-dimensional array.</span></span><br><span class="line"><span class="keyword">int</span>[,] array2D = <span class="keyword">new</span> <span class="keyword">int</span>[,] &#123; &#123; <span class="number">1</span>, <span class="number">2</span> &#125;, &#123; <span class="number">3</span>, <span class="number">4</span> &#125;, &#123; <span class="number">5</span>, <span class="number">6</span> &#125;, &#123; <span class="number">7</span>, <span class="number">8</span> &#125; &#125;;</span><br><span class="line"><span class="comment">// The same array with dimensions specified.</span></span><br><span class="line"><span class="keyword">int</span>[,] array2Da = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">4</span>, <span class="number">2</span>] &#123; &#123; <span class="number">1</span>, <span class="number">2</span> &#125;, &#123; <span class="number">3</span>, <span class="number">4</span> &#125;, &#123; <span class="number">5</span>, <span class="number">6</span> &#125;, &#123; <span class="number">7</span>, <span class="number">8</span> &#125; &#125;;</span><br><span class="line"><span class="comment">// A similar array with string elements.</span></span><br><span class="line"><span class="keyword">string</span>[,] array2Db = <span class="keyword">new</span> <span class="keyword">string</span>[<span class="number">3</span>, <span class="number">2</span>] &#123; &#123; <span class="string">"one"</span>, <span class="string">"two"</span> &#125;, &#123; <span class="string">"three"</span>, <span class="string">"four"</span> &#125;,</span><br><span class="line">                                        &#123; <span class="string">"five"</span>, <span class="string">"six"</span> &#125; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Three-dimensional array.</span></span><br><span class="line"><span class="keyword">int</span>[, ,] array3D = <span class="keyword">new</span> <span class="keyword">int</span>[,,] &#123; &#123; &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> &#125;, &#123; <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span> &#125; &#125;, </span><br><span class="line">                                 &#123; &#123; <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span> &#125;, &#123; <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span> &#125; &#125; &#125;;</span><br><span class="line"><span class="comment">// The same array with dimensions specified.</span></span><br><span class="line"><span class="keyword">int</span>[, ,] array3Da = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>] &#123; &#123; &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> &#125;, &#123; <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span> &#125; &#125;, </span><br><span class="line">                                       &#123; &#123; <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span> &#125;, &#123; <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span> &#125; &#125; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Accessing array elements.</span></span><br><span class="line">System.Console.WriteLine(array2D[<span class="number">0</span>, <span class="number">0</span>]);</span><br><span class="line">System.Console.WriteLine(array2D[<span class="number">0</span>, <span class="number">1</span>]);</span><br><span class="line">System.Console.WriteLine(array2D[<span class="number">1</span>, <span class="number">0</span>]);</span><br><span class="line">System.Console.WriteLine(array2D[<span class="number">1</span>, <span class="number">1</span>]);</span><br><span class="line">System.Console.WriteLine(array2D[<span class="number">3</span>, <span class="number">0</span>]);</span><br><span class="line">System.Console.WriteLine(array2Db[<span class="number">1</span>, <span class="number">0</span>]);</span><br><span class="line">System.Console.WriteLine(array3Da[<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>]);</span><br><span class="line">System.Console.WriteLine(array3D[<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Getting the total count of elements or the length of a given dimension.</span></span><br><span class="line"><span class="keyword">var</span> allLength = array3D.Length;</span><br><span class="line"><span class="keyword">var</span> total = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array3D.Rank; i++) &#123;</span><br><span class="line">    total *= array3D.GetLength(i);</span><br><span class="line">&#125;</span><br><span class="line">System.Console.WriteLine(<span class="string">"&#123;0&#125; equals &#123;1&#125;"</span>, allLength, total);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Output:</span></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"><span class="comment">// 4</span></span><br><span class="line"><span class="comment">// 7</span></span><br><span class="line"><span class="comment">// three</span></span><br><span class="line"><span class="comment">// 8</span></span><br><span class="line"><span class="comment">// 12</span></span><br><span class="line"><span class="comment">// 12 equals 12</span></span><br></pre></td></tr></table></figure><h2 id="交错数组-jagged-array"><a href="#交错数组-jagged-array" class="headerlink" title="交错数组 jagged array"></a>交错数组 jagged array</h2><blockquote><p>交错数组是元素为数组的数组。 交错数组元素的维度和大小可以不同。 交错数组有时称为“数组的数组”。 </p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[][] cells = &#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>&#125;,</span><br><span class="line">    <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>&#125;,</span><br><span class="line">    <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>&#125;,</span><br><span class="line">    <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>声明一个具有三个元素的一维数组，其中每个元素都是一维整数数组：</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[][] jaggedArray = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>][];</span><br></pre></td></tr></table></figure><blockquote><p>必须初始化 <code>jaggedArray</code> 的元素后才可使用它。 可按下方操作初始化元素：</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">jaggedArray[<span class="number">0</span>] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>];</span><br><span class="line">jaggedArray[<span class="number">1</span>] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">4</span>];</span><br><span class="line">jaggedArray[<span class="number">2</span>] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br></pre></td></tr></table></figure><blockquote><p>每个元素都是一维整数数组。 第一个元素是由 5 个整数组成的数组，第二个是由 4 个整数组成的数组，而第三个是由 2 个整数组成的数组。</p><p>也可使用初始化表达式通过值来填充数组元素，这种情况下不需要数组大小。 例如:</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">jaggedArray[<span class="number">0</span>] = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; <span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span> &#125;;</span><br><span class="line">jaggedArray[<span class="number">1</span>] = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; <span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span> &#125;;</span><br><span class="line">jaggedArray[<span class="number">2</span>] = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; <span class="number">11</span>, <span class="number">22</span> &#125;;</span><br></pre></td></tr></table></figure><blockquote><p>还可在声明数组时将其初始化，如：</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[][] jaggedArray2 = <span class="keyword">new</span> <span class="keyword">int</span>[][] &#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; <span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span> &#125;,</span><br><span class="line">    <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; <span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span> &#125;,</span><br><span class="line">    <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; <span class="number">11</span>, <span class="number">22</span> &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>可以使用下面的缩写形式。 请注意：不能从元素初始化中省略 <code>new</code> 运算符，因为不存在元素的默认初始化：</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[][] jaggedArray3 = &#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; <span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span> &#125;,</span><br><span class="line">    <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; <span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span> &#125;,</span><br><span class="line">    <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; <span class="number">11</span>, <span class="number">22</span> &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>可以混合使用交错数组和多维数组。 下面声明和初始化一个包含大小不同的三个二维数组元素的一维交错数组。 </p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[][,] jaggedArray4 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>][,] </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="keyword">int</span>[,] &#123; &#123;<span class="number">1</span>,<span class="number">3</span>&#125;, &#123;<span class="number">5</span>,<span class="number">7</span>&#125; &#125;,</span><br><span class="line">    <span class="keyword">new</span> <span class="keyword">int</span>[,] &#123; &#123;<span class="number">0</span>,<span class="number">2</span>&#125;, &#123;<span class="number">4</span>,<span class="number">6</span>&#125;, &#123;<span class="number">8</span>,<span class="number">10</span>&#125; &#125;,</span><br><span class="line">    <span class="keyword">new</span> <span class="keyword">int</span>[,] &#123; &#123;<span class="number">11</span>,<span class="number">22</span>&#125;, &#123;<span class="number">99</span>,<span class="number">88</span>&#125;, &#123;<span class="number">0</span>,<span class="number">9</span>&#125; &#125; </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>可以如本例所示访问个别元素，示例显示第一个数组的元素 <code>[1,0]</code> 的值（值为 <code>5</code>）：</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.Console.Write(<span class="string">"&#123;0&#125;"</span>, jaggedArray4[<span class="number">0</span>][<span class="number">1</span>, <span class="number">0</span>]);</span><br></pre></td></tr></table></figure><blockquote><p>方法 Length 返回包含在交错数组中的数组的数目。例如，假定已声明了前一个数组，则下行返回值 <code>3</code>。</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.Console.WriteLine(jaggedArray4.Length);</span><br></pre></td></tr></table></figure><h2 id="隐式类型的数组"><a href="#隐式类型的数组" class="headerlink" title="隐式类型的数组"></a>隐式类型的数组</h2><blockquote><p>可以创建隐式类型化的数组，其中数组实例的类型通过数组初始值设定项中指定的元素来推断。 针对隐式类型化变量的任何规则也适用于隐式类型化数组。 </p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">ImplicitlyTypedArraySample</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> a = <span class="keyword">new</span>[] &#123; <span class="number">1</span>, <span class="number">10</span>, <span class="number">100</span>, <span class="number">1000</span> &#125;; <span class="comment">// int[]</span></span><br><span class="line">        <span class="keyword">var</span> b = <span class="keyword">new</span>[] &#123; <span class="string">"hello"</span>, <span class="literal">null</span>, <span class="string">"world"</span> &#125;; <span class="comment">// string[]</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// single-dimension jagged array</span></span><br><span class="line">        <span class="keyword">var</span> c = <span class="keyword">new</span>[]</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">new</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;,</span><br><span class="line">            <span class="keyword">new</span>[]&#123;<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// jagged array of strings</span></span><br><span class="line">        <span class="keyword">var</span> d = <span class="keyword">new</span>[]</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">new</span>[]&#123;<span class="string">"Luca"</span>, <span class="string">"Mads"</span>, <span class="string">"Luke"</span>, <span class="string">"Dinesh"</span>&#125;,</span><br><span class="line">            <span class="keyword">new</span>[]&#123;<span class="string">"Karen"</span>, <span class="string">"Suma"</span>, <span class="string">"Frances"</span>&#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在上个示例中，请注意对于隐式类型化数组，初始化语句的左侧没有使用方括号。 另请注意，和一维数组一样，通过使用 new [] 来初始化交错数组。</p></blockquote><h2 id="对数组使用循环-for-foreach"><a href="#对数组使用循环-for-foreach" class="headerlink" title="对数组使用循环 for foreach"></a>对数组使用循环 for foreach</h2><blockquote><p>一维数组</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] numbers = &#123; <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">-2</span>, <span class="number">-1</span>, <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">int</span> i <span class="keyword">in</span> numbers)</span><br><span class="line">&#123;</span><br><span class="line">    System.Console.Write(<span class="string">"&#123;0&#125; "</span>, i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Output: 4 5 6 1 2 3 -2 -1 0</span></span><br></pre></td></tr></table></figure><blockquote><p>多维数组</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[,] numbers2D = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>, <span class="number">2</span>] &#123; &#123; <span class="number">9</span>, <span class="number">99</span> &#125;, &#123; <span class="number">3</span>, <span class="number">33</span> &#125;, &#123; <span class="number">5</span>, <span class="number">55</span> &#125; &#125;;</span><br><span class="line"><span class="comment">// Or use the short form:</span></span><br><span class="line"><span class="comment">// int[,] numbers2D = &#123; &#123; 9, 99 &#125;, &#123; 3, 33 &#125;, &#123; 5, 55 &#125; &#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">int</span> i <span class="keyword">in</span> numbers2D)</span><br><span class="line">&#123;</span><br><span class="line">    System.Console.Write(<span class="string">"&#123;0&#125; "</span>, i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Output: 9 99 3 33 5 55</span></span><br></pre></td></tr></table></figure><blockquote><p>交错数组</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[][] jaggedArray3 = &#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; <span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span> &#125;,</span><br><span class="line">    <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; <span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span> &#125;,</span><br><span class="line">    <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; <span class="number">11</span>, <span class="number">22</span> &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> jaggedArray3) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; item.Length; i++) &#123;</span><br><span class="line">        System.Console.Write (<span class="string">"&#123;0&#125; "</span>, item[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出：1 3 5 7 9 0 2 4 6 11 22</span></span><br></pre></td></tr></table></figure><h2 id="常见数组编码错误"><a href="#常见数组编码错误" class="headerlink" title="常见数组编码错误"></a>常见数组编码错误</h2><p>代码中包含双重大括号，hexo无法编译，用转义的话Markdown文件不利阅读，所以采用图片替代。</p><p><img src="http://slowread.cn/images/material/array-normal-error.png" alt="image"></p><h1 id="枚举类型"><a href="#枚举类型" class="headerlink" title="枚举类型"></a>枚举类型</h1><h2 id="声明定义"><a href="#声明定义" class="headerlink" title="声明定义"></a>声明定义</h2><p><code>enum</code> 关键字用于声明枚举，一种包含一组被称为枚举数列表的已命名常数的不同类型。<br>通常最好是直接在命名空间内定义枚举，以便命名空间中的所有类都可以同样方便地访问它。 但是，也可能会在类或结构中嵌套枚举。<br>默认情况下，枚举中每个元素的==基础类型都为 int==。默认情况下，==第一个枚举数具有值 0==，并且每个连续枚举数的值将增加 1。 例如，在以下枚举中， Sat 的值为 0， Sun 的值为 1， Mon 的值为 2，依次类推。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> Days &#123;Sat, Sun, Mon, Tue, Wed, Thu, Fri&#125;;</span><br></pre></td></tr></table></figure><p>枚举数可以使用初始值设定项来替代默认值，如下面的示例中所示。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> Days &#123;Sat=<span class="number">1</span>, Sun, Mon, Tue, Wed, Thu, Fri&#125;;</span><br></pre></td></tr></table></figure><p>在此枚举中，强制元素的序列从 1 开始，而不是 0。 但建议包括一个值为 0 的常量。 有关详细信息，请参阅<a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/programming-guide/enumeration-types/" target="_blank" rel="noopener">枚举类型</a>。</p><p>每个枚举类型都有一个基础类型，该基础类型可以是除 char 外的任何整型类型。 枚举元素的默认基础类型是 int。若要声明另一整型的枚举（如 byte），则请在后跟该类型的标识符后使用冒号，如以下示例所示。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> Days : <span class="keyword">byte</span> &#123;Sat=<span class="number">1</span>, Sun, Mon, Tue, Wed, Thu, Fri&#125;;</span><br></pre></td></tr></table></figure><p>枚举的已批准类型有 byte、 sbyte、 short、 ushort、 int、 uint、 long或 ulong。有关可能的类型的完整列表，请参阅 <a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/enum" target="_blank" rel="noopener">enum（C# 参考</a>）。</p><p>基础类型指定为每个枚举数分配多少存储空间。 但要将 enum 类型转换为整型，==则必须使用显示转换==。 例如，以下语句通过使用转换将 Sun 转换为 ，从而将枚举数 赋值为 enum int int类型的变量。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> x = (<span class="keyword">int</span>)Days.Sun;</span><br></pre></td></tr></table></figure><p>可以为枚举类型的枚举器列表中的元素分配任何值，也==可以使用计算值==，计算因子必须是已经有确定的值的枚举元素，不能包含后面的值未确定的元素：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">EnumTest</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">enum</span> Day &#123; Sunday=<span class="number">6</span>, Monday=<span class="number">3</span>, Tuesday = Sunday + Monday, Wednesday, Thursday, Friday, Saturday &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Console.WriteLine(Day.Sunday);</span><br><span class="line">        Console.WriteLine(Day.Friday);</span><br><span class="line">        Console.WriteLine((<span class="keyword">int</span>)Day.Sunday);</span><br><span class="line">        Console.WriteLine((<span class="keyword">int</span>)Day.Monday);</span><br><span class="line">        Console.WriteLine((<span class="keyword">int</span>)Day.Tuesday);</span><br><span class="line">        Console.WriteLine((<span class="keyword">int</span>)Day.Wednesday);</span><br><span class="line">        Console.WriteLine((<span class="keyword">int</span>)Day.Thursday);</span><br><span class="line">        Console.WriteLine((<span class="keyword">int</span>)Day.Friday);</span><br><span class="line">        Console.WriteLine((<span class="keyword">int</span>)Day.Saturday);        </span><br><span class="line"></span><br><span class="line">        Console.ReadKey();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*  输出</span></span><br><span class="line"><span class="comment">Sunday</span></span><br><span class="line"><span class="comment">Friday</span></span><br><span class="line"><span class="comment">6</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">9</span></span><br><span class="line"><span class="comment">10</span></span><br><span class="line"><span class="comment">11</span></span><br><span class="line"><span class="comment">12</span></span><br><span class="line"><span class="comment">13</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="使用-System-Enum-方法来发现和操作枚举值"><a href="#使用-System-Enum-方法来发现和操作枚举值" class="headerlink" title="使用 System.Enum 方法来发现和操作枚举值"></a>使用 System.Enum 方法来发现和操作枚举值</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">string</span> s = Enum.GetName(<span class="keyword">typeof</span>(Days), <span class="number">16</span>);</span><br><span class="line">Console.WriteLine(s);</span><br><span class="line"></span><br><span class="line">Console.WriteLine(<span class="string">"The values of the Day Enum are:"</span>);</span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">int</span> i <span class="keyword">in</span> Enum.GetValues(<span class="keyword">typeof</span>(Days)))</span><br><span class="line">    Console.WriteLine(i);</span><br><span class="line"></span><br><span class="line">Console.WriteLine(<span class="string">"The names of the Day Enum are:"</span>);</span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">string</span> str <span class="keyword">in</span> Enum.GetNames(<span class="keyword">typeof</span>(Days)))</span><br><span class="line">    Console.WriteLine(str);</span><br></pre></td></tr></table></figure><blockquote><p>输出结果</p></blockquote><pre><code>ThursdayThe values of the Day Enum are:01248163264The names of the Day Enum are:NoneSundayMondayTuesdayWednesdayThursdayFridaySaturday</code></pre><h2 id="高级主题：作为位标志的枚举类型"><a href="#高级主题：作为位标志的枚举类型" class="headerlink" title="高级主题：作为位标志的枚举类型"></a>高级主题：作为位标志的枚举类型</h2><p>创建==位标志枚举==的方法是，应用 <a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.flagsattribute/" target="_blank" rel="noopener">FlagsAttribute</a> 属性并适当定义一些值，以便可以对这些值执行 AND、OR、NOT 和 XOR 按位运算。 在位标志枚举中，包括一个值为零（表示“未设置任何标志”）的命名常量。 如果零值不表示“未设置任何标志”，请勿为标志指定零值。</p><p>在以下示例中，定义了名为 Days 枚举的另一个版本。 Days 具有 Flags 属性，且它的每个值都是 2 的若干次幂，指数依次递增。 这样，你就能够创建值为 <code>Days.Tuesday | Days.Thursday</code> 的 Days 变量。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">Flags</span>]</span><br><span class="line"><span class="keyword">enum</span> Days</span><br><span class="line">&#123;</span><br><span class="line">    None = <span class="number">0x0</span>,</span><br><span class="line">    Sunday = <span class="number">0x1</span>,</span><br><span class="line">    Monday = <span class="number">0x2</span>,</span><br><span class="line">    Tuesday = <span class="number">0x4</span>,</span><br><span class="line">    Wednesday = <span class="number">0x8</span>,</span><br><span class="line">    Thursday = <span class="number">0x10</span>,</span><br><span class="line">    Friday = <span class="number">0x20</span>,</span><br><span class="line">    Saturday = <span class="number">0x40</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title">MyClass</span></span><br><span class="line">&#123;</span><br><span class="line">    Days meetingDays = Days.Tuesday | Days.Thursday;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>若要在枚举上设置标志，请使用按位 OR 运算符，如以下示例所示：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Initialize with two flags using bitwise OR.</span></span><br><span class="line">meetingDays = Days.Tuesday | Days.Thursday;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Set an additional flag using bitwise OR.</span></span><br><span class="line">meetingDays = meetingDays | Days.Friday;</span><br><span class="line"></span><br><span class="line">Console.WriteLine(<span class="string">"Meeting days are &#123;0&#125;"</span>, meetingDays);</span><br><span class="line"><span class="comment">// Output: Meeting days are Tuesday, Thursday, Friday</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Remove a flag using bitwise XOR.</span></span><br><span class="line">meetingDays = meetingDays ^ Days.Tuesday;</span><br><span class="line">Console.WriteLine(<span class="string">"Meeting days are &#123;0&#125;"</span>, meetingDays);</span><br><span class="line"><span class="comment">// Output: Meeting days are Thursday, Friday</span></span><br></pre></td></tr></table></figure><p>若要确定是否设置了特定标志，请使用按位 AND 运算，如以下示例所示：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Test value of flags using bitwise AND.</span></span><br><span class="line"><span class="keyword">bool</span> test = (meetingDays &amp; Days.Thursday) == Days.Thursday;</span><br><span class="line">Console.WriteLine(<span class="string">"Thursday &#123;0&#125; a meeting day."</span>, test == <span class="literal">true</span> ? <span class="string">"is"</span> : <span class="string">"is not"</span>);</span><br><span class="line"><span class="comment">// Output: Thursday is a meeting day.</span></span><br></pre></td></tr></table></figure><hr><h1 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h1>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;数据类型&quot;&gt;&lt;a href=&quot;#数据类型&quot; class=&quot;headerlink&quot; title=&quot;数据类型&quot;&gt;&lt;/a&gt;数据类型&lt;/h1&gt;&lt;p&gt;预定义类型(predefined type)/基元类型(primitive type)，也翻译为基本类型、基础类型或者原始类型。&lt;/p&gt;
    
    </summary>
    
    
      <category term="C#" scheme="http://slowread.cn/tags/C/"/>
    
      <category term="C#本质论" scheme="http://slowread.cn/tags/C-%E6%9C%AC%E8%B4%A8%E8%AE%BA/"/>
    
      <category term="Essential C#" scheme="http://slowread.cn/tags/Essential-C/"/>
    
  </entry>
  
  <entry>
    <title>C#本质论笔记 第1章 C#概述</title>
    <link href="http://slowread.cn/2017/12/13/CSharp%E6%9C%AC%E8%B4%A8%E8%AE%BA%E7%AC%94%E8%AE%B0-%E7%AC%AC1%E7%AB%A0-CSharp%E6%A6%82%E8%BF%B0/"/>
    <id>http://slowread.cn/2017/12/13/CSharp本质论笔记-第1章-CSharp概述/</id>
    <published>2017-12-13T05:35:26.000Z</published>
    <updated>2017-12-17T04:29:14.221Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HelloWorld"><a href="#HelloWorld" class="headerlink" title="HelloWorld"></a>HelloWorld</h1><h2 id="本书中的例子"><a href="#本书中的例子" class="headerlink" title="本书中的例子"></a>本书中的例子</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">HelloWorld</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.Console.WriteLine(<span class="string">"Hello World!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="其他例子"><a href="#其他例子" class="headerlink" title="其他例子"></a>其他例子</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Hello</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Console.WriteLine(<span class="string">"Hello World!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="VS-IDE自动生成例子"><a href="#VS-IDE自动生成例子" class="headerlink" title="VS IDE自动生成例子"></a>VS IDE自动生成例子</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">HelloWorld</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            Console.WriteLine(<span class="string">"Hello World!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="语法基础"><a href="#语法基础" class="headerlink" title="语法基础"></a>语法基础</h1><h2 id="标识符大小写风格"><a href="#标识符大小写风格" class="headerlink" title="标识符大小写风格"></a>标识符大小写风格</h2><h3 id="Pacal风格-PascalCase-Pascal-case"><a href="#Pacal风格-PascalCase-Pascal-case" class="headerlink" title="Pacal风格 (PascalCase/Pascal case)"></a>Pacal风格 (PascalCase/Pascal case)</h3><blockquote><p>每个单词首字母大写，例如：ComponentModel, Configuration, and HttpFileCollection. 注意在 HttpFileCollection中，由于首字母缩写词HTTP的长度超过两个字母，所以仅首字母大写。</p></blockquote><h2 id="camel风格-camelCase-camel-Case"><a href="#camel风格-camelCase-camel-Case" class="headerlink" title="camel风格 (camelCase/camel Case)"></a>camel风格 (camelCase/camel Case)</h2><blockquote><p>除了第一个字母小写，其他约定与Pascal大小写放个一样，例如：quotient, firstName, httpFileCollection, ioStream, and theDreadPirateRoberts.</p></blockquote><h2 id="形参与实参"><a href="#形参与实参" class="headerlink" title="形参与实参"></a>形参与实参</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApplication</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> a = <span class="number">5</span>;</span><br><span class="line">            abc(a); <span class="comment">//a就是实参</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">abc</span>(<span class="params"><span class="keyword">int</span> c</span>) <span class="comment">//c就是形参</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">5</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Main"><a href="#Main" class="headerlink" title="Main"></a>Main</h2><blockquote><ul><li>Main 方法是 C# 控制台应用程序或窗口应用程序的入口点。 （库和服务不要求将 Main 方法作为入口点。） 应用程序启动时，Main 方法是第一个调用的方法。</li><li>C# 程序中只能有一个入口点。 如果您有多个类都包含 Main 方法，则必须使用 /main 编译器选项编译您的程序，以指定用作入口点的 Main 方法。 </li></ul></blockquote><h3 id="不带参数的Main"><a href="#不带参数的Main" class="headerlink" title="不带参数的Main"></a><code>不带参数</code>的Main</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Hello</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.Console.WriteLine(<span class="string">"Hello World!"</span>);</span><br><span class="line">        System.Console.ReadKey();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="带参数的Main"><a href="#带参数的Main" class="headerlink" title="带参数的Main"></a><code>带参数</code>的Main</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Hello</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.Console.WriteLine(<span class="string">"Hello World!"</span>);</span><br><span class="line">        System.Console.ReadKey();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Main-概述"><a href="#Main-概述" class="headerlink" title="Main 概述"></a>Main 概述</h3><ul><li>Main 方法是 .exe 程序的入口点，程序控制流在该处开始和结束。</li><li>Main 在类或结构内声明。 Main 必须是静态的，且不应该是 公用的。 （在前面的示例中，它接受默认访问级别 private。）但不要求封闭类或结构是静态的。</li><li>Main 的返回类型有两种：void 或 int。</li><li>所声明的 Main 方法可以具有包含命令行实参的 string[] 形参，也可以不具有这样的形参。 使用 Visual Studio 创建 Windows 窗体应用程序时，可以手动添加形参，也可以使用 Environment 类获取命令行实参。 形参读取为从零开始编制索引的命令行实参。 与 C 和 C++ 不同，不会将程序名称视为第一个命令行实参。</li></ul><h3 id="Main-例子"><a href="#Main-例子" class="headerlink" title="Main 例子"></a>Main 例子</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Hello</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.Console.WriteLine(<span class="string">"Hello World!"</span>);</span><br><span class="line">        System.Console.WriteLine(args.Length);</span><br><span class="line">        System.Console.WriteLine(System.Environment.CommandLine);</span><br><span class="line">        System.Console.WriteLine(System.Environment.CurrentDirectory);</span><br><span class="line">        System.Console.WriteLine(System.Environment.MachineName);</span><br><span class="line">        System.Console.WriteLine(System.Environment.UserName);</span><br><span class="line">        System.Console.ReadKey();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>编译上面代码，在控制台输入 ==HelloWorld.exe== 输出结果</p></blockquote><pre><code>Hello World!0helloworld.exeD:\WaProj\Essential C#5.0, 4th Edition\第一章DESKTOP-D10TF3Cihome</code></pre><blockquote><p>编译上面代码，在控制台输入 ==HelloWorld== 输出结果</p></blockquote><pre><code>Hello World!0helloworldD:\WaProj\Essential C#5.0, 4th Edition\第一章DESKTOP-D10TF3Cihome</code></pre><h2 id="单行多行语句"><a href="#单行多行语句" class="headerlink" title="单行多行语句"></a>单行多行语句</h2><h3 id="一行包含多条语句"><a href="#一行包含多条语句" class="headerlink" title="一行包含多条语句"></a>一行包含多条语句</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.Console.WriteLine(<span class="string">"1"</span>);System.Console.WriteLine(<span class="string">"2"</span>);</span><br></pre></td></tr></table></figure><p>输出结果</p><pre><code>12</code></pre><h3 id="一条语句跨越多行"><a href="#一条语句跨越多行" class="headerlink" title="一条语句跨越多行"></a>一条语句跨越多行</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.Console.WriteLine(</span><br><span class="line"><span class="string">"Hello World!"</span>);</span><br></pre></td></tr></table></figure><p>输出结果</p><pre><code>Hello World!</code></pre><h3 id="错误示例"><a href="#错误示例" class="headerlink" title="错误示例"></a>错误示例</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.Console.WriteLine(<span class="string">"Hello </span></span><br><span class="line"><span class="string">   World!"</span>);</span><br></pre></td></tr></table></figure><p>错误提示</p><pre><code>HelloWorld.cs(5,31): error CS1010: 常量中有换行符HelloWorld.cs(6,12): error CS1010: 常量中有换行符</code></pre><h2 id="缩进和空白"><a href="#缩进和空白" class="headerlink" title="缩进和空白"></a>缩进和空白</h2><blockquote><p>例子1</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Hello</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line">System.Console.WriteLine(<span class="string">"Hello World!"</span>);</span><br><span class="line">System.Console.ReadKey();</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>例子2</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Hello</span>&#123;<span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span>&#123;System.Console.WriteLine(<span class="string">"Hello World!"</span>);System.Console.ReadKey();&#125;&#125;</span><br></pre></td></tr></table></figure><blockquote><p>上面两个例子输出结果相同，对编译器来说无差别。</p></blockquote><h2 id="变量声明与赋值"><a href="#变量声明与赋值" class="headerlink" title="变量声明与赋值"></a>变量声明与赋值</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Hello</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line"> <span class="keyword">string</span> valerie;</span><br><span class="line"> <span class="comment">//定义变量并赋值</span></span><br><span class="line"> <span class="keyword">string</span> max = <span class="string">"Have fun storming the castle!"</span>;</span><br><span class="line"></span><br><span class="line"> valerie = <span class="string">"Think it will work?"</span>;</span><br><span class="line"></span><br><span class="line">   System.Console.WriteLine(max);</span><br><span class="line">   System.Console.WriteLine(valerie);</span><br><span class="line"></span><br><span class="line">   <span class="comment">//重新赋值</span></span><br><span class="line">   max = <span class="string">"It would take a miracle."</span>;</span><br><span class="line">   System.Console.WriteLine(max);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">string</span> boys,girls;</span><br><span class="line">   <span class="comment">//多赋值操作</span></span><br><span class="line">   boys = girls = <span class="string">"We Are Young."</span>;</span><br><span class="line">System.Console.WriteLine(boys);</span><br><span class="line">System.Console.WriteLine(girls);</span><br><span class="line"></span><br><span class="line">System.Console.ReadKey();</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>输出结果</p></blockquote><pre><code>Have fun storming the castle!Think it will work?It would take a miracle.We Are Young.We Are Young.</code></pre><h3 id="高级主题：字符串不可变"><a href="#高级主题：字符串不可变" class="headerlink" title="高级主题：字符串不可变"></a>高级主题：字符串不可变</h3><p>所有string类型数据，都是不可变的（或者说不可修改的），例如：不可能将字符串“We Are Yong.”修改为“We Are Old.”。也就是说，不能修改变量最初引用的数据，只能重新赋值，让它指向内存中的新位置。</p><h1 id="控制台输入输出"><a href="#控制台输入输出" class="headerlink" title="控制台输入输出"></a>控制台输入输出</h1><h2 id="从控制台获取输入"><a href="#从控制台获取输入" class="headerlink" title="从控制台获取输入"></a>从控制台获取输入</h2><h3 id="使用System-Console-ReadLine"><a href="#使用System-Console-ReadLine" class="headerlink" title="使用System.Console.ReadLine()"></a>使用System.Console.ReadLine()</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Hello</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line"> <span class="keyword">string</span> firstName;</span><br><span class="line"> <span class="keyword">string</span> lastName;</span><br><span class="line"></span><br><span class="line"> System.Console.Write(<span class="string">"Enter your first name: "</span>);</span><br><span class="line"> firstName = System.Console.ReadLine();</span><br><span class="line"></span><br><span class="line"> System.Console.Write(<span class="string">"Enter your last name: "</span>);</span><br><span class="line"> lastName = System.Console.ReadLine();</span><br><span class="line"></span><br><span class="line">   System.Console.WriteLine(<span class="string">"Hello "</span> + firstName + <span class="string">" "</span> + lastName);</span><br><span class="line">      System.Console.ReadKey();</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>输出结果</p></blockquote><pre><code>Enter your first name: JonEnter your last name: SnowHello Jon Snow</code></pre><h3 id="高级主题：System-Console-Read"><a href="#高级主题：System-Console-Read" class="headerlink" title="高级主题：System.Console.Read()"></a>高级主题：System.Console.Read()</h3><blockquote><p>System.Console.Read()方法返回的是与读取的字符值对应的证书，如果没有更多的字符可用，就返回-1。为了获取实际字符，需要先将证书转型为字符，代码如下：</p></blockquote><h4 id="代码示例-1"><a href="#代码示例-1" class="headerlink" title="代码示例 1"></a>代码示例 1</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Hello</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line"> <span class="keyword">int</span> readValue;</span><br><span class="line"> <span class="keyword">char</span> character;</span><br><span class="line"></span><br><span class="line"> readValue = System.Console.Read();</span><br><span class="line"> character = (<span class="keyword">char</span>) readValue;</span><br><span class="line">   System.Console.WriteLine(character);</span><br><span class="line"></span><br><span class="line">   System.Console.ReadKey();</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>System.Console.Read() 从标准输入流读取下一个字符。</p><p>System.Console.ReadKey() 获取用户按下的下一个字符或功能键。 按下的键显示在控制台窗口中。</p><p>按回车键之前，System.Console.Read()方法不会返回输入，即使用户输入了多个字符。</p><p>输入 123，按回车，再输入 a，输出结果</p></blockquote><pre><code>1231a</code></pre><h4 id="代码示例-2"><a href="#代码示例-2" class="headerlink" title="代码示例 2"></a>代码示例 2</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Hello</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line"> <span class="keyword">int</span> readValueFirst,readValueSecond,readValueThird;</span><br><span class="line"> <span class="keyword">char</span> character;</span><br><span class="line"></span><br><span class="line"> readValueFirst = System.Console.Read();</span><br><span class="line"> character = (<span class="keyword">char</span>) readValueFirst;</span><br><span class="line">   System.Console.WriteLine(character);</span><br><span class="line">   readValueSecond = System.Console.Read();</span><br><span class="line"> character = (<span class="keyword">char</span>) readValueSecond;</span><br><span class="line">   System.Console.WriteLine(character);</span><br><span class="line">   readValueThird = System.Console.Read();</span><br><span class="line"> character = (<span class="keyword">char</span>) readValueThird;</span><br><span class="line">   System.Console.WriteLine(character);</span><br><span class="line"></span><br><span class="line">   System.Console.ReadKey();</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>System.Console.Read() 从标准输入流读取下一个字符。</p><p>System.Console.ReadKey() 获取用户按下的下一个字符或功能键。 按下的键显示在控制台窗口中。</p><p>按回车键之前，System.Console.Read()方法不会返回输入，即使用户输入了多个字符。</p><p>输入 123，按回车，再输入 a，输出结果</p></blockquote><pre><code>123123a</code></pre><blockquote><p>上面两个示例，输入信息相同，由于代码不同因而输出结果不同。</p></blockquote><h2 id="输出到控制台"><a href="#输出到控制台" class="headerlink" title="输出到控制台"></a>输出到控制台</h2><blockquote><p>System.Console.Write() 输出后不添加换行符（当前行终止符）。<br>System.Console.WriteLine() 将参数内容（后跟当前行终止符）写入标准输出流，输出后，光标切换到下一行。</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Hello</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line"> <span class="keyword">string</span> firstName;</span><br><span class="line"> <span class="keyword">string</span> lastName;</span><br><span class="line"></span><br><span class="line"> System.Console.Write(<span class="string">"Enter your first name: "</span>);</span><br><span class="line"> firstName = System.Console.ReadLine();</span><br><span class="line"></span><br><span class="line"> System.Console.Write(<span class="string">"Enter your last name: "</span>);</span><br><span class="line"> lastName = System.Console.ReadLine();</span><br><span class="line"></span><br><span class="line">   System.Console.WriteLine(</span><br><span class="line">   <span class="string">"Hello &#123;0&#125; &#123;1&#125;."</span>, firstName, lastName);</span><br><span class="line">      System.Console.ReadKey();</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>示例代码中”Hello {0} {1}.”，标识了两个索引占位符，用于在字符串中插入数据。</p><p>输出结果</p></blockquote><pre><code>Enter your first name: JonEnter your last name: SnowHello Jon Snow.</code></pre><blockquote><p>交换索引占位符和对应变量</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.Console.WriteLine(</span><br><span class="line">   <span class="string">"Hello &#123;1&#125;, &#123;0&#125;."</span>, firstName, lastName);</span><br></pre></td></tr></table></figure><blockquote><p>输出结果</p></blockquote><pre><code>Enter your first name: JonEnter your last name: SnowHello Snow, Jon.</code></pre><h2 id="代码注释"><a href="#代码注释" class="headerlink" title="代码注释"></a>代码注释</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Hello</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line"> <span class="keyword">string</span> firstName;<span class="comment">//存储名字的变量【单行注释】</span></span><br><span class="line"> <span class="keyword">string</span> lastName;<span class="comment">//存储姓氏的变量【单行注释】</span></span><br><span class="line"></span><br><span class="line"> System.Console.Write<span class="comment">/*不换行输出【语句内部带分隔符注释】*/</span>(</span><br><span class="line"> <span class="string">"Enter your first name: "</span>);</span><br><span class="line"> firstName = System.Console.ReadLine();</span><br><span class="line"></span><br><span class="line"> System.Console.Write<span class="comment">/*不换行输出【语句内部带分隔符注释】*/</span>(</span><br><span class="line"> <span class="string">"Enter your last name: "</span>);</span><br><span class="line"> lastName = System.Console.ReadLine();</span><br><span class="line"></span><br><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment"> 使用复合格式化在控制台显示问候语。</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">System.Console.WriteLine(</span><br><span class="line">   <span class="string">"Hello &#123;1&#125;, &#123;0&#125;."</span>, firstName, lastName);</span><br><span class="line"></span><br><span class="line">      System.Console.ReadKey();</span><br><span class="line"></span><br><span class="line">      <span class="comment">//这是程序列表的结尾</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>目前观点</p></blockquote><ul><li><strong>不要</strong>使用注释，除非代码本身“一言难尽”。</li><li><strong>要</strong>尽量编写清晰的代码，而不是通过注释澄清复杂算法。</li></ul><h2 id="CIL和ILDAASM-公共中间语言和IL反汇编"><a href="#CIL和ILDAASM-公共中间语言和IL反汇编" class="headerlink" title="CIL和ILDAASM (公共中间语言和IL反汇编)"></a>CIL和ILDAASM (公共中间语言和IL反汇编)</h2><p>C#编译器将C#代码转换成CIL代码而不是机器码。对于一个程序集(DLL文件或可执行文件)，可以使用CIL反汇编程序将其析构成对应的CIL表示，从而查看其CIL代码。微软的反汇编程序文件：ILDASM（IL Disassembler）,可以对程序或者类库执行反汇编，显示由C#编译器生成的CIL代码。</p><blockquote><p>ildasm.exe存在与C:\Program Files (x86)\Microsoft SDKs\Windows\v10.0A\bin\NETFX 4.6.1 Tools类似位置</p><p>例子</p></blockquote><pre><code>ildasm /text hello.exe</code></pre><blockquote><p>输出结果</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">D:\WaProj\Essential C#5.0, 4th Edition\第一章&gt;ildasm /text hello.exe</span><br><span class="line"></span><br><span class="line">//  Microsoft (R) .NET Framework IL Disassembler.  Version 4.6.1055.0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// Metadata version: v4.0.30319</span><br><span class="line">.assembly extern mscorlib</span><br><span class="line">&#123;</span><br><span class="line">  .publickeytoken = (B7 7A 5C 56 19 34 E0 89 )                         // .z\V.4..</span><br><span class="line">  .ver 4:0:0:0</span><br><span class="line">&#125;</span><br><span class="line">.assembly Hello</span><br><span class="line">&#123;</span><br><span class="line">  .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilationRelaxationsAttribute::.ctor(int32) = ( 01 00 08 00 00 00 00 00 )</span><br><span class="line">  .custom instance void [mscorlib]System.Runtime.CompilerServices.RuntimeCompatibilityAttribute::.ctor() = ( 01 00 01 00 54 02 16 57 72 61 70 4E 6F 6E 45 78   // ....T..WrapNonEx</span><br><span class="line">                                                                                                             63 65 70 74 69 6F 6E 54 68 72 6F 77 73 01 )       // ceptionThrows.</span><br><span class="line">  .hash algorithm 0x00008004</span><br><span class="line">  .ver 0:0:0:0</span><br><span class="line">&#125;</span><br><span class="line">.module Hello.exe</span><br><span class="line">// MVID: &#123;BDAC1292-8393-4BEB-9AD7-40DC171B0BF9&#125;</span><br><span class="line">.imagebase 0x00400000</span><br><span class="line">.file alignment 0x00000200</span><br><span class="line">.stackreserve 0x00100000</span><br><span class="line">.subsystem 0x0003       // WINDOWS_CUI</span><br><span class="line">.corflags 0x00000001    //  ILONLY</span><br><span class="line">// Image base: 0x02CF0000</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// =============== CLASS MEMBERS DECLARATION ===================</span><br><span class="line"></span><br><span class="line">.class private auto ansi beforefieldinit Hello</span><br><span class="line">       extends [mscorlib]System.Object</span><br><span class="line">&#123;</span><br><span class="line">  .method private hidebysig static void  Main(string[] args) cil managed</span><br><span class="line">  &#123;</span><br><span class="line">    .entrypoint</span><br><span class="line">    // 代码大小       19 (0x13)</span><br><span class="line">    .maxstack  8</span><br><span class="line">    IL_0000:  nop</span><br><span class="line">    IL_0001:  ldstr      &quot;Hello World!&quot;</span><br><span class="line">    IL_0006:  call       void [mscorlib]System.Console::WriteLine(string)</span><br><span class="line">    IL_000b:  nop</span><br><span class="line">    IL_000c:  call       valuetype [mscorlib]System.ConsoleKeyInfo [mscorlib]System.Console::ReadKey()</span><br><span class="line">    IL_0011:  pop</span><br><span class="line">    IL_0012:  ret</span><br><span class="line">  &#125; // end of method Hello::Main</span><br><span class="line"></span><br><span class="line">  .method public hidebysig specialname rtspecialname</span><br><span class="line">          instance void  .ctor() cil managed</span><br><span class="line">  &#123;</span><br><span class="line">    // 代码大小       7 (0x7)</span><br><span class="line">    .maxstack  8</span><br><span class="line">    IL_0000:  ldarg.0</span><br><span class="line">    IL_0001:  call       instance void [mscorlib]System.Object::.ctor()</span><br><span class="line">    IL_0006:  ret</span><br><span class="line">  &#125; // end of method Hello::.ctor</span><br><span class="line"></span><br><span class="line">&#125; // end of class Hello</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// =============================================================</span><br><span class="line"></span><br><span class="line">// *********** 反汇编完成 ***********************</span><br></pre></td></tr></table></figure><blockquote><p>/text 选项制定输出到命令控制台，而不是在ildasm的图形界面程序中显示。</p><p>常见.NET反汇编工具</p><ul><li><a href="https://github.com/0xd4d/dnSpy/releases/" target="_blank" rel="noopener">dnSpy (免费)</a>   具备调试功能</li><li><a href="http://ilspy.net/" target="_blank" rel="noopener">ILSpy (免费)</a></li><li><a href="http://www.jetbrains.com/decompiler/" target="_blank" rel="noopener">dotPeek (免费)</a>    生成代码质量较高，Visual Studio风格界面</li><li><a href="http://www.red-gate.com/products/dotnet-development/reflector/" target="_blank" rel="noopener">.Net Reflector (收费)</a></li></ul><p>为了减少程序被别人轻松反编译，可以考虑使用混淆器(obfuscator)产品。这些混淆器会打开IL代码，将代码加密成一种功能不变但更难于理解的形式。</p></blockquote><hr><h1 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h1>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;HelloWorld&quot;&gt;&lt;a href=&quot;#HelloWorld&quot; class=&quot;headerlink&quot; title=&quot;HelloWorld&quot;&gt;&lt;/a&gt;HelloWorld&lt;/h1&gt;&lt;h2 id=&quot;本书中的例子&quot;&gt;&lt;a href=&quot;#本书中的例子&quot; class=&quot;headerlink&quot; title=&quot;本书中的例子&quot;&gt;&lt;/a&gt;本书中的例子&lt;/h2&gt;&lt;figure class=&quot;highlight csharp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;HelloWorld&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Main&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;    &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.Console.WriteLine(&lt;span class=&quot;string&quot;&gt;&quot;Hello World!&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="C#" scheme="http://slowread.cn/tags/C/"/>
    
      <category term="C#本质论" scheme="http://slowread.cn/tags/C-%E6%9C%AC%E8%B4%A8%E8%AE%BA/"/>
    
      <category term="Essential C#" scheme="http://slowread.cn/tags/Essential-C/"/>
    
  </entry>
  
</feed>
