<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>慢读慢写</title>
  
  <subtitle>漫漫人生</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://at2008.github.io/"/>
  <updated>2018-08-03T13:41:17.165Z</updated>
  <id>https://at2008.github.io/</id>
  
  <author>
    <name>At2008</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python 正则表达式</title>
    <link href="https://at2008.github.io/2018/08/01/Python-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>https://at2008.github.io/2018/08/01/Python-正则表达式/</id>
    <published>2018-08-01T06:55:25.000Z</published>
    <updated>2018-08-03T13:41:17.165Z</updated>
    
    <content type="html"><![CDATA[<h1 id="特殊符号和字符"><a href="#特殊符号和字符" class="headerlink" title="特殊符号和字符"></a>特殊符号和字符</h1><h2 id="最简单正则表达式"><a href="#最简单正则表达式" class="headerlink" title="最简单正则表达式"></a>最简单正则表达式</h2><blockquote><p>不使用任何特殊符号，值匹配字符串本身</p></blockquote><table><thead><tr><th>正则表达式</th><th>匹配的字符串</th></tr></thead><tbody><tr><td>foo</td><td>foo</td></tr><tr><td>Python</td><td>Python</td></tr></tbody></table><a id="more"></a><h2 id="使用择一匹配符号匹配多个正则表达式模式"><a href="#使用择一匹配符号匹配多个正则表达式模式" class="headerlink" title="使用择一匹配符号匹配多个正则表达式模式"></a>使用择一匹配符号匹配多个正则表达式模式</h2><table><thead><tr><th>正则表达式</th><th>匹配的字符串</th></tr></thead><tbody><tr><td>at&#124;home</td><td>at、home</td></tr><tr><td>bat&#124;bet&#124;bit</td><td>bat、bet、bit</td></tr></tbody></table><blockquote><p>例子</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> re</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pattern = re.compile(<span class="string">r'bat|bit'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r1 = re.match(pattern,<span class="string">'bat bet bit'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r1</span><br><span class="line">&lt;re.Match object; span=(<span class="number">0</span>, <span class="number">3</span>), match=<span class="string">'bat'</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(r1.group())</span><br><span class="line">bat</span><br></pre></td></tr></table></figure><h2 id="匹配任意单个字符"><a href="#匹配任意单个字符" class="headerlink" title="匹配任意单个字符"></a>匹配任意单个字符</h2><table><thead><tr><th>正则表达式模式</th><th>匹配的字符串</th></tr></thead><tbody><tr><td>f.o</td><td>匹配在字母“f”和“o”之间的任意一个字符；例如fao、f9o、f#o等</td></tr><tr><td>..</td><td>任意两个字符</td></tr><tr><td>.end</td><td>匹配在字符串end之前的任意一个字</td></tr></tbody></table><h2 id="从字符串起始或者结尾或者单词边界匹配"><a href="#从字符串起始或者结尾或者单词边界匹配" class="headerlink" title="从字符串起始或者结尾或者单词边界匹配"></a>从字符串起始或者结尾或者单词边界匹配</h2><table><thead><tr><th>正则表达式模式</th><th>匹配的字符串</th></tr></thead><tbody><tr><td>^From</td><td>任何以From作为起始的字符串</td></tr><tr><td>/bin/tcsh$</td><td>任何以/bin/tcsh作为结尾的字符串</td></tr><tr><td>^Subject:his</td><td>任何由单独的字符串Subject:hi构成的字符串</td></tr><tr><td>the</td><td>任何包含the的字符串</td></tr><tr><td>\bthe</td><td>任何以the开始的字符串</td></tr><tr><td>\bthe\b</td><td>仅仅匹配单词the</td></tr><tr><td>\Bthe</td><td>任何包含但并不以the作为起始的字符串</td></tr></tbody></table><h2 id="匹配限定范围的任意字符"><a href="#匹配限定范围的任意字符" class="headerlink" title="匹配限定范围的任意字符"></a>匹配限定范围的任意字符</h2><blockquote><p>用[]来匹配方括号对中包含的任何字符</p></blockquote><table><thead><tr><th>正则表达式模式</th><th>匹配的字符串</th></tr></thead><tbody><tr><td>b[aeiu]t</td><td>bat、bet、bit、but</td></tr><tr><td>[cr][23][dp][o2]</td><td>一个包含四个字符的字符串，第一个字符是“c”或“r”，然后是“2”或“3”，后面是“d”或“p”，最后要么是“o”要么是“2”。例如，c2do、r3p2、r2a2、c3po等</td></tr></tbody></table><h2 id="限定范围和否定"><a href="#限定范围和否定" class="headerlink" title="限定范围和否定"></a>限定范围和否定</h2><blockquote><ul><li>方括号中两个符号中间用连字符（-）连接，用于指定一个字符的范围；例如，A-Z、a-z或者0-9分别用于表示大写字母、小写字母和数值数字。</li><li>另外，如果脱字符（A）紧跟在左方括号后面，这个符号就表示不匹配给定字符集中的任何一个字符。</li></ul></blockquote><table><thead><tr><th>正则表达式模式</th><th>匹配的字符串</th></tr></thead><tbody><tr><td>Z.[0-9]</td><td>字母“z”后面跟着任何一个字符，然后跟着一个数字</td></tr><tr><td>[r-u][env-y][us]</td><td>字母“r”、“s”、“t”或者“u”后面跟着“e”、“n”、“v”、“w”、“x”或者“y”，然后跟着“u”或者“s”</td></tr><tr><td>[^aeiou]</td><td>一个非元音字符（练习：为什么我们说“非元音”而不是“辅音”？）</td></tr><tr><td>[^\t\n]</td><td>不匹配制表符或者\n</td></tr><tr><td>[“-a]</td><td>在一个ASCII系统中，所有字符都位于“”和“a”之间，即34-97之间</td></tr></tbody></table><h2 id="使用闭包操作符实现存在性和频数匹配"><a href="#使用闭包操作符实现存在性和频数匹配" class="headerlink" title="使用闭包操作符实现存在性和频数匹配"></a>使用闭包操作符实现存在性和频数匹配</h2><blockquote><p>本节介绍最常用的正则表达式符号，即特殊符号*、+和？，所有这些都可以用于匹配一个、多个或者没有出现的字符串模式。</p><ul><li>星号或者星号操作符（*）将匹配其左边的正则表达式出现零次或者多次的情况（在计算机编程语言和编译原理中，该操作称为Kleene闭包）。</li><li>加号（+）操作符将匹配一次或者多次出现的正则表达式（也叫做正闭包操作符）。</li><li>问号（？）操作符将匹配零次或者一次出现的正则表达式。</li></ul></blockquote><table><thead><tr><th>正则表达式模式</th><th>匹配的字符串</th></tr></thead><tbody><tr><td>[dn]ot？</td><td>字母“d”或者“n”，后面跟着一个“o”，然后是最多一个“t”，例如，do、no、dot、not</td></tr><tr><td>0?[1-9]</td><td>任何数值数字，它可能前置一个“0”，例如，匹配一系列数（表示从1~9月的数值），不管是一个还是两个数字</td></tr><tr><td>[0-9]{15，16}</td><td>匹配15或者16个数字（例如信用卡号码）</td></tr><tr><td>&lt;/?[^&gt;]+&gt;</td><td>匹配全部有效的（和无效的）HTML标签</td></tr><tr><td>[KQRBNP][a-h][1-8]-[a-h][1-8]</td><td>在“长代数”标记法中，表示国际象棋合法的棋盘移动（仅移动，不包括吃子和将军）。即“K”、“Q”、“R”、“B”、“N”或“P”等字母后面加上“al”~“h8”之间的棋盘坐标。前面的坐标表示从哪里开始走棋，后面的坐标代表走到哪个位置（棋格）上</td></tr></tbody></table><h2 id="表示字符集的特殊字符"><a href="#表示字符集的特殊字符" class="headerlink" title="表示字符集的特殊字符"></a>表示字符集的特殊字符</h2><blockquote><p>有一些特殊字符能够表示字符集。</p><ul><li>与使用“0-9”这个范围表示十进制数相比，可以简单地使用\d表示匹配任何十进制数字。</li><li>另一个特殊字符（\w）能够用于表示全部字母数字的字符集，相当于[A-Za-z0-9]的缩写形式，</li><li>\s可以用来表示空格字符。</li><li>这些特殊字符的大写版本表示不匹配；例如，\D表示任何非十进制数（与[0-9]相同），等等。</li></ul></blockquote><table><thead><tr><th>正则表达式模式</th><th>匹配的字符串</th></tr></thead><tbody><tr><td>\w+-\d+</td><td>一个由字母数字组成的字符串和一串由一个连字符分隔的数字</td></tr><tr><td>[A-Za-z]\w*</td><td>第一个字符是字母；其余字符（如果存在）可以是字母或者数字（几乎等价于Python中的有效标识符[参见练习]）</td></tr><tr><td>\d{3}-\d{3}-\d{4}</td><td>美国电话号码的格式，前面是区号前缀，例如800-555-1212</td></tr><tr><td>\w+@\w+.com</td><td>以<a href="mailto:xxx@YYY.com" target="_blank" rel="noopener">xxx@YYY.com</a>格式表示的简单电子邮件地址</td></tr></tbody></table><h2 id="使用圆括号指定分组"><a href="#使用圆括号指定分组" class="headerlink" title="使用圆括号指定分组"></a>使用圆括号指定分组</h2><blockquote><p>顾名思义，就是对正则表达式中的部分内容用()圈起来，然后再用运用正则表达式方法。对应 re 模块函数 group() 和 groups()。</p></blockquote><table><thead><tr><th>正则表达式模式</th><th>匹配的字符串</th></tr></thead><tbody><tr><td>\d+(\.\d*)?</td><td>表示简单浮点数的字符串；也就是说，任何十进制数字，后面可以接一个小数点和零个或者多个十进制数字，例如“0.004”、“2”、“75.”等</td></tr><tr><td>(Mr?s?\.)?[A-Z][a-z]*[A-Za-z-]+</td><td>名字和姓氏，以及对名字的限制（如果有，首字母必须大写，后续字母小写），全名前可以有可选的“Mr.”、“Mrs.”、“Ms.”或者“M.”作为称谓，以及灵活可选的姓氏，可以有多个单词、横线以及大写字母</td></tr></tbody></table><h2 id="扩展表示法"><a href="#扩展表示法" class="headerlink" title="扩展表示法"></a>扩展表示法</h2><table><thead><tr><th>正则表达式模式</th><th>匹配的字符串</th></tr></thead><tbody><tr><td>(?:\w+L.)*</td><td>以句点作为结尾的字符串，例如“google.”、“twitter.”、“facebook.”，但是这些配不会保存下来供后续的使用和数据检索</td></tr><tr><td>(?#comment)</td><td>此处并不做匹配，只是作为注释</td></tr><tr><td>(?=.com)</td><td>如果一个字符串后面跟着“.com”才做匹配操作，并不使用任何目标字符串</td></tr><tr><td>(?!.net)</td><td>如果一个字符串后面不是跟着“.net”才做匹配操作</td></tr><tr><td>(?&lt;=800-)</td><td>如果字符串之前为“800-”才做匹配，假定为电话号码，同样，并不使用任何输入字符串</td></tr><tr><td>(?&lt;!192\.168.)</td><td>如果一个字符串之前不是“192.168.”才做匹配操作，假定用于过滤掉一组C类IP地址</td></tr><tr><td>(?(1)y&#124;x）</td><td>如果一个匹配组1（1）存在，就与y匹配；否则，就与x匹配</td></tr></tbody></table><h1 id="flag"><a href="#flag" class="headerlink" title="flag"></a>flag</h1><p>参数flag是匹配模式，取值可以使用按位或运算符’|’表示同时生效，比如re.I | re.M。</p><ul><li>re.I(全拼：IGNORECASE): 忽略大小写（括号内是完整写法，下同）</li><li>re.M(全拼：MULTILINE): 多行模式，改变’^’和’$’的行为（参见上图）</li><li>re.S(全拼：DOTALL): 点任意匹配模式，改变’.’的行为</li><li>re.L(全拼：LOCALE): 使预定字符类 \w \W \b \B \s \S 取决于当前区域设定</li><li>re.U(全拼：UNICODE): 使预定字符类 \w \W \b \B \s \S \d \D 取决于unicode定义的字符属性</li><li>re.X(全拼：VERBOSE): 详细模式。这个模式下正则表达式可以是多行，忽略空白字符，并可以加入注释。</li></ul><h1 id="正则表达式和-Python-语言"><a href="#正则表达式和-Python-语言" class="headerlink" title="正则表达式和 Python 语言"></a>正则表达式和 Python 语言</h1><h2 id="match-方法从字符串开头进行匹配"><a href="#match-方法从字符串开头进行匹配" class="headerlink" title="match()方法从字符串开头进行匹配"></a>match()方法从字符串开头进行匹配</h2><blockquote><p>match()函数试图从字符串的<strong>起始部分</strong>对模式进行匹配。如果匹配成功，就返回一个匹配对象；如果匹配失败，就返回None，匹配对象的 group() 方法能够用于显示那个成功的匹配。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>re.match(<span class="string">'foo'</span>,<span class="string">'foo'</span>).group()</span><br><span class="line"><span class="string">'foo'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>re.match(<span class="string">'fo.'</span>,<span class="string">'foo'</span>).group()</span><br><span class="line"><span class="string">'foo'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>re.match(<span class="string">'fo.'</span>,<span class="string">'food on the table'</span>).group()</span><br><span class="line"><span class="string">'foo'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>re.match(<span class="string">'fo.'</span>,<span class="string">'ffood on the table'</span>).group()</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">AttributeError: <span class="string">'NoneType'</span> object has no attribute <span class="string">'group'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>re.match(<span class="string">'.fo.'</span>,<span class="string">'ffood on the table'</span>).group()</span><br><span class="line"><span class="string">'ffoo'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>re.match(<span class="string">'\w*fo.'</span>,<span class="string">'ffood on the table'</span>).group()</span><br><span class="line"><span class="string">'ffoo'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>re.match(<span class="string">'\w*d.'</span>,<span class="string">'ffood on the table'</span>).group()</span><br><span class="line"><span class="string">'ffood '</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>re.match(<span class="string">'\w*d'</span>,<span class="string">'ffood on the table'</span>).group()</span><br><span class="line"><span class="string">'ffood'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>re.match(<span class="string">'\w* on'</span>,<span class="string">'ffood on the table'</span>).group()</span><br><span class="line"><span class="string">'ffood on'</span></span><br></pre></td></tr></table></figure><blockquote><p>match() 只匹配以模式字符为起始的字符串，限制比较大。</p></blockquote><h2 id="search-在字符串中查找模式匹配"><a href="#search-在字符串中查找模式匹配" class="headerlink" title="search()在字符串中查找模式匹配"></a>search()在字符串中查找模式匹配</h2><blockquote><p>search() 的工作方式与match() 完全一致，不同之处在于search() 会用它的字符串参数，在<strong>任意位置</strong>对给定正则表达式模式搜索<strong>第一次出现</strong>的匹配情况。如果搜索到成功的匹配，就会返回一个匹配对象；否则，返回None。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>re.match(<span class="string">'on'</span>,<span class="string">'ffood on the table'</span>).group()<span class="comment"># match() 匹配失败</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">AttributeError: <span class="string">'NoneType'</span> object has no attribute <span class="string">'group'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>re.search(<span class="string">'on'</span>,<span class="string">'ffood on the table'</span>).group()<span class="comment"># search() 匹配成功</span></span><br><span class="line"><span class="string">'on'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>re.search(<span class="string">'on t'</span>,<span class="string">'ffood on the table'</span>).group()</span><br><span class="line"><span class="string">'on t'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>re.search(<span class="string">'on t..'</span>,<span class="string">'ffood on the table'</span>).group()</span><br><span class="line"><span class="string">'on the'</span></span><br></pre></td></tr></table></figure><h2 id="匹配多个字符串"><a href="#匹配多个字符串" class="headerlink" title="匹配多个字符串"></a>匹配多个字符串</h2><blockquote><p>使用择一匹配(|)符号</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>bt = <span class="string">'bat|bet|bit'</span><span class="comment"># 正则表达式模式：bat、bet、bit</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m = re.match(bt,<span class="string">'bat'</span>)<span class="comment"># 'bat' 匹配 成功</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">if</span> m <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:m.group()</span><br><span class="line">...</span><br><span class="line"><span class="string">'bat'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m = re.match(bt,<span class="string">'bwt'</span>)<span class="comment"># 'bwt' 匹配 失败</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">if</span> m <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:m.group()</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m = re.match(bt,<span class="string">'He bit me!'</span>)<span class="comment"># 无法匹配</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">if</span> m <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:m.group()</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m = re.search(bt,<span class="string">'He bit me!'</span>)<span class="comment"># 通过搜索，找到 'bit' ，匹配成功</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">if</span> m <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:m.group()</span><br><span class="line">...</span><br><span class="line"><span class="string">'bit'</span></span><br></pre></td></tr></table></figure><h2 id="匹配任何单个字符"><a href="#匹配任何单个字符" class="headerlink" title="匹配任何单个字符"></a>匹配任何单个字符</h2><blockquote><p>用点号 . 匹配任意单个字符(包括数字)除了 \n 或者空字符串。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> re</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>anyend = <span class="string">'.end'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m = re.match(anyend,<span class="string">'bend'</span>)         <span class="comment"># 点号匹配 'b'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">if</span> m <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>: m.group()</span><br><span class="line">...</span><br><span class="line"><span class="string">'bend'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m = re.match(anyend,<span class="string">'end'</span>)         <span class="comment"># 匹配失败 空字符</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">if</span> m <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>: m.group()</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m = re.match(anyend,<span class="string">'\nend'</span>)       <span class="comment"># 匹配失败 \n</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">if</span> m <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>: m.group()</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m = re.search(anyend,<span class="string">'The end.'</span>)   <span class="comment"># 搜索方式匹配到空格字符 ' '</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">if</span> m <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>: m.group()</span><br><span class="line">...</span><br><span class="line"><span class="string">' end'</span></span><br></pre></td></tr></table></figure><h2 id="匹配字符串中的小数点"><a href="#匹配字符串中的小数点" class="headerlink" title="匹配字符串中的小数点"></a>匹配字符串中的<code>小数点</code></h2><blockquote><p>在正则表达式中，小数点 <code>.</code> 代表匹配任何单个非空非\n字符；那如何匹配一个真正的小数点呢？Python中采用<code>\.</code>,对小数点进行转义的方式。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>patt314 = <span class="string">'3.14'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pi_patt = <span class="string">'3\.14'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m = re.match(pi_patt, <span class="string">'3.14'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">if</span> m <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>: m.group()</span><br><span class="line">...</span><br><span class="line"><span class="string">'3.14'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m = re.match(patt314, <span class="string">'3.14'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">if</span> m <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>: m.group()</span><br><span class="line">...</span><br><span class="line"><span class="string">'3.14'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m = re.match(patt314, <span class="string">'3214'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">if</span> m <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>: m.group()</span><br><span class="line">...</span><br><span class="line"><span class="string">'3214'</span></span><br></pre></td></tr></table></figure><h2 id="group-和-groups"><a href="#group-和-groups" class="headerlink" title="group() 和 groups()"></a>group() 和 groups()</h2><blockquote><p>group()通常用于以普通方式显示所有的匹配部分，但也能用于获取各个匹配的子组。可以使用groups())方法来获取一个包含所有匹配子字符串的元组。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>m=re.match(<span class="string">'(\w\w\w)-(\d\d\d)'</span>,<span class="string">'abc-123'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.group()         <span class="comment"># 完整匹配</span></span><br><span class="line"><span class="string">'abc-123'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.group(<span class="number">1</span>)        <span class="comment"># 子组1</span></span><br><span class="line"><span class="string">'abc'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.group(<span class="number">2</span>)        <span class="comment"># 子组2</span></span><br><span class="line"><span class="string">'123'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.groups()        <span class="comment"># 所有子组</span></span><br><span class="line">(<span class="string">'abc'</span>, <span class="string">'123'</span>)</span><br></pre></td></tr></table></figure><blockquote><p>如下为一个简单的示例，该示例展示了不同的分组排列，这将使整个事情变得更加清晰。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#--------------------------------------</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m=re.match(<span class="string">'ab'</span>,<span class="string">'ab'</span>)     <span class="comment"># 没有子组</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.group()                 <span class="comment"># 完整匹配</span></span><br><span class="line"><span class="string">'ab'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.groups()                <span class="comment"># 所有子组</span></span><br><span class="line">()</span><br><span class="line"><span class="comment">#--------------------------------------</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m=re.match(<span class="string">'(ab)'</span>,<span class="string">'ab'</span>)   <span class="comment"># 一个子组</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.group()                 <span class="comment"># 完整匹配</span></span><br><span class="line"><span class="string">'ab'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.group(<span class="number">1</span>)                <span class="comment"># 子组1</span></span><br><span class="line"><span class="string">'ab'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.groups()                <span class="comment"># 所有子组</span></span><br><span class="line">(<span class="string">'ab'</span>,)</span><br><span class="line"><span class="comment">#--------------------------------------</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m=re.match(<span class="string">'(a)(b)'</span>,<span class="string">'ab'</span>)   <span class="comment"># 两个子组</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.group()                   <span class="comment"># 完整匹配</span></span><br><span class="line"><span class="string">'ab'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.group(<span class="number">1</span>)                  <span class="comment"># 子组1</span></span><br><span class="line"><span class="string">'a'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.group(<span class="number">2</span>)                  <span class="comment"># 子组2</span></span><br><span class="line"><span class="string">'b'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.groups()                  <span class="comment"># 所有子组</span></span><br><span class="line">(<span class="string">'a'</span>, <span class="string">'b'</span>)</span><br><span class="line"><span class="comment">#--------------------------------------</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m=re.match(<span class="string">'(a(b))'</span>,<span class="string">'ab'</span>)   <span class="comment"># 两个子组</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.group()                   <span class="comment"># 完整匹配</span></span><br><span class="line"><span class="string">'ab'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.group(<span class="number">1</span>)                  <span class="comment"># 子组1</span></span><br><span class="line"><span class="string">'ab'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.group(<span class="number">2</span>)                  <span class="comment"># 子组2</span></span><br><span class="line"><span class="string">'b'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.groups()                  <span class="comment"># 所有子组</span></span><br><span class="line">(<span class="string">'ab'</span>, <span class="string">'b'</span>)</span><br></pre></td></tr></table></figure><h2 id="匹配字符串的起始和结尾以及单词边界"><a href="#匹配字符串的起始和结尾以及单词边界" class="headerlink" title="匹配字符串的起始和结尾以及单词边界"></a>匹配字符串的起始和结尾以及单词边界</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> re</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m=re.search(<span class="string">'^The'</span>,<span class="string">'The end.'</span>)          <span class="comment"># 起始匹配</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">if</span> m <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>: m.group()</span><br><span class="line">...</span><br><span class="line"><span class="string">'The'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m=re.search(<span class="string">r'dog$'</span>,<span class="string">'bitethe dog'</span>)      <span class="comment"># 结尾匹配</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">if</span> m <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>: m.group()</span><br><span class="line">...</span><br><span class="line"><span class="string">'dog'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m=re.search(<span class="string">'^The'</span>,<span class="string">'end. The'</span>)          <span class="comment"># 非起始，不匹配 注意大小写匹配</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">if</span> m <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>: m.group()</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m=re.search(<span class="string">r'\bthe'</span>,<span class="string">'bite the dog'</span>)    <span class="comment"># 在边界，匹配 注意大小写匹配</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">if</span> m <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>: m.group()</span><br><span class="line">...</span><br><span class="line"><span class="string">'the'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m=re.search(<span class="string">r'\bthe'</span>,<span class="string">'bitethe dog'</span>)     <span class="comment"># 非边界 不匹配</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">if</span> m <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>: m.group()</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m=re.search(<span class="string">r'\Bthe'</span>,<span class="string">'bitethe dog'</span>)     <span class="comment"># 非边界 匹配非边界</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">if</span> m <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>: m.group()</span><br><span class="line">...</span><br><span class="line"><span class="string">'the'</span></span><br></pre></td></tr></table></figure><h2 id="使用findall-和finditer-查找每一次出现的位置"><a href="#使用findall-和finditer-查找每一次出现的位置" class="headerlink" title="使用findall()和finditer()查找每一次出现的位置"></a>使用findall()和finditer()查找每一次出现的位置</h2><blockquote><p>findall()查询字符串中某个正则表达式模式全部的非重复出现情况。这与search()在执行字符串搜索时类似，但与match()和search()的不同之处在于，findall()总是返回一个<strong>列表</strong>。如果findall()没有找到匹配的部分，就返回一个空列表，但如果匹配成功，列表将包含所有成功的匹配部分（从左向右按出现顺序排列）。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>re.findall(<span class="string">'car'</span>,<span class="string">'car'</span>)</span><br><span class="line">[<span class="string">'car'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>re.findall(<span class="string">'car'</span>,<span class="string">'scary'</span>)</span><br><span class="line">[<span class="string">'car'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>re.findall(<span class="string">'car'</span>,<span class="string">'scary the barcardi to the car'</span>)</span><br><span class="line">[<span class="string">'car'</span>, <span class="string">'car'</span>, <span class="string">'car'</span>]</span><br></pre></td></tr></table></figure><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><h2 id="Python中正则表达式的一些匹配规则-CSDN"><a href="#Python中正则表达式的一些匹配规则-CSDN" class="headerlink" title="Python中正则表达式的一些匹配规则(CSDN)"></a>Python中正则表达式的一些匹配规则(CSDN)</h2><p><img src="https://slowread.cn/images/material/pythonRegex.png" alt="Python中正则表达式的一些匹配规则(CSDN)"></p><h2 id="Python中正则表达式的一些匹配规则-文字"><a href="#Python中正则表达式的一些匹配规则-文字" class="headerlink" title="Python中正则表达式的一些匹配规则(文字)"></a>Python中正则表达式的一些匹配规则(文字)</h2><table><thead><tr><th>语法</th><th>解释</th><th>表达式</th><th>成功匹配对象</th></tr></thead><tbody><tr><td>一般字符</td><td>匹配自身相对应的字符</td><td>abc</td><td>abc</td></tr><tr><td>&#124;</td><td>表示左右表达式任意满足一种即可</td><td>abc&#124;cba</td><td>abc或cba</td></tr><tr><td>.</td><td>匹配除换行符(\n)以外的任意<strong>单个</strong>字符</td><td>a.c</td><td>abc、azc</td></tr><tr><td>\</td><td>转义字符，可以改变原字符的意思</td><td>a.c</td><td>a.c</td></tr><tr><td>\d</td><td>匹配任意1位数字:0~9</td><td>\dabc</td><td>1abc</td></tr><tr><td>\D</td><td>匹配数字以外的字符</td><td>\Dabc</td><td>aabc</td></tr><tr><td>\w</td><td>表示全部字母数字的字符集,相当于[A-Za-z0-9]</td><td>\w\w\w</td><td>oX2</td></tr><tr><td>\W</td><td>匹配非单词字符</td><td>a\Wc</td><td>a c</td></tr><tr><td>\s</td><td>表示空格字符(\t,\n,\r,\f,\v)</td><td>a\sc</td><td>a c</td></tr><tr><td>\S</td><td>匹配非空格字符</td><td>\S\Sc</td><td>1bc</td></tr><tr><td>[]</td><td>字符集，对应位置上可以是字符集里的任意字符</td><td>a[def]c</td><td>aec</td></tr><tr><td>[^]</td><td>对字符集当中的内容进行取反</td><td>a[^def]c</td><td>a2c</td></tr><tr><td>[a-z]</td><td>指定一个范围字符集</td><td>a[A-Z]c</td><td>aBc</td></tr><tr><td>*</td><td>匹配前面的字符或者子表达式0次或多次</td><td>a*b</td><td>aaab或b</td></tr><tr><td>+</td><td>匹配前一个字符或子表达式一次或多次</td><td>a+b</td><td>aaab或ab</td></tr><tr><td>?</td><td>匹配前一个字符或子表达式0次或1次重复</td><td>a?b</td><td>ab或b</td></tr><tr><td>{m}</td><td>匹配前一个字符或子表达式</td><td>a{3}b</td><td>aaab</td></tr><tr><td>{m,n}</td><td>匹配前一个字符或子表达式至少m次至n次(如省略m，则匹配0~n次；如省略n，则匹配m至无限次。)</td><td>a{3,5}b和a{3,}</td><td>aaaab和aaaaaab</td></tr><tr><td>^</td><td>匹配字符串的开始，多行内容时匹配每一行的开始</td><td>^abc</td><td>abc</td></tr><tr><td>$</td><td>匹配字符串的结尾，多行内容时匹配每一行的结尾</td><td>abc&amp;</td><td>abc</td></tr><tr><td>\A</td><td>匹配字符串开始位置，忽略多行模式</td><td>\Aabc</td><td>abc</td></tr><tr><td>\Z</td><td>匹配字符串结束位置，忽略多行模式</td><td>abc\Z</td><td>abc</td></tr><tr><td>\b</td><td>匹配一个单词的边界，模式必须位于单词的起始部分，不管单词位于行首或者位于字符串中间</td><td>hello \bworld</td><td>hello world</td></tr><tr><td>\B</td><td>匹配出现在一个单词中间的模式，即与 \b 相反</td><td>he\Bllo</td><td>hello</td></tr><tr><td>(…)</td><td>将被括起来的表达式作为一个分组，可以使用索引单独取出</td><td>(abc)d</td><td>abcd</td></tr><tr><td>(?P&lt;name&gt;…)</td><td>为该分组起一个名字，可以用索引或名字去除该分组</td><td>(?P&lt;id&gt;abc)d</td><td>abcd</td></tr><tr><td>\number</td><td>引用索引为number中的内容</td><td>(abc)d\1</td><td>abcdabc</td></tr><tr><td>(?P=name)</td><td>引用该name分组中的内容</td><td>(?P&lt;id&gt;abc)d(?P=id)</td><td>abcdabc</td></tr><tr><td>(?:…)</td><td>分组的不捕获模式，计算索引时会跳过这个分组</td><td>(?:a)b(c)d\1</td><td>abcdc</td></tr><tr><td>(?iLmsux)</td><td>分组中可以设置模式，iLmsux之中的每个字符代表一个模式,单独介绍</td><td>(?i)abc</td><td>Abc</td></tr><tr><td>(?#…)</td><td>注释，#后面的内容会被忽略</td><td>ab(?#注释)123</td><td>ab123</td></tr><tr><td>(?=…)</td><td>顺序肯定环视，表示所在位置右侧能够匹配括号内正则</td><td>a(?=\d)</td><td>a1最后的结果得到a</td></tr><tr><td>(?!…)</td><td>顺序否定环视，表示所在位置右侧不能匹配括号内正则</td><td>a(?!\w)</td><td>a c最后的结果得到a</td></tr><tr><td>(?&lt;=…)</td><td>逆序肯定环视，表示所在位置左侧能够匹配括号内正则</td><td>1(?&lt;=\w)a</td><td>1a</td></tr><tr><td>(?&lt;!…)</td><td>逆序否定环视，表示所在位置左侧不能匹配括号内正则</td><td>1 (?&lt;!\w)a</td><td>1 a</td></tr><tr><td>(?(id/name)yes&#124;no)</td><td>如果前面的索引为id或者名字为name的分组匹配成功则匹配yes区域的表达式，否则匹配no区域的表达式，no可以省略</td><td>(\d)(?(1)\d&#124;a)</td><td>32</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;特殊符号和字符&quot;&gt;&lt;a href=&quot;#特殊符号和字符&quot; class=&quot;headerlink&quot; title=&quot;特殊符号和字符&quot;&gt;&lt;/a&gt;特殊符号和字符&lt;/h1&gt;&lt;h2 id=&quot;最简单正则表达式&quot;&gt;&lt;a href=&quot;#最简单正则表达式&quot; class=&quot;headerlink&quot; title=&quot;最简单正则表达式&quot;&gt;&lt;/a&gt;最简单正则表达式&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;不使用任何特殊符号，值匹配字符串本身&lt;/p&gt;
&lt;/blockquote&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;正则表达式&lt;/th&gt;
&lt;th&gt;匹配的字符串&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;foo&lt;/td&gt;
&lt;td&gt;foo&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Python&lt;/td&gt;
&lt;td&gt;Python&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://at2008.github.io/tags/Python/"/>
    
      <category term="正则表达式" scheme="https://at2008.github.io/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>清理Visual Studio 2017旧版本离线安装文件</title>
    <link href="https://at2008.github.io/2018/07/28/%E6%B8%85%E7%90%86Visual-Studio-2017%E6%97%A7%E7%89%88%E6%9C%AC%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85%E6%96%87%E4%BB%B6/"/>
    <id>https://at2008.github.io/2018/07/28/清理Visual-Studio-2017旧版本离线安装文件/</id>
    <published>2018-07-27T16:19:22.000Z</published>
    <updated>2018-12-08T15:22:00.611Z</updated>
    
    <content type="html"><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>Visual Studio 2017内容庞大，如果在线安装相当耗时，因此多数情况下采用离线安装方式。比如用下面的命令：</p><pre><code>vs_enterprise.exe --layout F:\Dev\VisualStudio\VS2017Ent --lang zh-CN</code></pre><p>上面的命令将安装包下载到<code>F:\Dev\VisualStudio\VS2017Ent</code>目录下，用户可以使用本地文件离线安装 Visual Studio 2017。但是，当再次执行上面命令更新离线安装包后，旧版本的安装包不会自动删除，导致离线安装包越来越庞大，存在大量无用安装文件。</p><ul><li>下面的代码用来清理旧版本离线安装文件。</li><li>C#语言。</li><li>程序为控制台应用程序。</li><li>Visual Studio 2017 测试通过。</li></ul><a id="more"></a><h2 id="具体代码"><a href="#具体代码" class="headerlink" title="具体代码"></a>具体代码</h2><blockquote><blockquote><p>文件名：DelLegacyFolder.cs</p></blockquote></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">SampleCode</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">DelLegacyFolder</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//string dirPath = @"F:\Dev\VisualStudio\VS2017Ent";</span></span><br><span class="line">                <span class="keyword">string</span> dirPath = <span class="string">@"."</span>;</span><br><span class="line"></span><br><span class="line">                List&lt;<span class="keyword">string</span>&gt; dirs = <span class="keyword">new</span> List&lt;<span class="keyword">string</span>&gt;(Directory.EnumerateDirectories(dirPath));</span><br><span class="line"></span><br><span class="line">                List&lt;<span class="keyword">string</span>&gt; olderFolder = <span class="keyword">new</span> List&lt;<span class="keyword">string</span>&gt;();</span><br><span class="line"></span><br><span class="line">                <span class="comment">//不自行排序，使用系统自己的排序方式</span></span><br><span class="line">                <span class="comment">//dirs.Sort();</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; dirs.Count - <span class="number">1</span>; i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">string</span>[] OlderFolderName = dirs[i].Split(<span class="string">','</span>);</span><br><span class="line">                    <span class="keyword">string</span>[] NewerFolderName = dirs[i + <span class="number">1</span>].Split(<span class="string">','</span>);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> ((OlderFolderName[<span class="number">0</span>] == NewerFolderName[<span class="number">0</span>]) </span><br><span class="line">                        &amp;&amp; (OlderFolderName[<span class="number">1</span>] != NewerFolderName[<span class="number">1</span>]) </span><br><span class="line">                        &amp;&amp; (OlderFolderName.Length == NewerFolderName.Length))</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">bool</span> ifNeedOperation = <span class="literal">false</span>;</span><br><span class="line">                        <span class="keyword">switch</span> (OlderFolderName.Length)</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                                ifNeedOperation = <span class="literal">true</span>;</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                                <span class="keyword">if</span> ((OlderFolderName[<span class="number">2</span>] == NewerFolderName[<span class="number">2</span>]))</span><br><span class="line">                                    ifNeedOperation = <span class="literal">true</span>;</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                                <span class="keyword">if</span> ((OlderFolderName[<span class="number">2</span>] == NewerFolderName[<span class="number">2</span>]) </span><br><span class="line">                                    &amp;&amp; (OlderFolderName[<span class="number">3</span>] == NewerFolderName[<span class="number">3</span>]))</span><br><span class="line">                                    ifNeedOperation = <span class="literal">true</span>;</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            <span class="keyword">default</span>:</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span> (ifNeedOperation)</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="keyword">string</span>[] olderVersion = OlderFolderName[<span class="number">1</span>].Substring(OlderFolderName[<span class="number">1</span>].IndexOf(<span class="string">"="</span>) + <span class="number">1</span>).Split(<span class="string">'.'</span>);</span><br><span class="line">                            <span class="keyword">string</span>[] newerVersion = NewerFolderName[<span class="number">1</span>].Substring(NewerFolderName[<span class="number">1</span>].IndexOf(<span class="string">"="</span>) + <span class="number">1</span>).Split(<span class="string">'.'</span>);</span><br><span class="line">                            <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; olderVersion.Length; x++)</span><br><span class="line">                            &#123;</span><br><span class="line">                                <span class="keyword">if</span> (Int32.Parse(olderVersion[x]) &lt; Int32.Parse(newerVersion[x]))</span><br><span class="line">                                &#123;</span><br><span class="line">                                    Console.ForegroundColor = ConsoleColor.Green;</span><br><span class="line">                                    Console.WriteLine(dirs[i]);</span><br><span class="line">                                    Console.ForegroundColor = ConsoleColor.White;</span><br><span class="line">                                    Console.WriteLine(dirs[i + <span class="number">1</span>]);</span><br><span class="line">                                    olderFolder.Add(dirs[i]);</span><br><span class="line">                                    count += <span class="number">1</span>;</span><br><span class="line">                                    i += <span class="number">1</span>;</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                                <span class="keyword">else</span> <span class="keyword">if</span> (Int32.Parse(olderVersion[x]) &gt; Int32.Parse(newerVersion[x]))</span><br><span class="line">                                &#123;</span><br><span class="line">                                    Console.ForegroundColor = ConsoleColor.White;</span><br><span class="line">                                    Console.WriteLine(dirs[i]);</span><br><span class="line">                                    Console.ForegroundColor = ConsoleColor.Green;</span><br><span class="line">                                    Console.WriteLine(dirs[i + <span class="number">1</span>]);</span><br><span class="line">                                    olderFolder.Add(dirs[i + <span class="number">1</span>]);</span><br><span class="line">                                    count += <span class="number">1</span>;</span><br><span class="line">                                    i += <span class="number">1</span>;</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                Console.ForegroundColor = ConsoleColor.White;</span><br><span class="line">                Console.WriteLine(<span class="string">"总共有 &#123;0&#125; 个旧文件夹，是否删除？ y--删除 n--不删除"</span>, count);</span><br><span class="line">                <span class="keyword">string</span> yesDel = Console.ReadLine().Trim().ToUpper();</span><br><span class="line">                <span class="keyword">if</span> (yesDel == <span class="string">"Y"</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; olderFolder.Count; i++)</span><br><span class="line">                    &#123;</span><br><span class="line">                        Directory.Delete(olderFolder[i], <span class="literal">true</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (UnauthorizedAccessException UAEx)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(UAEx.Message);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (PathTooLongException PathEx)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(PathEx.Message);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(<span class="string">"执行完毕，按任意键退出。"</span>);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>生成的可以执行文件放置在离线安装包文件目录（例如上面命令行所示的F:\Dev\VisualStudio\VS2017Ent）下面，执行程序可看到如下效果：</p><p><img src="https://slowread.cn/images/material/DelLegacyFolder.png" alt="删除旧版本离线安装包"></p><p>编译好的可执行文件： <a href="https://slowread.cn/attachment/DelLegacyFolder.zip" target="_blank" rel="noopener">点击下载</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h2&gt;&lt;p&gt;Visual Studio 2017内容庞大，如果在线安装相当耗时，因此多数情况下采用离线安装方式。比如用下面的命令：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;vs_enterprise.exe --layout F:\Dev\VisualStudio\VS2017Ent --lang zh-CN
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上面的命令将安装包下载到&lt;code&gt;F:\Dev\VisualStudio\VS2017Ent&lt;/code&gt;目录下，用户可以使用本地文件离线安装 Visual Studio 2017。但是，当再次执行上面命令更新离线安装包后，旧版本的安装包不会自动删除，导致离线安装包越来越庞大，存在大量无用安装文件。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;下面的代码用来清理旧版本离线安装文件。&lt;/li&gt;
&lt;li&gt;C#语言。&lt;/li&gt;
&lt;li&gt;程序为控制台应用程序。&lt;/li&gt;
&lt;li&gt;Visual Studio 2017 测试通过。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Visual Studio" scheme="https://at2008.github.io/tags/Visual-Studio/"/>
    
  </entry>
  
  <entry>
    <title>VSCode 字体大小调整</title>
    <link href="https://at2008.github.io/2018/07/13/VSCode%E5%AD%97%E4%BD%93%E5%A4%A7%E5%B0%8F%E8%B0%83%E6%95%B4/"/>
    <id>https://at2008.github.io/2018/07/13/VSCode字体大小调整/</id>
    <published>2018-07-13T11:04:49.000Z</published>
    <updated>2018-08-03T14:43:00.698Z</updated>
    
    <content type="html"><![CDATA[<p>VSCode 默认的菜单、左侧管理器等栏目字体是11px，感觉字体稍小，尤其在暗调主题下，难以识别。可以根据自己的需要修改默认配置文件，得到合适的显示效果。</p><h2 id="修改样式文件修改权限"><a href="#修改样式文件修改权限" class="headerlink" title="修改样式文件修改权限"></a>修改样式文件修改权限</h2><ul><li>找到VSCode工作区配置文件，位于:<code>安装目录\VSCode\resources\app\out\vs\workbench\workbench.main.css</code></li><li>对文件增加修改权限，具体：右键属性–&gt;安全–&gt;编辑(更改权限)–见下图</li></ul><a id="more"></a><p><img src="https://slowread.cn/images/material/workbench.main.css.png" alt="image"></p><h2 id="修改样式文件配置"><a href="#修改样式文件配置" class="headerlink" title="修改样式文件配置"></a>修改样式文件配置</h2><ul><li>打开<code>workbench.main.css</code>文件，搜索/替换所有<code>11px</code>为<code>12px</code>或者自己认为合适的值，这样比较简单，总共有超过30多处</li><li>另外一种方式：菜单-&gt;帮助-&gt;切换开发人员工具，找到需要修改的地方对应的样式表文件内容并修改</li></ul><h2 id="修改后遗症"><a href="#修改后遗症" class="headerlink" title="修改后遗症"></a>修改后遗症</h2><ul><li>VSCdoe 编辑器标题栏会显示<code>[不受支持]</code>，不过不影响使用</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;VSCode 默认的菜单、左侧管理器等栏目字体是11px，感觉字体稍小，尤其在暗调主题下，难以识别。可以根据自己的需要修改默认配置文件，得到合适的显示效果。&lt;/p&gt;
&lt;h2 id=&quot;修改样式文件修改权限&quot;&gt;&lt;a href=&quot;#修改样式文件修改权限&quot; class=&quot;headerlink&quot; title=&quot;修改样式文件修改权限&quot;&gt;&lt;/a&gt;修改样式文件修改权限&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;找到VSCode工作区配置文件，位于:&lt;code&gt;安装目录\VSCode\resources\app\out\vs\workbench\workbench.main.css&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;对文件增加修改权限，具体：右键属性–&amp;gt;安全–&amp;gt;编辑(更改权限)–见下图&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="VSCode" scheme="https://at2008.github.io/tags/VSCode/"/>
    
      <category term="Visual Studio" scheme="https://at2008.github.io/tags/Visual-Studio/"/>
    
      <category term="Visual Studio Code" scheme="https://at2008.github.io/tags/Visual-Studio-Code/"/>
    
      <category term="字体" scheme="https://at2008.github.io/tags/%E5%AD%97%E4%BD%93/"/>
    
  </entry>
  
  <entry>
    <title>Python 学习笔记</title>
    <link href="https://at2008.github.io/2018/07/11/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://at2008.github.io/2018/07/11/Python学习笔记/</id>
    <published>2018-07-11T09:14:52.000Z</published>
    <updated>2018-08-02T09:58:15.334Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基础事项"><a href="#基础事项" class="headerlink" title="基础事项"></a>基础事项</h2><h3 id="变量命名"><a href="#变量命名" class="headerlink" title="变量命名"></a>变量命名</h3><ul><li>变量名尽量<strong>小写</strong></li><li>类名首字母<strong>大写</strong></li></ul><h3 id="括号与数据类型"><a href="#括号与数据类型" class="headerlink" title="括号与数据类型"></a>括号与数据类型</h3><table><thead><tr><th>括号</th><th>数据类型</th><th>例子</th></tr></thead><tbody><tr><td>[]</td><td>列表</td><td>[123,’abc’,1.23]</td></tr><tr><td>()</td><td>元组</td><td>(1,2,3,4))</td></tr><tr><td>{}</td><td>字典</td><td>{‘name’:’wa’,’age’:20}</td></tr></tbody></table><a id="more"></a><h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><ul><li><strong>=</strong> 操作符代表赋值，例如：x = 10，执行结果，x 赋值为 10；</li><li><strong>==</strong> 操作符代表等于判断，例如：1 == 2，执行结果为 False。</li></ul><h2 id="Python-2-和-3-差异"><a href="#Python-2-和-3-差异" class="headerlink" title="Python 2 和 3 差异"></a>Python 2 和 3 差异</h2><ul><li><strong>print</strong> 在3中不是一个保留字，也不是一条语句，而是一个内置的函数调用。</li></ul><h2 id="python交互模式下清屏"><a href="#python交互模式下清屏" class="headerlink" title="python交互模式下清屏"></a>python交互模式下清屏</h2><p>在Linux shell中，清屏操作是clear；在Win cmd中，清屏操作是cls。</p><p>在交互模式中使用python，如果要清屏，可以import os，通过os.system()来调用系统命令clear或者cls来实现清屏。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> os</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.system(<span class="string">'clear'</span>)</span><br></pre></td></tr></table></figure><p>但是此时shell中的状态是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><!-- more --><p>首行会有一个0。这个0实际上是os.system()的返回值，0是成功，非零即error code（具体os.system()与命令返回值的对应关系可参考<a href="http://xingyunbaijunwei.blog.163.com/blog/static/76538067201341342330373/" target="_blank" rel="noopener">这里</a>）。</p><p> 可以存储这个返回值，不让其打印出来：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> os</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t = os.system(<span class="string">'clear'</span>)</span><br></pre></td></tr></table></figure><p>这样就是真正的清屏了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h2 id="python下编译-py-为-pyc"><a href="#python下编译-py-为-pyc" class="headerlink" title="python下编译 .py 为 .pyc"></a>python下编译 .py 为 .pyc</h2><p>生成单个pyc文件：<br>命令：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python -m py_compile file.py</span><br><span class="line">python -m py_compile /root/src/&#123;file1,file2&#125;.py</span><br></pre></td></tr></table></figure><p>脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> py_compile</span><br><span class="line">py_compile.compile(<span class="string">'path'</span>) //path是包括.py文件名的路径</span><br></pre></td></tr></table></figure><p>批量生成pyc文件：<br>命令：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m compileall /root/src/</span><br></pre></td></tr></table></figure><p>脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> compileall</span><br><span class="line">compileall.compile_dir(<span class="string">r'H:\game'</span>)</span><br></pre></td></tr></table></figure><blockquote><p>生成pyc文件后删除原py文件，直接执行pyc文件（方法同py文件）</p></blockquote><h2 id="Python语句和语法"><a href="#Python语句和语法" class="headerlink" title="Python语句和语法"></a>Python语句和语法</h2><h3 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h3><table><thead><tr><th>语句</th><th>角色</th><th>例子</th></tr></thead><tbody><tr><td>赋值</td><td>创建引用值</td><td>a,b,c = ‘good’,’bad’,’ugly’</td></tr><tr><td>调用</td><td>执行函数</td><td>log.write(‘hello,world’)</td></tr><tr><td>打印调用</td><td>打印对象</td><td>print(“hello world”)</td></tr><tr><td>if/elif/else</td><td>选择动作</td><td>if ‘print’ in text: print(text)</td></tr><tr><td>for/else</td><td>序列迭代</td><td>for x in mylist: print(x)</td></tr><tr><td>while/else</td><td>一般循环</td><td>while x&gt;y: print(“hello”)</td></tr><tr><td>pass</td><td>空占位符</td><td>while True: pass</td></tr><tr><td>break</td><td>循环退出</td><td>while True: <br>&nbsp;&nbsp;&nbsp; if exittest(): break</td></tr><tr><td>continue</td><td>继续下一次循环</td><td>while True: <br>&nbsp;&nbsp;&nbsp; if skiptest(): continue</td></tr><tr><td>def</td><td>函数和方法</td><td>def f(a,b,c=1,*d):<br>&nbsp;&nbsp;&nbsp; print(a+b+c+d[0])</td></tr><tr><td>return</td><td>函数返回结果</td><td>def f(a,b,c=1,*d):<br>&nbsp;&nbsp;&nbsp; return a+b+c+d[0]</td></tr><tr><td>yield</td><td>生成器表达式</td><td>def gen(n):<br>&nbsp;&nbsp;&nbsp; for i in n:yield i * 2</td></tr><tr><td>global</td><td>命名空间，全局变量</td><td>x = ‘old’<br>def function(x):<br>&nbsp;&nbsp;&nbsp; global x,y,;x = ‘new’</td></tr><tr><td>nonlocal</td><td>局部变量（python3.0+）</td><td>def outer():<br>&nbsp;&nbsp;&nbsp; x = ‘old’<br>&nbsp;&nbsp;&nbsp; def function():<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; nonlocalx;n=’new’</td></tr><tr><td>import</td><td>模块访问，导入</td><td>import sys</td></tr><tr><td>from</td><td>模块属性访问</td><td>from sys import stdin</td></tr><tr><td>class</td><td>创建对象</td><td>class Subclass(Superclass):<br>&nbsp;&nbsp;&nbsp; staticData = []<br>&nbsp;&nbsp;&nbsp; def method(self): pass</td></tr><tr><td>try/except/finally</td><td>捕捉异常</td><td>try:<br>&nbsp;&nbsp;&nbsp; action()<br>except:<br>&nbsp;&nbsp;&nbsp; print(‘action error’)</td></tr><tr><td>raise</td><td>触发异常</td><td>raise EbdSearch(location)</td></tr><tr><td>assert</td><td>调试检查</td><td>assert x&gt;y,’x&nbsp; too small’</td></tr><tr><td>with/as</td><td>环境管理器</td><td>with open(‘data’) as myfile:<br>&nbsp;&nbsp;&nbsp; process(myfile)</td></tr><tr><td>del</td><td>删除引用</td><td>del data[k]<br>del data[i:j]<br>del obj.attr<br>del variable</td></tr></tbody></table><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><blockquote><blockquote><p>与其他语言的比较</p></blockquote></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( x &gt; y) &#123;</span><br><span class="line">    x = <span class="number">1</span>;</span><br><span class="line">    y = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面可能是 c、c++、Java 或者其他语言语句。下面是与之等价的 Python 语言语句：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> x &gt; y:       <span class="comment"># 可以没有 ()，也可以有</span></span><br><span class="line">    x = <span class="number">1</span></span><br><span class="line">    y = <span class="number">2</span></span><br></pre></td></tr></table></figure><h2 id="数学操作符"><a href="#数学操作符" class="headerlink" title="数学操作符"></a>数学操作符</h2><blockquote><blockquote><p>优先级从高到低</p></blockquote></blockquote><table><thead><tr><th>操作符</th><th>操作</th><th>例子</th><th>求值为</th></tr></thead><tbody><tr><td>**</td><td>指数</td><td>2**3</td><td>8</td></tr><tr><td>%</td><td>取模/取余数</td><td>22%8</td><td>6</td></tr><tr><td>//</td><td>整除/商数取整</td><td>22//8</td><td>2</td></tr><tr><td>/</td><td>除法</td><td>22/8</td><td>2.75</td></tr><tr><td>-</td><td>减法</td><td>5-2</td><td>3</td></tr><tr><td>+</td><td>加法</td><td>2+2</td><td>4</td></tr></tbody></table><h2 id="增强赋值操作符"><a href="#增强赋值操作符" class="headerlink" title="增强赋值操作符"></a>增强赋值操作符</h2><blockquote><p>针对+、-、*、/和%，都有增强的赋值操作符，如下表：</p></blockquote><table><thead><tr><th>增强的赋值语句</th><th>等价的赋值语句</th></tr></thead><tbody><tr><td>spam += 1</td><td>spam = spam+1</td></tr><tr><td>spam -= 1</td><td>spam = spam-1</td></tr><tr><td>spam /= 1</td><td>spam = spam/1</td></tr><tr><td>spam %= 1</td><td>spam = spam%1</td></tr></tbody></table><h2 id="转义操作符"><a href="#转义操作符" class="headerlink" title="转义操作符"></a>转义操作符</h2><table><thead><tr><th>转义字符</th><th>描述</th></tr></thead><tbody><tr><td>\(在行尾时)</td><td>续行符</td></tr><tr><td>\\</td><td>反斜杠符号</td></tr><tr><td>\‘</td><td>单引号</td></tr><tr><td>\“</td><td>双引号</td></tr><tr><td>\a</td><td>响铃</td></tr><tr><td>\b</td><td>退格(Backspace)</td></tr><tr><td>\e</td><td>转义</td></tr><tr><td>\000</td><td>空</td></tr><tr><td>\n</td><td>换行</td></tr><tr><td>\v</td><td>纵向制表符</td></tr><tr><td>\t</td><td>横向制表符</td></tr><tr><td>\r</td><td>回车</td></tr><tr><td>\f</td><td>换页</td></tr><tr><td>\oyy</td><td>八进制数，yy代表的字符，例如：\o12代表换行</td></tr><tr><td>\xyy</td><td>十六进制数，yy代表的字符，例如：\x0a代表换行</td></tr><tr><td>\other</td><td>其它的字符以普通格式输出</td></tr></tbody></table><h2 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h2><table><thead><tr><th>表达式</th><th>描述</th></tr></thead><tbody><tr><td>x == y</td><td>x等于y</td></tr><tr><td>x !=y</td><td>x不等于y</td></tr><tr><td>x &lt; y</td><td>x小于y</td></tr><tr><td>x &gt;= y</td><td>x大于或等于y</td></tr><tr><td>x is y</td><td>x和y是同一个对象</td></tr><tr><td>x is not y</td><td>x和y是不同的对象</td></tr><tr><td>x in y</td><td>x是容器（如序列）y的成员</td></tr><tr><td>x not in y</td><td>x不是容器（如序列）y的成员</td></tr></tbody></table><blockquote><p><code>x not in y</code> 等同于 <code>not x in y</code>,前者更符合常识，与其他语言一致</p></blockquote><h2 id="True-和-False"><a href="#True-和-False" class="headerlink" title="True 和 False"></a>True 和 False</h2><blockquote><blockquote><p>注意，首字母大写。在Python中任何对象都可判断其布尔值，除了<code>0</code>、<code>0.0</code>、<code>&#39;&#39;</code>、<code>None</code>和所有<code>空的序列与集合</code>（列表，字典，集合）布尔值为<code>False</code>之外，其它的都为<code>True</code>，我们可以使用函数<code>bool()</code>进行判别：</p></blockquote></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>bool(<span class="string">'-1'</span>)</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bool(<span class="number">-1</span>)</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bool(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bool(<span class="string">''</span>)</span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bool(<span class="keyword">None</span>)</span><br><span class="line"><span class="keyword">False</span></span><br></pre></td></tr></table></figure><h2 id="in-和-not-in-操作符"><a href="#in-和-not-in-操作符" class="headerlink" title="in 和 not in 操作符"></a>in 和 not in 操作符</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'bat'</span> <span class="keyword">in</span> [<span class="string">'cat'</span>,<span class="string">'bat'</span>,<span class="string">'rat'</span>,<span class="string">'elephant'</span>]</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'dog'</span> <span class="keyword">in</span> [<span class="string">'cat'</span>,<span class="string">'bat'</span>,<span class="string">'rat'</span>,<span class="string">'elephant'</span>]</span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'dog'</span> <span class="keyword">not</span> <span class="keyword">in</span> [<span class="string">'cat'</span>,<span class="string">'bat'</span>,<span class="string">'rat'</span>,<span class="string">'elephant'</span>]</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">not</span> <span class="string">'dog'</span> <span class="keyword">in</span> [<span class="string">'cat'</span>,<span class="string">'bat'</span>,<span class="string">'rat'</span>,<span class="string">'elephant'</span>]</span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure><h2 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = <span class="number">6</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">if</span> x &gt; <span class="number">10</span>:</span><br><span class="line"><span class="meta">... </span>    print(<span class="string">'&gt;10'</span>)</span><br><span class="line"><span class="meta">... </span><span class="keyword">elif</span> x == <span class="number">10</span>:</span><br><span class="line"><span class="meta">... </span>    print(<span class="string">'=10'</span>)</span><br><span class="line"><span class="meta">... </span><span class="keyword">else</span>:</span><br><span class="line"><span class="meta">... </span>    print(<span class="string">'&lt;10'</span>)</span><br><span class="line">...</span><br><span class="line">&lt;<span class="number">10</span></span><br></pre></td></tr></table></figure><h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><h3 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环"></a>for 循环</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> c <span class="keyword">in</span> <span class="string">'spam'</span>:</span><br><span class="line"><span class="meta">... </span>    print(c.upper())</span><br><span class="line">...</span><br><span class="line">S</span><br><span class="line">P</span><br><span class="line">A</span><br><span class="line">M</span><br></pre></td></tr></table></figure><h3 id="嵌套循环"><a href="#嵌套循环" class="headerlink" title="嵌套循环"></a>嵌套循环</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">10</span>):</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">10</span>):</span><br><span class="line"><span class="meta">... </span>        print(<span class="string">'&#123;&#125; X &#123;&#125; = &#123;&#125;'</span>.format(i,j,i*j))</span><br><span class="line">...</span><br><span class="line"><span class="number">1</span> X <span class="number">1</span> = <span class="number">1</span></span><br><span class="line"><span class="number">1</span> X <span class="number">2</span> = <span class="number">2</span></span><br><span class="line"><span class="number">1</span> X <span class="number">3</span> = <span class="number">3</span></span><br><span class="line">...</span><br><span class="line"><span class="number">9</span> X <span class="number">9</span> = <span class="number">81</span></span><br></pre></td></tr></table></figure><h3 id="while-循环"><a href="#while-循环" class="headerlink" title="while 循环"></a>while 循环</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x=<span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">while</span> x&gt;<span class="number">0</span>:</span><br><span class="line"><span class="meta">... </span>    print(<span class="string">'spam!'</span> * x)</span><br><span class="line"><span class="meta">... </span>    x-=<span class="number">1</span></span><br><span class="line">...</span><br><span class="line">spam!spam!spam!spam!</span><br><span class="line">spam!spam!spam!</span><br><span class="line">spam!spam!</span><br><span class="line">spam!</span><br></pre></td></tr></table></figure><h3 id="break-和-continue"><a href="#break-和-continue" class="headerlink" title="break 和 continue"></a>break 和 continue</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x=<span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">while</span> x &gt; <span class="number">0</span>:</span><br><span class="line"><span class="meta">... </span>    x -= <span class="number">1</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">if</span> x == <span class="number">4</span>:</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">continue</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">elif</span> x == <span class="number">1</span>:</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">break</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">else</span>:</span><br><span class="line"><span class="meta">... </span>        print(<span class="string">'spam!'</span> * x)</span><br><span class="line">...</span><br><span class="line">spam!spam!spam!</span><br><span class="line">spam!spam!</span><br></pre></td></tr></table></figure><h2 id="局部和全局作用域"><a href="#局部和全局作用域" class="headerlink" title="局部和全局作用域"></a>局部和全局作用域</h2><h3 id="局部变量不能在全局作用域内使用"><a href="#局部变量不能在全局作用域内使用" class="headerlink" title="局部变量不能在全局作用域内使用"></a>局部变量不能在全局作用域内使用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">spam</span><span class="params">()</span>:</span></span><br><span class="line">    eggs = <span class="number">222</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">spam()</span><br><span class="line">print(eggs)</span><br></pre></td></tr></table></figure><blockquote><p>输出结果</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"g:/WaProj/PyHello/test.py"</span>, line <span class="number">20</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    print(eggs)</span><br><span class="line">NameError: name <span class="string">'eggs'</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br></pre></td></tr></table></figure><h3 id="局部作用域不能使用其他局部作用域内的变量"><a href="#局部作用域不能使用其他局部作用域内的变量" class="headerlink" title="局部作用域不能使用其他局部作用域内的变量"></a>局部作用域不能使用其他局部作用域内的变量</h3><blockquote><p>例子</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">spam</span><span class="params">()</span>:</span></span><br><span class="line">    eggs = <span class="number">99</span></span><br><span class="line">    bacon()</span><br><span class="line">    print(eggs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bacon</span><span class="params">()</span>:</span></span><br><span class="line">    ham = <span class="number">101</span></span><br><span class="line">    eggs = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">spam()</span><br></pre></td></tr></table></figure><blockquote><p>输出结果</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">99</span></span><br></pre></td></tr></table></figure><h3 id="全局变量可以在局部作用域中读取"><a href="#全局变量可以在局部作用域中读取" class="headerlink" title="全局变量可以在局部作用域中读取"></a>全局变量可以在局部作用域中读取</h3><ul><li>例子，局部作用域中<strong>不</strong>赋值变量，则使用<strong>全局变量</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">spam</span><span class="params">()</span>:</span></span><br><span class="line">    print(eggs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">eggs = <span class="number">42</span></span><br><span class="line">spam()</span><br><span class="line">print(eggs)</span><br></pre></td></tr></table></figure><blockquote><p>输出结果</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">42</span></span><br><span class="line"><span class="number">42</span></span><br></pre></td></tr></table></figure><ul><li>例子，局部作用域中赋值变量，则使用<strong>局部变量</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">spam</span><span class="params">()</span>:</span></span><br><span class="line">    eggs = <span class="number">11</span></span><br><span class="line">    print(eggs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">eggs = <span class="number">42</span></span><br><span class="line">spam()</span><br><span class="line">print(eggs)</span><br></pre></td></tr></table></figure><blockquote><p>输出结果</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">11</span></span><br><span class="line"><span class="number">42</span></span><br></pre></td></tr></table></figure><ul><li>例子，局部作用域中<strong>先</strong>使用变量，<strong>之后</strong>定义（赋值）变量，则会<strong>出错</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">spam</span><span class="params">()</span>:</span></span><br><span class="line">    print(eggs)</span><br><span class="line">    eggs = <span class="number">11</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">eggs = <span class="number">42</span></span><br><span class="line">spam()</span><br><span class="line">print(eggs)</span><br></pre></td></tr></table></figure><blockquote><p>输出结果</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"g:/WaProj/PyHello/test.py"</span>, line <span class="number">7</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    spam()</span><br><span class="line">  File <span class="string">"g:/WaProj/PyHello/test.py"</span>, line <span class="number">2</span>, <span class="keyword">in</span> spam</span><br><span class="line">    print(eggs)</span><br><span class="line">UnboundLocalError: local variable <span class="string">'eggs'</span> referenced before assignment</span><br></pre></td></tr></table></figure><blockquote><p>因为 spam 函数中有针对 eggs 的赋值语句，因此 Python 认为 eggs 是局部变量。但 print(eggs)的执行在 eggs 赋值之前，局部变量 eggs 并不存在，因此出错。</p></blockquote><h2 id="global-语句"><a href="#global-语句" class="headerlink" title="global 语句"></a>global 语句</h2><blockquote><p>例子，在函数内用 <strong>global</strong> 修饰符指定使用全局变量</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">spam</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> eggs</span><br><span class="line">    eggs = <span class="string">'spam'</span></span><br><span class="line"></span><br><span class="line">eggs = <span class="string">'global'</span></span><br><span class="line">spam()</span><br><span class="line">print(eggs)</span><br></pre></td></tr></table></figure><blockquote><p>输出结果</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spam</span><br></pre></td></tr></table></figure><h2 id="异常处理-try"><a href="#异常处理-try" class="headerlink" title="异常处理 try"></a>异常处理 try</h2><blockquote><p>例子1，用 try 和 except 语句处理异常</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">spam</span><span class="params">(divideBy)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">42</span> / divideBy</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    print(spam(<span class="number">2</span>))</span><br><span class="line">    print(spam(<span class="number">12</span>))</span><br><span class="line">    print(spam(<span class="number">0</span>))</span><br><span class="line">    print(spam(<span class="number">1</span>))</span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">    print(<span class="string">'Error: Invalid argument.'</span>)</span><br></pre></td></tr></table></figure><blockquote><p>输出结果</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">21.0</span></span><br><span class="line"><span class="number">3.5</span></span><br><span class="line">Error: Invalid argument.</span><br></pre></td></tr></table></figure><blockquote><p>例子2，用 try 和 except 语句处理异常</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">spam</span><span class="params">(divideBy)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">42</span> / divideBy</span><br><span class="line">    <span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">        print(<span class="string">'Error:无效参数'</span>)</span><br><span class="line"></span><br><span class="line">print(spam(<span class="number">2</span>))</span><br><span class="line">print(spam(<span class="number">12</span>))</span><br><span class="line">print(spam(<span class="number">0</span>))</span><br><span class="line">print(spam(<span class="number">1</span>))</span><br></pre></td></tr></table></figure><blockquote><p>输出结果</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">21.0</span></span><br><span class="line"><span class="number">3.5</span></span><br><span class="line">Error:无效参数</span><br><span class="line"><span class="keyword">None</span></span><br><span class="line"><span class="number">42.0</span></span><br></pre></td></tr></table></figure><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><h3 id="字符串格式化"><a href="#字符串格式化" class="headerlink" title="字符串格式化"></a>字符串格式化</h3><ul><li>表达式形式 %</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'%s,bbb,%s'</span> % (<span class="string">'aaa'</span>,<span class="string">'ccc'</span>)<span class="comment">#格式化表达式</span></span><br><span class="line"><span class="string">'aaa,bbb,ccc'</span></span><br></pre></td></tr></table></figure><ul><li>字符串方法调用 str.format()</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'&#123;0&#125;,bbb,&#123;1&#125;'</span>.format(<span class="string">'aaa'</span>,<span class="string">'ccc'</span>)<span class="comment">#格式化方法(2.6，3.0)</span></span><br><span class="line"><span class="string">'aaa,bbb,bbb'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'&#123;1&#125;,bbb,&#123;0&#125;'</span>.format(<span class="string">'aaa'</span>,<span class="string">'ccc'</span>)   <span class="comment"># 位置变化</span></span><br><span class="line"><span class="string">'ccc,bbb,aaa'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'&#123;&#125;,bbb,&#123;&#125;'</span>.format(<span class="string">'aaa'</span>,<span class="string">'ccc'</span>)</span><br><span class="line"><span class="string">'aaa,bbb,ccc'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'&#123;&#125;,bbb,&#123;c:.2f&#125;'</span>.format(<span class="string">'aaa'</span>,c=<span class="number">2</span>)<span class="comment">#:f 小数表示为定点数</span></span><br><span class="line"><span class="string">'aaa,bbb,2.00'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'&#123;&#125;,bbb,&#123;c:b&#125;'</span>.format(<span class="string">'aaa'</span>,c=<span class="number">55</span>)<span class="comment">#:b 整数表示为二进制数</span></span><br><span class="line"><span class="string">'aaa,bbb,110111'</span></span><br></pre></td></tr></table></figure><ul><li>f 字符串 - 在字符串前加上 f</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=<span class="string">'Python'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">f'Hello <span class="subst">&#123;a&#125;</span>'</span></span><br><span class="line"><span class="string">'Hello Python'</span></span><br></pre></td></tr></table></figure><ul><li>模板字符串</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> string <span class="keyword">import</span> Template</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Template(<span class="string">'Hello $who and $terminal'</span>).substitute(who=<span class="string">'Python'</span>,terminal=<span class="string">'Cmder'</span>)</span><br><span class="line"><span class="string">'Hello Python and Cmder'</span></span><br></pre></td></tr></table></figure><h3 id="联合与拆分"><a href="#联合与拆分" class="headerlink" title="联合与拆分"></a>联合与拆分</h3><ul><li>联合 join()</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'/'</span>.join([<span class="string">''</span>,<span class="string">'usr'</span>,<span class="string">'bin'</span>,<span class="string">'env'</span>])</span><br><span class="line"><span class="string">'/usr/bin/env'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'/'</span>.join((<span class="string">''</span>,<span class="string">'usr'</span>,<span class="string">'bin'</span>,<span class="string">'env'</span>))</span><br><span class="line"><span class="string">'/usr/bin/env'</span></span><br></pre></td></tr></table></figure><ul><li>拆分 split</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'/usr/bin/env'</span>.split(<span class="string">'/'</span>)</span><br><span class="line">[<span class="string">''</span>, <span class="string">'usr'</span>, <span class="string">'bin'</span>, <span class="string">'env'</span>]</span><br></pre></td></tr></table></figure><h2 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s=<span class="string">'12345654321'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s[<span class="number">0</span>:<span class="number">1</span>]</span><br><span class="line"><span class="string">'1'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s[<span class="number">0</span>:<span class="number">2</span>]</span><br><span class="line"><span class="string">'12'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s[<span class="number">1</span>:<span class="number">2</span>]</span><br><span class="line"><span class="string">'2'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s[<span class="number">1</span>:<span class="number">3</span>]</span><br><span class="line"><span class="string">'23'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s[<span class="number">-1</span>]</span><br><span class="line"><span class="string">'1'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s[<span class="number">-5</span>:]</span><br><span class="line"><span class="string">'54321'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s[:<span class="number">-5</span>]</span><br><span class="line"><span class="string">'123456'</span></span><br></pre></td></tr></table></figure><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h3 id="创建数值列表-range"><a href="#创建数值列表-range" class="headerlink" title="创建数值列表 range()"></a>创建数值列表 range()</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>range(<span class="number">1</span>,<span class="number">5</span>)</span><br><span class="line">range(<span class="number">1</span>, <span class="number">5</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(range(<span class="number">1</span>,<span class="number">5</span>))</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br></pre></td></tr></table></figure><h3 id="遍历列表"><a href="#遍历列表" class="headerlink" title="遍历列表"></a>遍历列表</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> v <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">5</span>):</span><br><span class="line"><span class="meta">... </span>    print(v)</span><br><span class="line">...</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r=[]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> v <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">5</span>):</span><br><span class="line"><span class="meta">... </span>    r.append(v**<span class="number">2</span>)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(r)</span><br><span class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>]</span><br></pre></td></tr></table></figure><h3 id="列表解析"><a href="#列表解析" class="headerlink" title="列表解析"></a>列表解析</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>[v**<span class="number">2</span> <span class="keyword">for</span> v <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">5</span>)]</span><br><span class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>]</span><br></pre></td></tr></table></figure><h3 id="列表简单计算统计"><a href="#列表简单计算统计" class="headerlink" title="列表简单计算统计"></a>列表简单计算统计</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>r=<span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> v <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">5</span>):</span><br><span class="line"><span class="meta">... </span>    r+=v</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r</span><br><span class="line"><span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sum(range(<span class="number">1</span>,<span class="number">5</span>))</span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>min(range(<span class="number">1</span>,<span class="number">5</span>))</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>max(range(<span class="number">1</span>,<span class="number">5</span>))</span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure><h3 id="多重赋值"><a href="#多重赋值" class="headerlink" title="多重赋值"></a>多重赋值</h3><blockquote><p>一般方式</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>cat = [<span class="string">'fat'</span>,<span class="string">'black'</span>,<span class="string">'looud'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>size = cat[<span class="number">0</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>color = cat[<span class="number">1</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>disposition = cat[<span class="number">2</span>]</span><br></pre></td></tr></table></figure><blockquote><p>多重赋值方式</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>cat = [<span class="string">'fat'</span>,<span class="string">'black'</span>,<span class="string">'looud'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>size,color,disposition = cat</span><br></pre></td></tr></table></figure><h3 id="用-del-删除列表值"><a href="#用-del-删除列表值" class="headerlink" title="用 del 删除列表值"></a>用 del 删除列表值</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>spam=[<span class="string">'cat'</span>,<span class="string">'bat'</span>,<span class="string">'rat'</span>,<span class="string">'elephant'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> spam[<span class="number">2</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>spam</span><br><span class="line">[<span class="string">'cat'</span>, <span class="string">'bat'</span>, <span class="string">'elephant'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> spam[<span class="number">2</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>spam</span><br><span class="line">[<span class="string">'cat'</span>, <span class="string">'bat'</span>]</span><br></pre></td></tr></table></figure><h3 id="用-remove-方法删除列表值"><a href="#用-remove-方法删除列表值" class="headerlink" title="用 remove 方法删除列表值"></a>用 remove 方法删除列表值</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>cat = [<span class="string">'fat'</span>,<span class="string">'black'</span>,<span class="string">'looud'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>cat.remove(<span class="string">'black'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>cat</span><br><span class="line">[<span class="string">'fat'</span>, <span class="string">'looud'</span>]</span><br></pre></td></tr></table></figure><blockquote><p>如果该值在列表中多次出现，只删除第一个。</p></blockquote><h2 id="元组-tuple"><a href="#元组-tuple" class="headerlink" title="元组 tuple"></a>元组 tuple</h2><p>元组与列表几乎一样，区别在于：1.元组用 ()，列表用[]。2.元组和字符串一样，不可改变。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>eggs=(<span class="string">'hello'</span>,<span class="number">42</span>,<span class="number">0.5</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>eggs</span><br><span class="line">(<span class="string">'hello'</span>, <span class="number">42</span>, <span class="number">0.5</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>eggs[<span class="number">0</span>]</span><br><span class="line"><span class="string">'hello'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>eggs[<span class="number">1</span>:<span class="number">3</span>]</span><br><span class="line">(<span class="number">42</span>, <span class="number">0.5</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>len(eggs)</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><blockquote><p>如果元组中只有一个值，需要在该值后面跟上一个逗号，表明这是一个元组，比如：</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>type((<span class="string">'hello'</span>,))</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">tuple</span>'&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">type</span><span class="params">(<span class="params">(<span class="string">'hello'</span>)</span>)</span></span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> '<span class="title">str</span>'&gt;</span></span><br></pre></td></tr></table></figure><h2 id="用-list-和-tuple-函数转换类型"><a href="#用-list-和-tuple-函数转换类型" class="headerlink" title="用 list() 和 tuple() 函数转换类型"></a>用 list() 和 tuple() 函数转换类型</h2><p>如同 str(12) 将返回 ‘12’ 类似，list() 和 tupel() 返回列表和元组类型。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>list((<span class="string">'hello'</span>,<span class="number">42</span>,<span class="number">0.5</span>))</span><br><span class="line">[<span class="string">'hello'</span>, <span class="number">42</span>, <span class="number">0.5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tuple([<span class="string">'hello'</span>,<span class="number">42</span>,<span class="number">0.5</span>])</span><br><span class="line">(<span class="string">'hello'</span>, <span class="number">42</span>, <span class="number">0.5</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(<span class="string">'hello'</span>)</span><br><span class="line">[<span class="string">'h'</span>, <span class="string">'e'</span>, <span class="string">'l'</span>, <span class="string">'l'</span>, <span class="string">'o'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tuple(<span class="string">'hello'</span>)</span><br><span class="line">(<span class="string">'h'</span>, <span class="string">'e'</span>, <span class="string">'l'</span>, <span class="string">'l'</span>, <span class="string">'o'</span>)</span><br></pre></td></tr></table></figure><h2 id="引用与-copy-、-deepcopy"><a href="#引用与-copy-、-deepcopy" class="headerlink" title="引用与 copy() 、 deepcopy()"></a>引用与 copy() 、 deepcopy()</h2><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><ul><li>对字符串和数值进行引用赋值时，直接复制的内容，即在内从中重新分配了内存空间，用来存放新的对象：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>spam=<span class="string">'a'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>cheese=<span class="number">11</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>cheese=spam</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>spam=<span class="number">100</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>spam</span><br><span class="line"><span class="number">100</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>cheese</span><br><span class="line"><span class="string">'a'</span></span><br></pre></td></tr></table></figure><ul><li>列表引用赋值时，指向的是对象所在的内存地址，因此指向的内容是一致的，如下所示：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>spam=[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>cheese=spam</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>cheese[<span class="number">1</span>]=<span class="string">'hi'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>spam</span><br><span class="line">[<span class="number">0</span>, <span class="string">'hi'</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>cheese</span><br><span class="line">[<span class="number">0</span>, <span class="string">'hi'</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>spam[<span class="number">3</span>]=<span class="string">'ah'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>spam</span><br><span class="line">[<span class="number">0</span>, <span class="string">'hi'</span>, <span class="number">2</span>, <span class="string">'ah'</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>cheese</span><br><span class="line">[<span class="number">0</span>, <span class="string">'hi'</span>, <span class="number">2</span>, <span class="string">'ah'</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br></pre></td></tr></table></figure><h3 id="coyp-和-deepcopy"><a href="#coyp-和-deepcopy" class="headerlink" title="coyp() 和 deepcopy()"></a>coyp() 和 deepcopy()</h3><ul><li>copy() 不是简单引用，而是分配新的内存地址给新变量并赋值</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>spam = list(<span class="string">'ABCD'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>spam</span><br><span class="line">[<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'D'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>cheese = copy.copy(spam)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>cheese[<span class="number">1</span>] = <span class="number">22</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>cheese</span><br><span class="line">[<span class="string">'A'</span>, <span class="number">22</span>, <span class="string">'C'</span>, <span class="string">'D'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>spam</span><br><span class="line">[<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'D'</span>]</span><br></pre></td></tr></table></figure><ul><li>deepcopy()深拷贝，相对于copy()的浅拷贝(shallow copy)，如果要复制的列表中包含了列表，就用copy.deepcopy()。</li></ul><h2 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h2><h3 id="创建字典"><a href="#创建字典" class="headerlink" title="创建字典"></a>创建字典</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 常见方式</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d=&#123;<span class="string">'name'</span>:<span class="string">'wa'</span>,<span class="string">'age'</span>:<span class="number">20</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d</span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'wa'</span>, <span class="string">'age'</span>: <span class="number">20</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 另一种创建方式</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d=&#123;&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d[<span class="string">'name'</span>]=<span class="string">'wa'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d[<span class="string">'age'</span>]=<span class="number">20</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d</span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'wa'</span>, <span class="string">'age'</span>: <span class="number">20</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># dict() 函数</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dict([(<span class="string">'name'</span>,<span class="string">'wa'</span>),(<span class="string">'age'</span>,<span class="number">20</span>)])<span class="comment"># []可以</span></span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'wa'</span>, <span class="string">'age'</span>: <span class="number">20</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dict(&#123;(<span class="string">'name'</span>,<span class="string">'wa'</span>),(<span class="string">'age'</span>,<span class="number">20</span>)&#125;)<span class="comment"># &#123;&#125;也可以</span></span><br><span class="line">&#123;<span class="string">'age'</span>: <span class="number">20</span>, <span class="string">'name'</span>: <span class="string">'wa'</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="字典使用"><a href="#字典使用" class="headerlink" title="字典使用"></a>字典使用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d=&#123;<span class="string">'name'</span>:<span class="string">'wa'</span>,<span class="string">'age'</span>:<span class="number">20</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d[<span class="string">'name'</span>]</span><br><span class="line"><span class="string">'wa'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d[<span class="string">'name'</span>] + <span class="string">' '</span> + str(d[<span class="string">'age'</span>]) + <span class="string">' 岁了！'</span></span><br><span class="line"><span class="string">'wa 20 岁了！'</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h3 id="遍历键–值"><a href="#遍历键–值" class="headerlink" title="遍历键–值"></a>遍历键–值</h3><ul><li>键值对 items()</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d=&#123;<span class="string">'name'</span>:<span class="string">'wz'</span>,<span class="string">'first'</span>:<span class="string">'z'</span>,<span class="string">'last'</span>:<span class="string">'w'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> k,v <span class="keyword">in</span> d.items():<span class="comment"># items()</span></span><br><span class="line"><span class="meta">... </span>    print(<span class="string">'  Key: '</span> + k)</span><br><span class="line"><span class="meta">... </span>    print(<span class="string">'Value: '</span> + v+<span class="string">'\n'</span>)</span><br><span class="line">...</span><br><span class="line">  Key: name</span><br><span class="line">Value: wz</span><br><span class="line"></span><br><span class="line">  Key: first</span><br><span class="line">Value: z</span><br><span class="line"></span><br><span class="line">  Key: last</span><br><span class="line">Value: w</span><br></pre></td></tr></table></figure><ul><li>遍历所有 键 keys()</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> k <span class="keyword">in</span> d.keys():<span class="comment"># 遍历所有 键 keys()</span></span><br><span class="line"><span class="meta">... </span>    print(<span class="string">'  Key: '</span> + k.title())</span><br><span class="line">...</span><br><span class="line">  Key: Name</span><br><span class="line">  Key: First</span><br><span class="line">  Key: Last</span><br></pre></td></tr></table></figure><ul><li>遍历所有 值 values()</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> v <span class="keyword">in</span> d.values():<span class="comment"># 遍历所有 值 values()</span></span><br><span class="line"><span class="meta">... </span>    print(v.title())</span><br><span class="line">...</span><br><span class="line">Wz</span><br><span class="line">Z</span><br><span class="line">W</span><br></pre></td></tr></table></figure><h3 id="检查字典中的键或值"><a href="#检查字典中的键或值" class="headerlink" title="检查字典中的键或值"></a>检查字典中的键或值</h3><ul><li>检查键或值</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d=&#123;<span class="string">'name'</span>:<span class="string">'wz'</span>,<span class="string">'first'</span>:<span class="string">'z'</span>,<span class="string">'last'</span>:<span class="string">'w'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'name'</span> <span class="keyword">in</span> d.keys()</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'w'</span> <span class="keyword">in</span> d.values()</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'first'</span> <span class="keyword">in</span> d.values()</span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'first'</span> <span class="keyword">not</span> <span class="keyword">in</span> d.values()</span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure><ul><li>嵌套 if 判断</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>n=[<span class="string">'first'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> k <span class="keyword">in</span> d.keys():</span><br><span class="line"><span class="meta">... </span>    print(k.title())</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">if</span> k <span class="keyword">in</span> n:<span class="comment"># 嵌套 if 判断</span></span><br><span class="line"><span class="meta">... </span>        print(<span class="string">'        z'</span>)</span><br><span class="line">...</span><br><span class="line">Name</span><br><span class="line">First</span><br><span class="line">        z</span><br><span class="line">Last</span><br></pre></td></tr></table></figure><h3 id="get-方法"><a href="#get-方法" class="headerlink" title="get() 方法"></a>get() 方法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d=&#123;<span class="string">'name'</span>:<span class="string">'wz'</span>,<span class="string">'first'</span>:<span class="string">'z'</span>,<span class="string">'last'</span>:<span class="string">'w'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.get(<span class="string">'last'</span>,<span class="string">'wang'</span>)</span><br><span class="line"><span class="string">'w'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.get(<span class="string">'all'</span>,<span class="string">'wang'</span>)</span><br><span class="line"><span class="string">'wang'</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h3 id="setdefault-方法"><a href="#setdefault-方法" class="headerlink" title="setdefault() 方法"></a>setdefault() 方法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d=&#123;<span class="string">'name'</span>:<span class="string">'wz'</span>,<span class="string">'first'</span>:<span class="string">'z'</span>,<span class="string">'last'</span>:<span class="string">'w'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.setdefault(<span class="string">'all'</span>,<span class="string">'wazz'</span>)</span><br><span class="line"><span class="string">'wazz'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d</span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'wz'</span>, <span class="string">'first'</span>: <span class="string">'z'</span>, <span class="string">'last'</span>: <span class="string">'w'</span>, <span class="string">'all'</span>: <span class="string">'wazz'</span>&#125;</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h3 id="漂亮打印"><a href="#漂亮打印" class="headerlink" title="漂亮打印"></a>漂亮打印</h3><blockquote><p>如果在程序中导入 <strong>pprint</strong> 模块，就可以用 <strong>pprint()</strong> 和 <strong>pformat()</strong> 函数来用漂亮的格式打印字典内容。下面例子对比了 <strong>print()</strong> 和 <strong>pprint()</strong>:</p></blockquote><ul><li>普通打印</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>message = <span class="string">'It was a bright cold day in April, and the clocks were striking thirteen.'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>count = &#123;&#125;</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> character <span class="keyword">in</span> message:</span><br><span class="line"><span class="meta">... </span>    count.setdefault(character, <span class="number">0</span>)</span><br><span class="line"><span class="meta">... </span>    count[character] = count[character] + <span class="number">1</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(count)</span><br><span class="line">&#123;<span class="string">'I'</span>: <span class="number">1</span>, <span class="string">'t'</span>: <span class="number">6</span>, <span class="string">' '</span>: <span class="number">13</span>, <span class="string">'w'</span>: <span class="number">2</span>, <span class="string">'a'</span>: <span class="number">4</span>, <span class="string">'s'</span>: <span class="number">3</span>, <span class="string">'b'</span>: <span class="number">1</span>, <span class="string">'r'</span>: <span class="number">5</span>, <span class="string">'i'</span>: <span class="number">6</span>, <span class="string">'g'</span>: <span class="number">2</span>, <span class="string">'h'</span>: <span class="number">3</span>, <span class="string">'c'</span>: <span class="number">3</span>, <span class="string">'o'</span>: <span class="number">2</span>, <span class="string">'l'</span>: <span class="number">3</span>, <span class="string">'d'</span>: <span class="number">3</span>, <span class="string">'y'</span>: <span class="number">1</span>, <span class="string">'n'</span>: <span class="number">4</span>, <span class="string">'A'</span>: <span class="number">1</span>, <span class="string">'p'</span>: <span class="number">1</span>, <span class="string">','</span>: <span class="number">1</span>, <span class="string">'e'</span>: <span class="number">5</span>, <span class="string">'k'</span>: <span class="number">2</span>, <span class="string">'.'</span>: <span class="number">1</span>&#125;</span><br></pre></td></tr></table></figure><ul><li>漂亮打印</li></ul><blockquote><p><strong>pprint()</strong> 在屏幕上输出结果，<strong>pformat()</strong> 得到漂亮打印的文本字符串。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pprint</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>message = <span class="string">'It was a bright cold day in April, and the clocks were striking thirteen.'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>count = &#123;&#125;</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> character <span class="keyword">in</span> message:</span><br><span class="line"><span class="meta">... </span>    count.setdefault(character, <span class="number">0</span>)</span><br><span class="line"><span class="meta">... </span>    count[character] = count[character] + <span class="number">1</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pprint.pprint(count)</span><br><span class="line">&#123;<span class="string">' '</span>: <span class="number">13</span>,</span><br><span class="line"> <span class="string">','</span>: <span class="number">1</span>,</span><br><span class="line"> <span class="string">'.'</span>: <span class="number">1</span>,</span><br><span class="line"> <span class="string">'A'</span>: <span class="number">1</span>,</span><br><span class="line"> <span class="string">'I'</span>: <span class="number">1</span>,</span><br><span class="line"> <span class="string">'a'</span>: <span class="number">4</span>,</span><br><span class="line"> <span class="string">'b'</span>: <span class="number">1</span>,</span><br><span class="line"> <span class="string">'c'</span>: <span class="number">3</span>,</span><br><span class="line"> <span class="string">'d'</span>: <span class="number">3</span>,</span><br><span class="line"> <span class="string">'e'</span>: <span class="number">5</span>,</span><br><span class="line"> <span class="string">'g'</span>: <span class="number">2</span>,</span><br><span class="line"> <span class="string">'h'</span>: <span class="number">3</span>,</span><br><span class="line"> <span class="string">'i'</span>: <span class="number">6</span>,</span><br><span class="line"> <span class="string">'k'</span>: <span class="number">2</span>,</span><br><span class="line"> <span class="string">'l'</span>: <span class="number">3</span>,</span><br><span class="line"> <span class="string">'n'</span>: <span class="number">4</span>,</span><br><span class="line"> <span class="string">'o'</span>: <span class="number">2</span>,</span><br><span class="line"> <span class="string">'p'</span>: <span class="number">1</span>,</span><br><span class="line"> <span class="string">'r'</span>: <span class="number">5</span>,</span><br><span class="line"> <span class="string">'s'</span>: <span class="number">3</span>,</span><br><span class="line"> <span class="string">'t'</span>: <span class="number">6</span>,</span><br><span class="line"> <span class="string">'w'</span>: <span class="number">2</span>,</span><br><span class="line"> <span class="string">'y'</span>: <span class="number">1</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="简单函数"><a href="#简单函数" class="headerlink" title="简单函数"></a>简单函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line"><span class="meta">... </span>    print(<span class="string">'简单函数！'</span>)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>func()</span><br><span class="line">简单函数！</span><br></pre></td></tr></table></figure><h3 id="位置实参和关键字实参"><a href="#位置实参和关键字实参" class="headerlink" title="位置实参和关键字实参"></a>位置实参和关键字实参</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(para)</span>:</span></span><br><span class="line"><span class="meta">... </span>    print(<span class="string">'简单函数！'</span> + para)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>func(<span class="string">'这是参数'</span>)                <span class="comment"># 位置实参</span></span><br><span class="line">简单函数！这是参数</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>func(para=<span class="string">'这是参数'</span>)           <span class="comment"># 关键字实参</span></span><br><span class="line">简单函数！这是参数</span><br></pre></td></tr></table></figure><h3 id="带默认值参数"><a href="#带默认值参数" class="headerlink" title="带默认值参数"></a>带默认值参数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(para=<span class="string">'默认参数值'</span>)</span>:</span>    <span class="comment"># 默认值</span></span><br><span class="line"><span class="meta">... </span>    print(<span class="string">'简单函数！'</span> + para)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>func()                         <span class="comment"># 使用默认值</span></span><br><span class="line">简单函数！默认参数值</span><br></pre></td></tr></table></figure><h3 id="任意数量实参"><a href="#任意数量实参" class="headerlink" title="任意数量实参"></a>任意数量实参</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(*para)</span>:</span>               <span class="comment"># 任意数量实参</span></span><br><span class="line"><span class="meta">... </span>    print(<span class="string">'任意数量！'</span>)</span><br><span class="line"><span class="meta">... </span>    print(para)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>func(<span class="string">'1'</span>)</span><br><span class="line">任意数量！</span><br><span class="line">(<span class="string">'1'</span>,)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>func(<span class="string">'1'</span>,<span class="string">'2'</span>)</span><br><span class="line">任意数量！</span><br><span class="line">(<span class="string">'1'</span>, <span class="string">'2'</span>)</span><br></pre></td></tr></table></figure><h2 id="模块导入"><a href="#模块导入" class="headerlink" title="模块导入"></a>模块导入</h2><p>模块是扩展名为.py的文件，函数存在于模块中，使用函数之前需要导入。</p><ul><li>test.py 文件内容</li></ul><blockquote><blockquote><p>函数与函数之间空两行</p></blockquote></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func2</span><span class="params">(para=<span class="string">'默认参数值'</span>)</span>:</span></span><br><span class="line">    print(<span class="string">'简单函数！'</span> + para)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(*para)</span>:</span></span><br><span class="line">    print(para)</span><br></pre></td></tr></table></figure><h3 id="导入整个模块"><a href="#导入整个模块" class="headerlink" title="导入整个模块"></a>导入整个模块</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> test</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>test.func(<span class="string">'a'</span>)              <span class="comment"># 必须指定前缀</span></span><br><span class="line">(<span class="string">'a'</span>,)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>test.func(<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>)      <span class="comment"># 必须指定前缀</span></span><br><span class="line">(<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>test.func2()                <span class="comment"># 必须指定前缀</span></span><br><span class="line">简单函数！默认参数值</span><br></pre></td></tr></table></figure><h3 id="导入指定函数"><a href="#导入指定函数" class="headerlink" title="导入指定函数"></a>导入指定函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> test <span class="keyword">import</span> func</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>func(<span class="string">'a'</span>,<span class="string">'b'</span>)               <span class="comment"># 不需要指定前缀</span></span><br><span class="line">(<span class="string">'a'</span>, <span class="string">'b'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>func2                       <span class="comment"># 没有导入 func2 ,出错</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">NameError: name <span class="string">'func2'</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> test <span class="keyword">import</span> func,func2</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>func(<span class="string">'a'</span>,<span class="string">'b'</span>)               <span class="comment"># 可以不指定前缀</span></span><br><span class="line">(<span class="string">'a'</span>, <span class="string">'b'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>func2()                     <span class="comment"># 可以不指定前缀</span></span><br><span class="line">简单函数！默认参数值</span><br></pre></td></tr></table></figure><h3 id="导入所有函数"><a href="#导入所有函数" class="headerlink" title="导入所有函数"></a>导入所有函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> test <span class="keyword">import</span> *</span><br></pre></td></tr></table></figure><h3 id="导入类"><a href="#导入类" class="headerlink" title="导入类"></a>导入类</h3><p>与导入函数格式一致。</p><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><ul><li>类是模块内的属性</li></ul><h3 id="创建类"><a href="#创建类" class="headerlink" title="创建类"></a>创建类</h3><blockquote><blockquote><p>test.py 文件内容</p></blockquote></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sleep</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(self.name.title() + <span class="string">" 正在睡觉..."</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">playgame</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(self.name.title() + <span class="string">" 游戏中..."</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getage</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(self.name.title() + <span class="string">" "</span> + str(self.age) + <span class="string">" 岁了!"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setage</span><span class="params">(self, age)</span>:</span></span><br><span class="line">        self.age = age</span><br></pre></td></tr></table></figure><h3 id="创建和操作实例"><a href="#创建和操作实例" class="headerlink" title="创建和操作实例"></a>创建和操作实例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> test</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mydog=test.Dog(<span class="string">'huahua'</span>,<span class="number">2</span>)      <span class="comment"># 创建实例</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mydog.name                      <span class="comment"># 访问属性</span></span><br><span class="line"><span class="string">'huahua'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mydog.age</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mydog.sleep()                   <span class="comment"># 调用方法</span></span><br><span class="line">Huahua 正在睡觉...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mydog.playgame()</span><br><span class="line">Huahua 游戏中...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mydog.getage()</span><br><span class="line">Huahua <span class="number">2</span> 岁了!</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mydog.age=<span class="number">3</span>                     <span class="comment"># 直接修改实例的属性值</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mydog.age</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mydog.color=<span class="string">"black"</span>             <span class="comment"># 在实例内产生全新的属性，之前在类中并没有定义过</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mydog.color</span><br><span class="line"><span class="string">'black'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mydog.getage()</span><br><span class="line">Huahua <span class="number">3</span> 岁了!</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mydog.setage(<span class="number">5</span>)                 <span class="comment"># 调用方法修改属性值</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mydog.age</span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mydog.getage()</span><br><span class="line">Huahua <span class="number">5</span> 岁了!</span><br></pre></td></tr></table></figure><h2 id="类继承"><a href="#类继承" class="headerlink" title="类继承"></a>类继承</h2><ul><li><strong>超类列在子类开头的括号中。</strong> 含有继承的类成为子类，子类所继承的类就是超类。</li></ul><h3 id="子类与超类"><a href="#子类与超类" class="headerlink" title="子类与超类"></a>子类与超类</h3><blockquote><blockquote><p>test.py 文件增加继承类内容</p></blockquote></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span><span class="params">()</span>:</span>                        <span class="comment"># 超类</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sleep</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(self.name.title() + <span class="string">" 正在睡觉..."</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">playgame</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(self.name.title() + <span class="string">" 游戏中..."</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getage</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(self.name.title() + <span class="string">" "</span> + str(self.age) + <span class="string">" 岁了!"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setage</span><span class="params">(self, age)</span>:</span></span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LittleDog</span><span class="params">(Dog)</span>:</span>               <span class="comment"># 创建继承类（子类：LittleDog，超类：Dog）</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setage</span><span class="params">(self, age)</span>:</span>          <span class="comment"># 重写父类方法</span></span><br><span class="line">        <span class="keyword">if</span> <span class="number">0</span> &lt; age &lt;= <span class="number">3</span>:</span><br><span class="line">            self.age = age</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'不合适的小狗年龄！'</span>)</span><br></pre></td></tr></table></figure><blockquote><p>测试继承类</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> test</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mydog=test.LittleDog(<span class="string">'huahua'</span>,<span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mydog.name</span><br><span class="line"><span class="string">'huahua'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mydog.age</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mydog.getage()</span><br><span class="line">Huahua <span class="number">2</span> 岁了!</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mydog.setage(<span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mydog.getage()</span><br><span class="line">Huahua <span class="number">3</span> 岁了!</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mydog.setage(<span class="number">6</span>)</span><br><span class="line">不合适的小狗年龄！</span><br></pre></td></tr></table></figure><h3 id="继承在Python-2-7-和-3-之间的差异"><a href="#继承在Python-2-7-和-3-之间的差异" class="headerlink" title="继承在Python 2.7 和 3 之间的差异"></a>继承在Python 2.7 和 3 之间的差异</h3><ul><li>Python 3中的继承</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age)</span>:</span></span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LittleDog</span><span class="params">(Dog)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age)</span>:</span></span><br><span class="line">        super().__init__(name,age)</span><br><span class="line">        ...</span><br></pre></td></tr></table></figure><ul><li>Python 2.7中的继承</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age)</span>:</span></span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LittleDog</span><span class="params">(Dog)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age)</span>:</span></span><br><span class="line">        super(LittleDog,self).__init__(name,age)</span><br><span class="line">        ...</span><br></pre></td></tr></table></figure><h2 id="类截获Python运算符"><a href="#类截获Python运算符" class="headerlink" title="类截获Python运算符"></a>类截获Python运算符</h2><p>截获Python运算符，即<strong>运算符重载</strong>，让用类写成的对象，可以截获并相应在内置类型上的运算：加法、切片、打印和点号运算符等。</p><blockquote><blockquote><p>运算符重载例子</p></blockquote></blockquote><ul><li>当心的实例构造时，会调用<strong>init</strong>(self是新的ThirdClass对象)。</li><li>当ThirdClass实例出现在 + 表达式中时，则会调用<strong>add</strong>。</li><li>当打印一个对象的时候（从技术上讲，当通过 str 内置函数或者其 Python 内部的等价形式来将其转换为打印字符串的时候），运行<strong>str</strong>。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">FirstClass</span>:</span>               <span class="comment"># Define a class object</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">setdata</span><span class="params">(self, value)</span>:</span>   <span class="comment"># Define class methods</span></span><br><span class="line"><span class="meta">... </span>        self.data = value       <span class="comment"># self is the instance</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">display</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="meta">... </span>        print(self.data)        <span class="comment"># self.data: per instance</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">SecondClass</span><span class="params">(FirstClass)</span>:</span>                   <span class="comment"># Inherits setdata</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">display</span><span class="params">(self)</span>:</span>                           <span class="comment"># Changes display</span></span><br><span class="line"><span class="meta">... </span>        print(<span class="string">'Current value = "%s"'</span> % self.data)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">ThirdClass</span><span class="params">(SecondClass)</span>:</span>                     <span class="comment"># Inherit from SecondClass</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, value)</span>:</span>                     <span class="comment"># On "ThirdClass(value)"</span></span><br><span class="line"><span class="meta">... </span>        self.data = value</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__add__</span><span class="params">(self, other)</span>:</span>                      <span class="comment"># On "self + other"</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> ThirdClass(self.data + other)</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span>                             <span class="comment"># On "print(self)", "str()"</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> <span class="string">'[ThirdClass: %s]'</span> % self.data</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">mul</span><span class="params">(self, other)</span>:</span>                          <span class="comment"># In-place change: named </span></span><br><span class="line"><span class="meta">... </span>        self.data *= other</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = ThirdClass(<span class="string">'abc'</span>)           <span class="comment"># __init__ called</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.display()                     <span class="comment"># Inherited method called</span></span><br><span class="line">Current value = <span class="string">"abc"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(a)                        <span class="comment"># __str__: returns display string</span></span><br><span class="line">[ThirdClass: abc]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = a + <span class="string">'xyz'</span>                   <span class="comment"># __add__: makes a new instance</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b.display()                     <span class="comment"># b has all ThirdClass methods </span></span><br><span class="line">Current value = <span class="string">"abcxyz"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(b)                        <span class="comment"># __str__: returns display string</span></span><br><span class="line">[ThirdClass: abcxyz]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.mul(<span class="number">3</span>)                        <span class="comment"># mul: changes instance in-place</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(a)</span><br><span class="line">[ThirdClass: abcabcabc]</span><br></pre></td></tr></table></figure><h2 id="self"><a href="#self" class="headerlink" title="self"></a>self</h2><ul><li>Python 中的 self 相当于 C++ 或 Java 中的 this，在 Python 中 self 必须明确写出来。</li><li>self 不一定必须写成 self，可以起任何其他名字（比如：a，b，this等），鉴于其总是指向对象本身，因此习惯上将其命名为 self。</li><li>self 指向创建的实例本身（是实例，而不是类）。参考下面代码：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Test</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">prt</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="meta">... </span>        print(self)</span><br><span class="line"><span class="meta">... </span>        print(self.__class__)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = Test()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x.prt()</span><br><span class="line">&lt;__main__.Test object at <span class="number">0x000001F4E8C8FCF8</span>&gt;        <span class="comment"># x 实例地址</span></span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">__main__</span>.<span class="title">Test</span>'&gt;</span></span><br><span class="line">&gt;&gt;&gt; y = Test()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y.prt()</span><br><span class="line">&lt;__main__.Test object at <span class="number">0x000001F4E8C8FC88</span>&gt;        <span class="comment"># y 实例地址</span></span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">__main__</span>.<span class="title">Test</span>'&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Python-正则表达式"><a href="#Python-正则表达式" class="headerlink" title="Python 正则表达式"></a>Python 正则表达式</h2><p>内容太多，独立发布，参见 <a href="http://slowread.cn/2018/08/01/Python-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/" target="_blank" rel="noopener">Python 正则表达式</a>。</p><h2 id="例子程序"><a href="#例子程序" class="headerlink" title="例子程序"></a>例子程序</h2><h3 id="猜数字"><a href="#猜数字" class="headerlink" title="猜数字"></a>猜数字</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line">rnum = random.randint(<span class="number">1</span>, <span class="number">20</span>)</span><br><span class="line">print(<span class="string">'猜测1~20之间的一个数。'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> guessNum <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">7</span>):</span><br><span class="line">    print(<span class="string">'请输入猜测数字：'</span>)</span><br><span class="line">    guess = int(input())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> guess &lt; rnum:</span><br><span class="line">        print(<span class="string">'小了'</span>)</span><br><span class="line">    <span class="keyword">elif</span> guess &gt; rnum:</span><br><span class="line">        print(<span class="string">'大了'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> guess == rnum:</span><br><span class="line">    print(<span class="string">'干得好！你用了 '</span> + str(guessNum) + <span class="string">'次机会猜对了结果。'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'很遗憾，正确的数字是'</span> + str(rnum))</span><br></pre></td></tr></table></figure><h3 id="Collatz-序列"><a href="#Collatz-序列" class="headerlink" title="Collatz 序列"></a>Collatz 序列</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">collatz</span><span class="params">(number)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> number % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        print(number//<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">return</span> number//<span class="number">2</span></span><br><span class="line">    <span class="keyword">elif</span> number % <span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">        print(<span class="number">3</span>*number+<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span>(<span class="number">3</span>*number+<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">iInput = input(<span class="string">'请输入一个整数：'</span>)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    iReturn = collatz(int(iInput))</span><br><span class="line">    <span class="keyword">while</span> iReturn != <span class="number">1</span>:</span><br><span class="line">        iReturn = collatz(int(iReturn))</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    print(<span class="string">'输入的不是整数！'</span>)</span><br></pre></td></tr></table></figure><h3 id="打印列表内容"><a href="#打印列表内容" class="headerlink" title="打印列表内容"></a>打印列表内容</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plst</span><span class="params">(lst)</span>:</span></span><br><span class="line">    splst = <span class="string">"'"</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(lst)):</span><br><span class="line">        splst += lst[i<span class="number">-1</span>]+<span class="string">', '</span></span><br><span class="line">    splst += <span class="string">'and '</span> + lst[i] + <span class="string">"'"</span></span><br><span class="line">    print(splst)</span><br><span class="line"></span><br><span class="line">l = [<span class="string">'dog'</span>, <span class="string">'cat'</span>, <span class="string">'tiger'</span>, <span class="string">'elephant'</span>]</span><br><span class="line">plst(l)</span><br></pre></td></tr></table></figure><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;基础事项&quot;&gt;&lt;a href=&quot;#基础事项&quot; class=&quot;headerlink&quot; title=&quot;基础事项&quot;&gt;&lt;/a&gt;基础事项&lt;/h2&gt;&lt;h3 id=&quot;变量命名&quot;&gt;&lt;a href=&quot;#变量命名&quot; class=&quot;headerlink&quot; title=&quot;变量命名&quot;&gt;&lt;/a&gt;变量命名&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;变量名尽量&lt;strong&gt;小写&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;类名首字母&lt;strong&gt;大写&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;括号与数据类型&quot;&gt;&lt;a href=&quot;#括号与数据类型&quot; class=&quot;headerlink&quot; title=&quot;括号与数据类型&quot;&gt;&lt;/a&gt;括号与数据类型&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;括号&lt;/th&gt;
&lt;th&gt;数据类型&lt;/th&gt;
&lt;th&gt;例子&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;[]&lt;/td&gt;
&lt;td&gt;列表&lt;/td&gt;
&lt;td&gt;[123,’abc’,1.23]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;()&lt;/td&gt;
&lt;td&gt;元组&lt;/td&gt;
&lt;td&gt;(1,2,3,4))&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;{}&lt;/td&gt;
&lt;td&gt;字典&lt;/td&gt;
&lt;td&gt;{‘name’:’wa’,’age’:20}&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://at2008.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>CSharp本质论笔记 第8章 值类型</title>
    <link href="https://at2008.github.io/2018/05/12/CSharp%E6%9C%AC%E8%B4%A8%E8%AE%BA%E7%AC%94%E8%AE%B0-%E7%AC%AC8%E7%AB%A0-%E5%80%BC%E7%B1%BB%E5%9E%8B/"/>
    <id>https://at2008.github.io/2018/05/12/CSharp本质论笔记-第8章-值类型/</id>
    <published>2018-05-12T12:51:15.000Z</published>
    <updated>2018-08-02T15:27:41.059Z</updated>
    
    <content type="html"><![CDATA[<h1 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h1><h2 id="初学者主题"><a href="#初学者主题" class="headerlink" title="初学者主题"></a>初学者主题</h2><p>再次介绍<code>值类型</code>和<code>引用类型</code>，温故知新。</p><h3 id="值类型"><a href="#值类型" class="headerlink" title="值类型"></a>值类型</h3><p>值类型直接包含值，换言之，变量引用的位置就是值在内存中实际存储的位置。因此，将一个原始变量的值赋值给另一个变量，会在新变量的位置创建原始变量值的一个内存副本。</p><pre><code>由于值类型需要有一个内训副本，所以定义时通常不需要让他们消耗太多内存（通常应该小于16字节）。</code></pre><a id="more"></a><h3 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h3><p>与值类型不同，引用类型的变量的值是对一个对象实例的引用（通常是内存地址），要去那个位置找到对象实例的数据。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;结构&quot;&gt;&lt;a href=&quot;#结构&quot; class=&quot;headerlink&quot; title=&quot;结构&quot;&gt;&lt;/a&gt;结构&lt;/h1&gt;&lt;h2 id=&quot;初学者主题&quot;&gt;&lt;a href=&quot;#初学者主题&quot; class=&quot;headerlink&quot; title=&quot;初学者主题&quot;&gt;&lt;/a&gt;初学者主题&lt;/h2&gt;&lt;p&gt;再次介绍&lt;code&gt;值类型&lt;/code&gt;和&lt;code&gt;引用类型&lt;/code&gt;，温故知新。&lt;/p&gt;
&lt;h3 id=&quot;值类型&quot;&gt;&lt;a href=&quot;#值类型&quot; class=&quot;headerlink&quot; title=&quot;值类型&quot;&gt;&lt;/a&gt;值类型&lt;/h3&gt;&lt;p&gt;值类型直接包含值，换言之，变量引用的位置就是值在内存中实际存储的位置。因此，将一个原始变量的值赋值给另一个变量，会在新变量的位置创建原始变量值的一个内存副本。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;由于值类型需要有一个内训副本，所以定义时通常不需要让他们消耗太多内存（通常应该小于16字节）。
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
      <category term="C#" scheme="https://at2008.github.io/tags/C/"/>
    
      <category term="C#本质论" scheme="https://at2008.github.io/tags/C-%E6%9C%AC%E8%B4%A8%E8%AE%BA/"/>
    
      <category term="Essential C#" scheme="https://at2008.github.io/tags/Essential-C/"/>
    
  </entry>
  
  <entry>
    <title>VSCdoe+插件 使用配置记录</title>
    <link href="https://at2008.github.io/2018/01/03/VSCdoe-%E6%8F%92%E4%BB%B6-%E4%BD%BF%E7%94%A8%E9%85%8D%E7%BD%AE%E8%AE%B0%E5%BD%95/"/>
    <id>https://at2008.github.io/2018/01/03/VSCdoe-插件-使用配置记录/</id>
    <published>2018-01-03T12:19:01.000Z</published>
    <updated>2018-08-02T15:27:41.060Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HTML-中-CSS-Class-智能提示"><a href="#HTML-中-CSS-Class-智能提示" class="headerlink" title="HTML 中 CSS Class 智能提示"></a>HTML 中 CSS Class 智能提示</h1><p>1.安装插件：<a href="https://marketplace.visualstudio.com/items?itemName=ecmel.vscode-html-css" target="_blank" rel="noopener">HTML CSS Support</a></p><p>2.设置中添加以下代码：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">"editor.parameterHints": true,</span><br><span class="line">"editor.quickSuggestions": &#123;</span><br><span class="line">    "other": true,</span><br><span class="line">    "comments": true,</span><br><span class="line">    "strings": true</span><br></pre></td></tr></table></figure><a id="more"></a><h1 id="查看-HTML-样式在-CSS-中的定义"><a href="#查看-HTML-样式在-CSS-中的定义" class="headerlink" title="查看 HTML 样式在 CSS 中的定义"></a>查看 HTML 样式在 CSS 中的定义</h1><p>安装插件：<a href="https://marketplace.visualstudio.com/items?itemName=pranaygp.vscode-css-peek" target="_blank" rel="noopener">CSS Peek</a>，当你在 HTML 文件中右键单击选择器时，选择“ Go to Definition 和 Peek definition ”选项，它便会给你发送样式设置的 CSS 代码。</p><h1 id="不同代码文件-Tab-键设定"><a href="#不同代码文件-Tab-键设定" class="headerlink" title="不同代码文件 Tab 键设定"></a>不同代码文件 Tab 键设定</h1><p>设置中添加以下代码：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">"[html]": &#123;</span><br><span class="line">    "editor.tabSize": 4</span><br><span class="line">&#125;,</span><br><span class="line">"[css]": &#123;</span><br><span class="line">    "editor.tabSize": 4</span><br><span class="line">&#125;,</span><br><span class="line">"[javascript]": &#123;</span><br><span class="line">    // 按 "Tab" 时插入空格。该设置在 `editor.detectIndentation` 启用时根据文件内容进行重写。</span><br><span class="line">    "editor.insertSpaces": true,</span><br><span class="line">    // 一个制表符等于的空格数。该设置在 `editor.detectIndentation` 启用时根据文件内容进行重写。</span><br><span class="line">    "editor.tabSize": 2</span><br><span class="line">&#125;,</span><br><span class="line">"[typescript]": &#123;</span><br><span class="line">    "editor.tabSize": 2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="标题栏显示文件全路径名"><a href="#标题栏显示文件全路径名" class="headerlink" title="标题栏显示文件全路径名"></a>标题栏显示文件全路径名</h1><p>设置中添加以下代码：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">"window.title": "$&#123;activeEditorLong&#125;"</span><br></pre></td></tr></table></figure><h1 id="文件自动保存"><a href="#文件自动保存" class="headerlink" title="文件自动保存"></a>文件自动保存</h1><p>设置中添加以下代码：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">"files.autoSave": "onFocusChange"</span><br></pre></td></tr></table></figure><h1 id="菜单-侧边栏等字体大小调整"><a href="#菜单-侧边栏等字体大小调整" class="headerlink" title="菜单/侧边栏等字体大小调整"></a>菜单/侧边栏等字体大小调整</h1><p>VSCode 默认的菜单、左侧管理器等栏目字体是11px，感觉字体稍小，尤其在暗调主题下，难以识别。可以根据自己的需要修改默认配置文件，得到合适的显示效果。</p><h2 id="修改样式文件修改权限"><a href="#修改样式文件修改权限" class="headerlink" title="修改样式文件修改权限"></a>修改样式文件修改权限</h2><ul><li>找到VSCode工作区配置文件，位于:<code>安装目录\VSCode\resources\app\out\vs\workbench\workbench.main.css</code></li><li>对文件增加修改权限，具体：右键属性–&gt;安全–&gt;编辑(更改权限)–见下图</li></ul><p><img src="http://slowread.cn/images/material/workbench.main.css.png" alt="image"></p><h2 id="修改样式文件配置"><a href="#修改样式文件配置" class="headerlink" title="修改样式文件配置"></a>修改样式文件配置</h2><ul><li>打开<code>workbench.main.css</code>文件，搜索/替换所有<code>11px</code>为<code>12px</code>或者自己认为合适的值，这样比较简单，总共有超过30多处</li><li>另外一种方式：菜单-&gt;帮助-&gt;切换开发人员工具，找到需要修改的地方对应的样式表文件内容并修改</li></ul><h2 id="修改后遗症"><a href="#修改后遗症" class="headerlink" title="修改后遗症"></a>修改后遗症</h2><ul><li>VSCdoe 编辑器标题栏会显示<code>[不受支持]</code>，不过不影响使用</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;HTML-中-CSS-Class-智能提示&quot;&gt;&lt;a href=&quot;#HTML-中-CSS-Class-智能提示&quot; class=&quot;headerlink&quot; title=&quot;HTML 中 CSS Class 智能提示&quot;&gt;&lt;/a&gt;HTML 中 CSS Class 智能提示&lt;/h1&gt;&lt;p&gt;1.安装插件：&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=ecmel.vscode-html-css&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;HTML CSS Support&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2.设置中添加以下代码：&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&quot;editor.parameterHints&quot;: true,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&quot;editor.quickSuggestions&quot;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;other&quot;: true,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;comments&quot;: true,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;strings&quot;: true&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="VSCode" scheme="https://at2008.github.io/tags/VSCode/"/>
    
      <category term="插件" scheme="https://at2008.github.io/tags/%E6%8F%92%E4%BB%B6/"/>
    
      <category term="Visual Studio" scheme="https://at2008.github.io/tags/Visual-Studio/"/>
    
      <category term="Visual Studio Code" scheme="https://at2008.github.io/tags/Visual-Studio-Code/"/>
    
  </entry>
  
  <entry>
    <title>C#本质论笔记 第7章 接口</title>
    <link href="https://at2008.github.io/2017/12/28/CSharp%E6%9C%AC%E8%B4%A8%E8%AE%BA%E7%AC%94%E8%AE%B0-%E7%AC%AC7%E7%AB%A0-%E6%8E%A5%E5%8F%A3/"/>
    <id>https://at2008.github.io/2017/12/28/CSharp本质论笔记-第7章-接口/</id>
    <published>2017-12-28T13:43:32.000Z</published>
    <updated>2018-08-03T13:45:34.649Z</updated>
    
    <content type="html"><![CDATA[<h1 id="接口概述"><a href="#接口概述" class="headerlink" title="接口概述"></a>接口概述</h1><p>与 <code>类</code> 一样，在<code>接口</code>中可以定义一个和多个方法、属性 、索引指示器和事件。但与<code>类</code>不同的是，<code>接口</code>中仅仅是它们的<code>声明</code>，并不提供<code>实现</code>。因此接口是函数成员声明的集合。如果类或结构从一个接口派生，则这个类或结构负责实现该接口中所声明的所有成员。一个接口可以从多个接口继承，而一个类或结构可以实现多个接口。由于 <code>C#</code> 语言不支持多继承，因此，如果某个类需要继承多个类的行为时，只能使用多个接口加以说明。</p><p>对接口的理解：</p><ul><li>接口只有声明，没有实现，由继承该接口的类或者结构实现。</li><li>C#的类只支持单继承，采用<code>接口</code>变相实现了多继承。</li><li>接口更多的是一种<code>规范约束</code>，要求继承该接口的类或者结构必须对接口成员进行实现。</li></ul><a id="more"></a><h1 id="接口声明"><a href="#接口声明" class="headerlink" title="接口声明"></a>接口声明</h1><p>接口声明是一种类型声明，它定义了一种新的接口类型。接口声明格式如下：</p><pre><code>属性 接口修饰符 interface 接口名：基接口{接口体}</code></pre><p>其中，关键字interface、接口名和接口体时必须的，其它项是可选的。接口修饰符可以是new、public、protected、nternal和private。例子：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IExample</span> &#123;</span><br><span class="line">    <span class="comment">//所有接口成员都不能包括实现</span></span><br><span class="line">    <span class="keyword">string</span> <span class="keyword">this</span> [<span class="keyword">int</span> index] &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; <span class="comment">//索引指示器声明</span></span><br><span class="line">    <span class="keyword">event</span> EventHandler E; <span class="comment">//事件声明</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">F</span> (<span class="params"><span class="keyword">int</span> <span class="keyword">value</span></span>)</span>; <span class="comment">//方法声明</span></span><br><span class="line">    <span class="keyword">string</span> P &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; <span class="comment">//属性声明</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>声明接口时，需注意以下内容：</p><ul><li>接口成员只能是方法、属性、索引指示器和事件，不能是常量、域、操作符、构造函数或析构函数，不能包含任何静态成员。</li><li>接口成员声明不能包含任何修饰符，接口成员默认访问方式是<code>public</code>。</li></ul><h1 id="接口的继承"><a href="#接口的继承" class="headerlink" title="接口的继承"></a>接口的继承</h1><p>类似于类的继承性，接口也有继承性。派生接口继承了基接口中的函数成员说明。接口允许多继承，一个派生接口可以没有基接口，也可以有多个基接口。在接口声明的冒号后列出被继承的接口名字，多个接口名之间用分号分割。例子：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title">IControl</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Paint</span> (<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title">ITextBox</span> : <span class="title">IControl</span> <span class="comment">//继承了接口Icontrol的方法aint()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">SetText</span> (<span class="params"><span class="keyword">string</span> text</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title">IListBox</span> : <span class="title">IControl</span> <span class="comment">//继承了接口Icontrol的方法Paint()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">SetItems</span> (<span class="params"><span class="keyword">string</span>[] items</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line">interface IComboBox : ITextBox, IListBox &#123; //可以声明新方法</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的例子中，接口<code>ITextBox</code>和<code>IListBox</code>都从接口<code>IControl</code>中继承，也就继承了接口 <code>IControl</code>的<code>Paint</code>方法。接口<code>IComboBox</code>从接口<code>ITextBox</code>和<code>IListBox</code>中继承，因此它应该继承了接口<code>ITextBox</code>的<code>SetText</code>方法和<code>IListBox</code>的<code>SetItems</code>方法，还有<code>IControl</code>的<code>Paint</code>方法。</p><h1 id="类对接口的实现"><a href="#类对接口的实现" class="headerlink" title="类对接口的实现"></a>类对接口的实现</h1><p>前面已经说过，接口定义不包括函数成员的实现部分。继承该接口的类或结构应实现这些函数成员。这里主要讲述通过类来实现接口。类实现接口的本质是，用接口规定类应实现那些函数成员。用类来实现接口时，接口的名称必须包含在类声明中的基类列表中。</p><p>加入定义一个描述个人情况的类Person，从类Person可以派生出其它类，例如：工人类、公务员类、医生类等。这些类有一些共有的方法和属性，例如工资属性。一般希望所有派生类访问工资属性时用同样变量名。该属性定义在类Person中不合适，因为有些人无工资，如小孩。如定义一个类作为基类，包含工资属性，但C#不支持多继承。可行的办法是使用接口，在接口中声明工资属性。工人类、公务员类、医生类等都必须实现该接口，也就保证了它们访问工资属性时用同样变量名。例子如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">I_Salary</span> <span class="comment">//接口</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">decimal</span> Salary <span class="comment">//属性声明</span></span><br><span class="line">    &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">string</span> P_name = <span class="string">"张三"</span>; <span class="comment">//P_name是私有字段</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> P_age = <span class="number">12</span>; <span class="comment">//P_age是私有字段</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Display</span> (<span class="params"></span>) <span class="comment">//类的方法声明，显示姓名和年龄</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Console.WriteLine (<span class="string">"姓名:&#123;0&#125;,年龄：&#123;1&#125;"</span>, P_name, P_age);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Name <span class="comment">//定义属性Name</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> P_name; &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123; P_name = <span class="keyword">value</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> Age <span class="comment">//定义属性Age</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> P_age; &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123; P_age = <span class="keyword">value</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class Employee : Person, I_Salary //Person类是基类,I_Salary是接口</span><br><span class="line">&#123; <span class="comment">//不同程序员完成工人类、医生类等，定义工资变量名称可能不同</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">decimal</span> salary;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> new <span class="keyword">void</span> <span class="title">Display</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">base</span>.Display ();</span><br><span class="line">        Console.WriteLine (<span class="string">"薪金：&#123;0&#125; "</span>, salary);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//工人类、医生类等都要实现属性Salary，保证使用的工资属性同名</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">decimal</span> Salary &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> salary; &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123; salary = <span class="keyword">value</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Test</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        Employee S = <span class="keyword">new</span> Employee ();</span><br><span class="line">        S.Name = <span class="string">"田七"</span>; <span class="comment">//修改属性Name</span></span><br><span class="line">        S.Age = <span class="number">20</span>; <span class="comment">//修改属性Age</span></span><br><span class="line">        S.Salary = <span class="number">2000</span>; <span class="comment">//修改属性Salary</span></span><br><span class="line">        S.Display ();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 输出</span></span><br><span class="line"><span class="comment">姓名:田七,年龄：20</span></span><br><span class="line"><span class="comment">薪金：2000</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h1 id="抽象类和接口比较"><a href="#抽象类和接口比较" class="headerlink" title="抽象类和接口比较"></a>抽象类和接口比较</h1><table><thead><tr><th>抽象类</th><th>接口</th></tr></thead><tbody><tr><td>相同点</td><td></td></tr><tr><td>可以被继承</td><td>可以被继承</td></tr><tr><td>可以有方法的声明</td><td>可以有方法的声明</td></tr><tr><td>不可以被实例化</td><td>不可以被实例化</td></tr><tr><td>子类必须实现基类的方法除非子类是抽象类</td><td>子类必须实现基类的方法除非子类是抽象类</td></tr><tr><td></td><td></td></tr><tr><td>以下为不同点</td><td></td></tr><tr><td>一个类只能直接继承一个类（包括抽象类）</td><td>一个类可以直接继承多个接口</td></tr><tr><td>是从一系列相关对象中抽象出来的概念， 因此反映的是事物的内部共性；</td><td>是为了满足外部调用而定义的一个功能约定， 因此反映的是事物的外部特性</td></tr><tr><td>是一个不完整的类，需要进一步细化</td><td>是一个行为规范。</td></tr><tr><td>抽象基类可以定义字段、属性、方法实现。</td><td>接口只能定义属性、索引器、事件、和方法声明，不能包含字段。</td></tr><tr><td>更多的是定义在一系列紧密相关的类间</td><td>大多数是关系疏松但都实现某一功能的类中</td></tr><tr><td>只能作用于引用类型</td><td>可以作用于值类型和引用类型</td></tr><tr><td>抽象类既可以定义规则，还可能提供已实现的成员。</td><td>只能定义抽象规则</td></tr></tbody></table><h1 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h1><iframe src="https://slowread.cn/EssentialCSharp5-Index.html" width="100%" height="300" frameborder="0" allowfullscreen></iframe>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;接口概述&quot;&gt;&lt;a href=&quot;#接口概述&quot; class=&quot;headerlink&quot; title=&quot;接口概述&quot;&gt;&lt;/a&gt;接口概述&lt;/h1&gt;&lt;p&gt;与 &lt;code&gt;类&lt;/code&gt; 一样，在&lt;code&gt;接口&lt;/code&gt;中可以定义一个和多个方法、属性 、索引指示器和事件。但与&lt;code&gt;类&lt;/code&gt;不同的是，&lt;code&gt;接口&lt;/code&gt;中仅仅是它们的&lt;code&gt;声明&lt;/code&gt;，并不提供&lt;code&gt;实现&lt;/code&gt;。因此接口是函数成员声明的集合。如果类或结构从一个接口派生，则这个类或结构负责实现该接口中所声明的所有成员。一个接口可以从多个接口继承，而一个类或结构可以实现多个接口。由于 &lt;code&gt;C#&lt;/code&gt; 语言不支持多继承，因此，如果某个类需要继承多个类的行为时，只能使用多个接口加以说明。&lt;/p&gt;
&lt;p&gt;对接口的理解：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;接口只有声明，没有实现，由继承该接口的类或者结构实现。&lt;/li&gt;
&lt;li&gt;C#的类只支持单继承，采用&lt;code&gt;接口&lt;/code&gt;变相实现了多继承。&lt;/li&gt;
&lt;li&gt;接口更多的是一种&lt;code&gt;规范约束&lt;/code&gt;，要求继承该接口的类或者结构必须对接口成员进行实现。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="C#" scheme="https://at2008.github.io/tags/C/"/>
    
      <category term="C#本质论" scheme="https://at2008.github.io/tags/C-%E6%9C%AC%E8%B4%A8%E8%AE%BA/"/>
    
      <category term="Essential C#" scheme="https://at2008.github.io/tags/Essential-C/"/>
    
  </entry>
  
  <entry>
    <title>C#本质论笔记 第6章 继承</title>
    <link href="https://at2008.github.io/2017/12/26/CSharp%E6%9C%AC%E8%B4%A8%E8%AE%BA%E7%AC%94%E8%AE%B0-%E7%AC%AC6%E7%AB%A0-%E7%BB%A7%E6%89%BF/"/>
    <id>https://at2008.github.io/2017/12/26/CSharp本质论笔记-第6章-继承/</id>
    <published>2017-12-26T02:41:00.000Z</published>
    <updated>2018-08-03T13:45:47.731Z</updated>
    
    <content type="html"><![CDATA[<p>通过继承，可以创建重用、扩展和修改在其他类中定义的行为的新类。继承主要实现重用代码，节省开发时间。C#中的继承符合下列规则：</p><ul><li>继承是可传递的。如果C从B中派生，B又从A中派生，那么C不仅继承了B中声明的成员，同样也继承了A中的成员。Object类作为所有类的基类。</li><li>派生类应当是对基类的扩展。派生类可以添加新的成员，但不能除去已经继承的成员的定义。</li><li>构造函数和析构函数不能被继承。除此之外的其它成员，不论对它们定义了怎样的访问方式，都能被继承。基类中成员的访问方式只能决定派生类能否访问它们。</li><li>派生类如果定义了与继承而来的成员同名的新成员，就可以覆盖已继承的成员。但这并不因为这派生类删除了这些成员，只是不能再访问这些成员。</li><li>类可以定义虚文法、虚属性以及虚索引指示器，它的派生类能够重载这些成员，从而实现类可以展示出多态性。</li></ul><a id="more"></a><h1 id="derived-派生"><a href="#derived-派生" class="headerlink" title="derived 派生"></a>derived 派生</h1><p>派生类只能有一个直接基类。 但是，继承是可传递的。 如果 ClassC 派生自 ClassB，并且 ClassB 派生自 ClassA，则 ClassC 会继承在 ClassB 和 ClassA 中声明的成员。</p><p>从概念上讲，派生类是基类的专门化。例如，如果有一个基类 <code>Animal</code>，则可以有一个名为 <code>Mammal</code> 的派生类，以及另一个名为 <code>Reptile</code> 的派生类。<code>Mammal</code> 是 <code>Animal</code>，<code>Reptile</code> 也是 <code>Animal</code>，但每个派生类表示基类的不同专门化。</p><p>定义要从其他类派生的类时，派生类会隐式获得基类的所有成员（除了其构造函数和终结器）。派生类因而可以重用基类中的代码，而无需重新实现。在派生类中，可以添加更多成员。通过这种方法，派生类可扩展基类的功能。</p><blockquote><p>从一个类派生出另一个类 <code>PdaItem类派生出Contact类</code>（一个类继承自另一个类 <code>Contact</code>类继承自<code>PdaItem</code>类）</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PdaItem</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> DateTime LastUpdated &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Define the Contact class as inheriting the PdaItem class</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Contact</span> : <span class="title">PdaItem</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Address &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Phone &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>使用继承的属性</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Contact contact = <span class="keyword">new</span> Contact();</span><br><span class="line">        contact.Name = <span class="string">"Inigo Montoya"</span>;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Contact</code>类自身没有定义<code>Name</code>属性，但仍然可以使用继承自 <code>PdaItem</code> 类的<code>Name</code>属性，并把它作为 Contact自身的一部分使用。除此之外，从 Contact 派生的其他任何类也会继承 PdaItem 类(以及 PdaItem的父类)的成员。这个继承链条</p><h2 id="基类和派生类之间的转换"><a href="#基类和派生类之间的转换" class="headerlink" title="基类和派生类之间的转换"></a>基类和派生类之间的转换</h2><ul><li><p>派生类型的值可以直接赋值给基类型的值，不需要添加转型操作符，不会引发异常。</p></li><li><p>反之则不成立。从基类型转换为派生类型，要求执行<strong>显式转换</strong>，并且在运行时可能会失败。</p></li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// Derived types can be implicitly converted to</span></span><br><span class="line">        <span class="comment">// base types</span></span><br><span class="line">        Contact contact = <span class="keyword">new</span> Contact();</span><br><span class="line">        PdaItem item = contact;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Base types must be cast explicitly to derived types</span></span><br><span class="line">        contact = (Contact)item;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="private访问修饰符"><a href="#private访问修饰符" class="headerlink" title="private访问修饰符"></a>private访问修饰符</h2><p>派生类继承了除构造器和析构器之外的所有基类成员。但是，继承并不意味着一定能够访问。私有成员只能在声明他们的那个类中才能访问，派生类不能访问基类的private成员（除了一个例外，派生类同时是基类的一个嵌套类）。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PdaItem</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">string</span> _Name;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Contact</span> : <span class="title">PdaItem</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        Contact contact = <span class="keyword">new</span> Contact ();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ERROR:  'PdaItem. _Name' is inaccessible</span></span><br><span class="line">        <span class="comment">// due to its protection level</span></span><br><span class="line">        <span class="comment">//contact._Name = "Inigo Montoya";  //uncomment this line and it will not compile</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="protected访问修饰符"><a href="#protected访问修饰符" class="headerlink" title="protected访问修饰符"></a>protected访问修饰符</h2><p>受保护成员在其所在的类中可由派生类实例访问。</p><p>只有在通过派生类类型进行访问时，基类的受保护成员在派生类中才是可访问的。A protected member of a base class is accessible in a derived class only if the access occurs through the derived class type.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">A</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> x = <span class="number">123</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">B</span> : <span class="title">A</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        A a = <span class="keyword">new</span> A();</span><br><span class="line">        B b = <span class="keyword">new</span> B();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Error CS1540, because x can only be accessed by</span></span><br><span class="line">        <span class="comment">// classes derived from A.</span></span><br><span class="line">        <span class="comment">// a.x = 10;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// OK, because this class derives from A.</span></span><br><span class="line">        b.x = <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>语句 <code>a.x = 10</code> 生成错误，因为它是在静态方法 Main 中生成的，而不是类 B 的实例。The statement <code>a.x = 10</code> generates an error because it is made within the static method Main, and not an instance of class B.</p><p>无法保护结构成员，因为无法继承结构。</p><p>在此示例中，<code>DerivedPoint</code> 类是从 <code>Point</code> 派生的。In this example, the class <code>DerivedPoint</code> is derived from <code>Point</code>. 因此，可以从派生类直接访问基类的受保护成员。Therefore, you can access the protected members of the base class directly from the derived class.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Point</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">DerivedPoint</span>: <span class="title">Point</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        DerivedPoint dpoint = <span class="keyword">new</span> DerivedPoint();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Direct access to protected members:</span></span><br><span class="line">        dpoint.x = <span class="number">10</span>;</span><br><span class="line">        dpoint.y = <span class="number">15</span>;</span><br><span class="line">        Console.WriteLine(<span class="string">"x = &#123;0&#125;, y = &#123;1&#125;"</span>, dpoint.x, dpoint.y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Output: x = 10, y = 15</span></span><br></pre></td></tr></table></figure><p>如果将 <code>x</code> 和 <code>y</code> 的访问级别更改为 <a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/private" target="_blank" rel="noopener">private</a>，编译器将发出错误消息：</p><p><code>&#39;Point.y&#39; is inaccessible due to its protection level.</code></p><p><code>&#39;Point.x&#39; is inaccessible due to its protection level.</code></p><h2 id="单继承-多继承-聚合（Aggregation）"><a href="#单继承-多继承-聚合（Aggregation）" class="headerlink" title="单继承 多继承 聚合（Aggregation）"></a>单继承 多继承 聚合（Aggregation）</h2><p>C++支持多继承，C#只支持单继承。在极少数需要多继承类结构的时候，一般的解决方案是使用聚合（Aggregation）；换言之，不是一个类从另外一个类继承，而是一个类包含另一个类的实例。</p><blockquote><p>用聚合解决单继承问题</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PdaItem</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> FirstName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> LastName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Contact</span> : <span class="title">PdaItem</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Person InternalPerson &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> FirstName &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> InternalPerson.FirstName; &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123; InternalPerson.FirstName = <span class="keyword">value</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> LastName &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> InternalPerson.LastName; &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123; InternalPerson.LastName = <span class="keyword">value</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法有点怪异，不够合理，有点多余。 ヾ(ﾟ∀ﾟゞ)ヾ(。￣□￣)ﾂ゜゜゜</p><h2 id="密封类"><a href="#密封类" class="headerlink" title="密封类"></a>密封类</h2><p><code>sealed</code> 修饰符可阻止其他类继承自该类。在下面的示例中，类 <code>B</code> 继承自类 <code>A</code>，但没有类可以继承自类 <code>B</code>。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">A</span> &#123;&#125;</span><br><span class="line"><span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">B</span> : <span class="title">A</span> &#123;&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>System.String</code> 类型就是用<code>sealed</code>修饰符禁止了派生。下面的代码编译不通过：</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyClass</span> : <span class="title">String</span> &#123; &#125;</span><br><span class="line"><span class="comment">/* 输出</span></span><br><span class="line"><span class="comment">错误  CS0509   “MyClass”: 无法从密封类型“string”派生</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h1 id="override-替代-覆盖-重写"><a href="#override-替代-覆盖-重写" class="headerlink" title="override 替代 覆盖 重写"></a>override 替代 覆盖 重写</h1><p><code>overload</code> 重载：指的是<strong>同一个类</strong>中有两个或多个名字相同但是<strong>参数不同</strong>的方法，(注:返回值不能区别函数是否重载)，<strong>重载没有关键字</strong>。</p><p><code>override</code> 替代 覆盖 重写：指子类对父类中<strong>虚函数或抽象函数</strong>的“覆盖”（这也就是有些书将过载翻译为覆盖的原因），但是这种“覆盖”和用new关键字来覆盖是有区别的。另外，<code>override</code> 需要和 <code>virtual</code> 对应（配合、配对）使用。<code>override</code> 似乎提高了派生类成员的优先级，例如：用基类声明类型而用派生类实例化的对象，具有<code>override</code> 修饰符的派生类成员会强制替代基类成员，而 ‘new’ 修饰符则无次优先级，还会执行基类成员。</p><p><code>new</code> 替代：显式隐藏从基类继承的成员。隐藏继承的成员时，该成员的派生版本将替换基类版本。如果基类和派生类中有同名成员，而不使用 <code>new</code> ，则会产生编译警告，好像没有更多的差异了。</p><p>基类除了构造器和析构器之外，所有成员都可以在派生类中继承。</p><h2 id="virtual"><a href="#virtual" class="headerlink" title="virtual"></a>virtual</h2><p><code>virtual</code> 关键字用于修改方法、属性、索引器或事件声明，并使它们可以在派生类中被重写。例如，此方法可被任何继承它的类替代：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">double</span> <span class="title">Area</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x * y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虚拟成员的实现可由派生类中的<a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/override" target="_blank" rel="noopener">替代成员</a>更改。有关如何使用 <code>virtual</code> 关键字的详细信息，请参阅<a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/programming-guide/classes-and-structs/versioning-with-the-override-and-new-keywords" target="_blank" rel="noopener">使用 Override 和 New 关键字进行版本控制</a>和<a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/programming-guide/classes-and-structs/knowing-when-to-use-override-and-new-keywords" target="_blank" rel="noopener">了解何时使用 Override 和 New 关键字</a>。</p><p>以下示例显示了虚拟属性：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">MyBaseClass</span> &#123;</span><br><span class="line">    <span class="comment">// virtual auto-implemented property. Overrides can only</span></span><br><span class="line">    <span class="comment">// provide specialized behavior if they implement get and set accessors.</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ordinary virtual property with backing field</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> num;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">int</span> Number &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> num; &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123; num = <span class="keyword">value</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">MyDerivedClass</span> : <span class="title">MyBaseClass</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">string</span> name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Override auto-implemented property with ordinary property</span></span><br><span class="line">    <span class="comment">// to provide specialized accessor behavior.</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">string</span> Name &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> name;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">value</span> != String.Empty) &#123;</span><br><span class="line">                name = <span class="keyword">value</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                name = <span class="string">"Unknown"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面示例中，<code>Shape</code> 类包含 <code>x</code>、<code>y</code> 两个坐标和 <code>Area()</code> 虚拟方法。不同的形状类（如 <code>Circle</code>、<code>Cylinder</code> 和 <code>Sphere</code>）继承 <code>Shape</code> 类，并为每个图形计算表面积。每个派生类都有各自的 <code>Area()</code> 替代实现。</p><p>请注意，继承的类 <code>Circle</code>、<code>Sphere</code> 和 <code>Cylinder</code> 均使用初始化基类的构造函数（参考 <a href="https://slowread.cn/2017/12/22/CSharp%E6%9C%AC%E8%B4%A8%E8%AE%BA%E7%AC%94%E8%AE%B0-%E7%AC%AC5%E7%AB%A0-%E7%B1%BB/#%E6%9E%84%E9%80%A0%E5%99%A8%E9%93%BE%EF%BC%9A%E4%BD%BF%E7%94%A8this%E8%B0%83%E7%94%A8%E5%8F%A6%E4%B8%80%E4%B8%AA%E6%9E%84%E9%80%A0%E5%99%A8" target="_blank" rel="noopener">构造器链</a>），<code>base</code> 用法参考  <a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/base" target="_blank" rel="noopener">base</a>，如下面的声明中所示。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Cylinder</span>(<span class="params"><span class="keyword">double</span> r, <span class="keyword">double</span> h</span>): <span class="title">base</span>(<span class="params">r, h</span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>根据与方法关联的对象，下面的程序通过调用 <code>Area()</code> 方法的相应实现来计算并显示每个对象的相应区域。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">TestClass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Shape</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">const</span> <span class="keyword">double</span> PI = Math.PI;</span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">double</span> x, y;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Shape</span> (<span class="params"></span>) </span>&#123; &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Shape</span> (<span class="params"><span class="keyword">double</span> x, <span class="keyword">double</span> y</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.x = x;</span><br><span class="line">            <span class="keyword">this</span>.y = y;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">double</span> <span class="title">Area</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> x * y;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Circle</span> : <span class="title">Shape</span> &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Circle</span> (<span class="params"><span class="keyword">double</span> r</span>) : <span class="title">base</span> (<span class="params">r, <span class="number">0</span></span>) </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">double</span> <span class="title">Area</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> PI * x * x;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Sphere</span> : <span class="title">Shape</span> &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Sphere</span> (<span class="params"><span class="keyword">double</span> r</span>) : <span class="title">base</span> (<span class="params">r, <span class="number">0</span></span>) </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">double</span> <span class="title">Area</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">4</span> * PI * x * x;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Cylinder</span> : <span class="title">Shape</span> &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Cylinder</span> (<span class="params"><span class="keyword">double</span> r, <span class="keyword">double</span> h</span>) : <span class="title">base</span> (<span class="params">r, h</span>) </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">double</span> <span class="title">Area</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span> * PI * x * x + <span class="number">2</span> * PI * x * y;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> r = <span class="number">3.0</span>, h = <span class="number">5.0</span>;</span><br><span class="line">        Shape c = <span class="keyword">new</span> Circle (r);</span><br><span class="line">        Shape s = <span class="keyword">new</span> Sphere (r);</span><br><span class="line">        Shape l = <span class="keyword">new</span> Cylinder (r, h);</span><br><span class="line">        <span class="comment">// Display results:</span></span><br><span class="line">        Console.WriteLine (<span class="string">"Area of Circle   = &#123;0:F2&#125;"</span>, c.Area ());</span><br><span class="line">        Console.WriteLine (<span class="string">"Area of Sphere   = &#123;0:F2&#125;"</span>, s.Area ());</span><br><span class="line">        Console.WriteLine (<span class="string">"Area of Cylinder = &#123;0:F2&#125;"</span>, l.Area ());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    Output:</span></span><br><span class="line"><span class="comment">    Area of Circle   = 28.27</span></span><br><span class="line"><span class="comment">    Area of Sphere   = 113.10</span></span><br><span class="line"><span class="comment">    Area of Cylinder = 150.80</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><blockquote><blockquote><p>对成员进行重载，会造成“运行时”调用最深的或者说派生的最远的实现，示例如下：</p></blockquote></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        Contact contact;</span><br><span class="line">        PdaItem item;</span><br><span class="line"></span><br><span class="line">        contact = <span class="keyword">new</span> Contact ();</span><br><span class="line">        item = contact;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Set the name via PdaItem variable</span></span><br><span class="line">        item.Name = <span class="string">"Inigo Montoya"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Display that FirstName &amp; LastName</span></span><br><span class="line">        <span class="comment">// properties were set.</span></span><br><span class="line">        Console.WriteLine (<span class="string">"&#123;0&#125; &#123;1&#125;"</span>,</span><br><span class="line">            contact.FirstName, contact.LastName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PdaItem</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Contact</span> : <span class="title">PdaItem</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">string</span> Name &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> FirstName + <span class="string">" "</span> + LastName;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">set</span> &#123;</span><br><span class="line">            <span class="keyword">string</span>[] names = <span class="keyword">value</span>.Split (<span class="string">' '</span>);</span><br><span class="line">            <span class="comment">// Error handling not shown.</span></span><br><span class="line">            FirstName = names[<span class="number">0</span>];</span><br><span class="line">            LastName = names[<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> FirstName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> LastName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上例代码中，调用 <code>item.Name</code>，而<code>item</code>被声明为一个<code>PdaItem</code>。但是，<code>contact</code>的 <code>FirstName</code> 和 <code>LastName</code> 还是会被处理。这里的规则是：“运行时”遇到虚方法时，它会调用虚成员派生得最远的重写。在上例中，代码实例化一个<code>Contact</code>并调用<code>Contact.Name</code>，因为<code>Contact</code>包含了<code>Name</code>派生的最远的实现。</p><p>虚方法不应包含关键代码，因为如果派生类重写了它，那些代码就永远得不到调用。创建类时，必须<strong>谨慎选择</strong>是否<strong>允许重写方法</strong>，因为控制不了派生的实现。</p><h2 id="new"><a href="#new" class="headerlink" title="new"></a>new</h2><p>前面例子中，如果重写子类方法却没有使用override关键字，编译器会报告警告信息，如下所示：</p><pre><code>warning CS0114: “Contact.Name”隐藏继承的成员“PdaItem.Name”。若要使当前成员重写该实现，请添加关键字 override。否则，添加关键字 new。</code></pre><p><code>override</code> 修饰符用于扩展基类方法，而 <code>new</code> 修饰符则用于隐藏该方法。</p><p>在用作声明修饰符时，<code>new</code> 关键字可以显式隐藏从基类继承的成员。隐藏继承的成员时，该成员的派生版本将替换基类版本。虽然可以不使用 <code>new</code> 修饰符来隐藏成员，但将收到编译器警告。 如果使用 <code>new</code> 来显式隐藏成员，将禁止此警告。如果不使用 <code>new</code> ，则执行基类的成员，而忽略派生类的成员。</p><p>在此示例中，基类 <code>BaseClass</code> 和派生类 <code>DerivedClass</code> 使用相同的字段名 <code>x</code>，从而隐藏了继承字段的值。另外还演示了如何使用完全限定名访问基类的隐藏成员。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">BaseClass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> x = <span class="number">55</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> y = <span class="number">22</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DerivedClass</span> : <span class="title">BaseClass</span> &#123;</span><br><span class="line">    <span class="comment">// Hide field 'x'.</span></span><br><span class="line">    <span class="keyword">new</span> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> x = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// Display the new value of x:</span></span><br><span class="line">        Console.WriteLine (x);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Display the hidden value of x:</span></span><br><span class="line">        Console.WriteLine (BaseClass.x);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Display the unhidden member y:</span></span><br><span class="line">        Console.WriteLine (y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Output:</span></span><br><span class="line"><span class="comment">100</span></span><br><span class="line"><span class="comment">55</span></span><br><span class="line"><span class="comment">22</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>使用<code>new</code>关键字后，具有 <code>BaseClass</code> 类型的变量继续访问 <code>BaseClass</code> 的成员，而具有 <code>DerivedClass</code> 类型的变量首先继续访问 <code>DerivedClass</code> 中的成员，然后再考虑从 <code>BaseClass</code> 继承的成员。</p><h2 id="示例：无修饰符-无同名成员"><a href="#示例：无修饰符-无同名成员" class="headerlink" title="示例：无修饰符 无同名成员"></a>示例：无修饰符 无同名成员</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">BaseClass</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Method1</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        Console.WriteLine (<span class="string">"Base - Method1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">DerivedClass</span> : <span class="title">BaseClass</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Method2</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        Console.WriteLine (<span class="string">"Derived - Method2"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span> (<span class="params"><span class="keyword">string</span>[] args</span>) </span>&#123;</span><br><span class="line">        BaseClass bc = <span class="keyword">new</span> BaseClass ();</span><br><span class="line">        DerivedClass dc = <span class="keyword">new</span> DerivedClass ();</span><br><span class="line">        BaseClass bcdc = <span class="keyword">new</span> DerivedClass ();</span><br><span class="line"></span><br><span class="line">        bc.Method1 ();</span><br><span class="line">        dc.Method1 ();</span><br><span class="line">        dc.Method2 ();</span><br><span class="line">        bcdc.Method1 ();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Output:</span></span><br><span class="line">    <span class="comment">// Base - Method1</span></span><br><span class="line">    <span class="comment">// Base - Method1</span></span><br><span class="line">    <span class="comment">// Derived - Method2</span></span><br><span class="line">    <span class="comment">// Base - Method1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="示例：无修饰符-有同名成员"><a href="#示例：无修饰符-有同名成员" class="headerlink" title="示例：无修饰符 有同名成员"></a>示例：无修饰符 有同名成员</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">BaseClass</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Method1</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        Console.WriteLine (<span class="string">"Base - Method1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Method2</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        Console.WriteLine (<span class="string">"Base - Method2"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">DerivedClass</span> : <span class="title">BaseClass</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Method2</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        Console.WriteLine (<span class="string">"Derived - Method2"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span> (<span class="params"><span class="keyword">string</span>[] args</span>) </span>&#123;</span><br><span class="line">        BaseClass bc = <span class="keyword">new</span> BaseClass ();</span><br><span class="line">        DerivedClass dc = <span class="keyword">new</span> DerivedClass ();</span><br><span class="line">        BaseClass bcdc = <span class="keyword">new</span> DerivedClass ();</span><br><span class="line"></span><br><span class="line">        bc.Method1 ();</span><br><span class="line">        bc.Method2 ();</span><br><span class="line">        dc.Method1 ();</span><br><span class="line">        dc.Method2 ();</span><br><span class="line">        bcdc.Method1 ();</span><br><span class="line">        bcdc.Method2 ();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Output:</span></span><br><span class="line">    <span class="comment">// Base - Method1</span></span><br><span class="line">    <span class="comment">// Base - Method2</span></span><br><span class="line">    <span class="comment">// Base - Method1</span></span><br><span class="line">    <span class="comment">// Derived - Method2</span></span><br><span class="line">    <span class="comment">// Base - Method1</span></span><br><span class="line">    <span class="comment">// Base - Method2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你将看到在 <code>BaseClass</code> 中添加 <code>Method2</code> 方法将引发警告。警告显示 <code>DerivedClass</code> 中的 <code>Method2</code> 方法隐藏了 <code>BaseClass</code> 中的 <code>Method2</code> 方法。如果希望获得该结果，则建议使用 <code>Method2</code> 定义中的 <code>new</code> 关键字。或者，可重命名 <code>Method2</code> 方法之一来消除警告。</p><h2 id="示例：new-修饰符-有同名成员"><a href="#示例：new-修饰符-有同名成员" class="headerlink" title="示例：new 修饰符 有同名成员"></a>示例：new 修饰符 有同名成员</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">BaseClass</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Method1</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        Console.WriteLine (<span class="string">"Base - Method1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Method2</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        Console.WriteLine (<span class="string">"Base - Method2"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">DerivedClass</span> : <span class="title">BaseClass</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> new <span class="keyword">void</span> <span class="title">Method2</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        Console.WriteLine (<span class="string">"Derived - Method2"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span> (<span class="params"><span class="keyword">string</span>[] args</span>) </span>&#123;</span><br><span class="line">        BaseClass bc = <span class="keyword">new</span> BaseClass ();</span><br><span class="line">        DerivedClass dc = <span class="keyword">new</span> DerivedClass ();</span><br><span class="line">        BaseClass bcdc = <span class="keyword">new</span> DerivedClass ();</span><br><span class="line"></span><br><span class="line">        bc.Method1 ();</span><br><span class="line">        bc.Method2 ();</span><br><span class="line">        dc.Method1 ();</span><br><span class="line">        dc.Method2 ();</span><br><span class="line">        bcdc.Method1 ();</span><br><span class="line">        bcdc.Method2 ();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Output:</span></span><br><span class="line">    <span class="comment">// Base - Method1</span></span><br><span class="line">    <span class="comment">// Base - Method2</span></span><br><span class="line">    <span class="comment">// Base - Method1</span></span><br><span class="line">    <span class="comment">// Derived - Method2</span></span><br><span class="line">    <span class="comment">// Base - Method1</span></span><br><span class="line">    <span class="comment">// Base - Method2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果与上例不使用 <code>new</code> 修饰符是一样的，只是不再有警告。就CIL来说，new修饰符对编译器生成的代码没有任何影响。从 C# 的角度看，它唯一的作用就是移除编译器警告。</p><h2 id="示例：virtual-override-修饰符"><a href="#示例：virtual-override-修饰符" class="headerlink" title="示例：virtual override 修饰符"></a>示例：virtual override 修饰符</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">BaseClass</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Method1</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        Console.WriteLine (<span class="string">"Base - Method1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Method2</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        Console.WriteLine (<span class="string">"Base - Method2"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">DerivedClass</span> : <span class="title">BaseClass</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Method1</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        Console.WriteLine (<span class="string">"Derived - Method1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> new <span class="keyword">void</span> <span class="title">Method2</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        Console.WriteLine (<span class="string">"Derived - Method2"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span> (<span class="params"><span class="keyword">string</span>[] args</span>) </span>&#123;</span><br><span class="line">        BaseClass bc = <span class="keyword">new</span> BaseClass ();</span><br><span class="line">        DerivedClass dc = <span class="keyword">new</span> DerivedClass ();</span><br><span class="line">        BaseClass bcdc = <span class="keyword">new</span> DerivedClass ();</span><br><span class="line"></span><br><span class="line">        bc.Method1 ();</span><br><span class="line">        bc.Method2 ();</span><br><span class="line">        dc.Method1 ();</span><br><span class="line">        dc.Method2 ();</span><br><span class="line">        bcdc.Method1 ();</span><br><span class="line">        bcdc.Method2 ();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Output:</span></span><br><span class="line">    <span class="comment">// Base - Method1</span></span><br><span class="line">    <span class="comment">// Base - Method2</span></span><br><span class="line">    <span class="comment">// Derived - Method1</span></span><br><span class="line">    <span class="comment">// Derived - Method2</span></span><br><span class="line">    <span class="comment">// Derived - Method1</span></span><br><span class="line">    <span class="comment">// Base - Method2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 <code>override</code> 修饰符可使 <code>bcdc</code> 访问 <code>DerivedClass</code> 中定义的 <code>Method1</code> 方法。通常，这是继承层次结构中所需的行为。让具有从派生类创建的值的对象使用派生类中定义的方法。可使用 <code>override</code> 扩展基类方法实现该行为。</p><h2 id="sealed-修饰符"><a href="#sealed-修饰符" class="headerlink" title="sealed 修饰符"></a>sealed 修饰符</h2><p>类使用 sealed 修饰符是禁止从该类继承。类似的，虚成员也可以密封。一般很少这样用，除非迫切需要这种限制。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">A</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Method</span> (<span class="params"></span>) </span>&#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">B</span> : <span class="title">A</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">sealed</span> <span class="keyword">void</span> <span class="title">Method</span> (<span class="params"></span>) </span>&#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">C</span> : <span class="title">B</span> &#123;</span><br><span class="line">    <span class="comment">// ERROR:  Cannot override sealed members</span></span><br><span class="line">    <span class="comment">//public override void Method()</span></span><br><span class="line">    <span class="comment">//&#123;</span></span><br><span class="line">    <span class="comment">//&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="base-成员"><a href="#base-成员" class="headerlink" title="base 成员"></a>base 成员</h2><p><code>base</code> 关键字用于从派生类中访问基类的成员：</p><ul><li><p>调用基类上已被其他方法重写的方法。Call a method on the base class that has been overridden by another method.</p></li><li><p>指定创建派生类实例时应调用的基类构造函数。</p></li></ul><p>在本例中，基类 <code>Person</code> 和派生类 <code>Employee</code> 都有一个名为 <code>Getinfo</code> 的方法通过使用 <code>base</code> 关键字，可以从派生类中调用基类的 <code>Getinfo</code> 方法。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Person</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">string</span> ssn = <span class="string">"444-55-6666"</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">string</span> name = <span class="string">"John L. Malgraine"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">GetInfo</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        Console.WriteLine (<span class="string">"Name: &#123;0&#125;"</span>, name);</span><br><span class="line">        Console.WriteLine (<span class="string">"SSN: &#123;0&#125;"</span>, ssn);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title">Employee</span> : <span class="title">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> id = <span class="string">"ABC567EFG"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">GetInfo</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// Calling the base class GetInfo method:</span></span><br><span class="line">        <span class="keyword">base</span>.GetInfo ();</span><br><span class="line">        Console.WriteLine (<span class="string">"Employee ID: &#123;0&#125;"</span>, id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">TestClass</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        Employee E = <span class="keyword">new</span> Employee ();</span><br><span class="line">        E.GetInfo ();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Output</span></span><br><span class="line"><span class="comment">Name: John L. Malgraine</span></span><br><span class="line"><span class="comment">SSN: 444-55-6666</span></span><br><span class="line"><span class="comment">Employee ID: ABC567EFG</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>本示例显示如何指定在创建派生类实例时调用的基类构造函数。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">BaseClass</span> &#123;</span><br><span class="line">    <span class="keyword">int</span> num;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BaseClass</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        Console.WriteLine (<span class="string">"in BaseClass()"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BaseClass</span> (<span class="params"><span class="keyword">int</span> i</span>) </span>&#123;</span><br><span class="line">        num = i;</span><br><span class="line">        Console.WriteLine (<span class="string">"in BaseClass(int i)"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">GetNum</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> num;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DerivedClass</span> : <span class="title">BaseClass</span> &#123;</span><br><span class="line">    <span class="comment">// This constructor will call BaseClass.BaseClass()</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DerivedClass</span> (<span class="params"></span>) : <span class="title">base</span> (<span class="params"></span>) </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// This constructor will call BaseClass.BaseClass(int i)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DerivedClass</span> (<span class="params"><span class="keyword">int</span> i</span>) : <span class="title">base</span> (<span class="params">i</span>) </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        DerivedClass md = <span class="keyword">new</span> DerivedClass ();</span><br><span class="line">        DerivedClass md1 = <span class="keyword">new</span> DerivedClass (<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Output:</span></span><br><span class="line"><span class="comment">in BaseClass()</span></span><br><span class="line"><span class="comment">in BaseClass(int i)</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h1 id="abstract-抽象"><a href="#abstract-抽象" class="headerlink" title="abstract 抽象"></a>abstract 抽象</h1><p>使用 <a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/abstract" target="_blank" rel="noopener">abstract</a> 关键字可以创建不完整且必须在派生类中实现的类和 <a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/class" target="_blank" rel="noopener">class</a> 成员。</p><p>通过在类定义前面放置关键字 <code>abstract</code>，可以将类声明为抽象类。</p><ul><li>抽象类是仅供派生的类。</li><li>抽象类无法实例化，只能实例化从它派生的类。</li><li>抽象成员应当被重写，所以自动成为虚成员（但不能用<code>virtual</code>关键字显示声明）。</li><li>抽象成员不能声明为私有，私有的话派生类看不到它们。</li></ul><p>理解：</p><ul><li>abstract 抽象：显式 <code>⬇</code> 强制要求所有派生类来提供实现。</li><li>override 替代：显式 <code>⬆</code> 强制重写基类成员，。</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">A</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Class members here.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>抽象类不能实例化</strong>。抽象类的用途是提供一个可供多个派生类共享的通用基类定义。例如，类库可以定义一个抽象类，将其用作多个类库函数的参数，并要求使用该库的程序员通过创建派生类来提供自己的类实现。</p><p>抽象类也可以定义抽象方法。方法是将关键字 <code>abstract</code> 添加到方法的返回类型的前面。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">A</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">DoWork</span>(<span class="params"><span class="keyword">int</span> i</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>例子：抽象类不能实例化</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">PdaItem</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PdaItem</span> (<span class="params"><span class="keyword">string</span> name</span>) </span>&#123;</span><br><span class="line">        Name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        PdaItem item;</span><br><span class="line">        <span class="comment">// ERROR:  Cannot create an instance of the abstract class</span></span><br><span class="line">        <span class="comment">//item = new PdaItem("Inigo Montoya"); //uncomment this line and it will not compile</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>例子：抽象成员。抽象成员没有实现的方法或者属性，其作用是强制所有派生类提供实现。</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Define an abstract class</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">PdaItem</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PdaItem</span> (<span class="params"><span class="keyword">string</span> name</span>) </span>&#123;</span><br><span class="line">        Name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">string</span> <span class="title">GetSummary</span> (<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Contact</span> : <span class="title">PdaItem</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Contact</span> (<span class="params"><span class="keyword">string</span> name</span>) : <span class="title">base</span> (<span class="params">name</span>) </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">string</span> Name &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> FirstName + <span class="string">" "</span> + LastName;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">set</span> &#123;</span><br><span class="line">            <span class="keyword">string</span>[] names = <span class="keyword">value</span>.Split (<span class="string">' '</span>);</span><br><span class="line">            <span class="comment">// Error handling not shown.</span></span><br><span class="line">            FirstName = names[<span class="number">0</span>];</span><br><span class="line">            LastName = names[<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> FirstName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> LastName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Address &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">string</span> <span class="title">GetSummary</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">string</span>.Format (</span><br><span class="line">            <span class="string">"FirstName: &#123;0&#125;\n"</span> +</span><br><span class="line">            <span class="string">"LastName: &#123;1&#125;\n"</span> +</span><br><span class="line">            <span class="string">"Address: &#123;2&#125;"</span>, FirstName, LastName, Address);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Appointment</span> : <span class="title">PdaItem</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Appointment</span> (<span class="params"><span class="keyword">string</span> name</span>):</span></span><br><span class="line"><span class="function">        <span class="title">base</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">            Name = name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> DateTime StartDateTime &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> DateTime EndDateTime &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Location &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">string</span> <span class="title">GetSummary</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">string</span>.Format (</span><br><span class="line">            <span class="string">"Subject: &#123;0&#125;"</span> + Environment.NewLine +</span><br><span class="line">            <span class="string">"Start: &#123;1&#125;"</span> + Environment.NewLine +</span><br><span class="line">            <span class="string">"End: &#123;2&#125;"</span> + Environment.NewLine +</span><br><span class="line">            <span class="string">"Location: &#123;3&#125;"</span>,</span><br><span class="line">            Name, StartDateTime, EndDateTime, Location);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>抽象方法没有实现，所以方法定义后面是分号，而不是常规的方法块。抽象类的派生类必须实现所有抽象方法。当抽象类从基类继承虚方法时，抽象类可以使用抽象方法(<code>abstract method</code> )重写该虚方法。例如:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// compile with: /target:library</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">D</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">DoWork</span>(<span class="params"><span class="keyword">int</span> i</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// Original implementation.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">E</span> : <span class="title">D</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">DoWork</span>(<span class="params"><span class="keyword">int</span> i</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">F</span> : <span class="title">E</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">DoWork</span>(<span class="params"><span class="keyword">int</span> i</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// New implementation.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果将 <code>virtual</code> 方法声明为 <code>abstract</code>，则该方法对于从抽象类继承的所有类而言仍然是虚方法。继承抽象方法的类无法访问方法的原始实现，因此在上一示例中，类 F 上的 <code>DoWork</code> 无法调用类 D 上的 <code>DoWork</code>。通过这种方式，抽象类可强制派生类向虚拟方法提供新的方法实现。</p><h1 id="多态性-Polymorphism"><a href="#多态性-Polymorphism" class="headerlink" title="多态性 Polymorphism"></a>多态性 Polymorphism</h1><p>多态性常被视为自封装和继承之后，面向对象的编程的第三个支柱。Polymorphism（多态性）是一个希腊词，指“多种形态”，多态性具有两个截然不同的方面：</p><ul><li><p>在运行时，在方法参数和集合或数组等位置，派生类的对象可以作为基类的对象处理。At run time, objects of a derived class may be treated as objects of a base class in places such as method parameters and collections or arrays. 发生此情况时，该对象的声明类型不再与运行时类型相同。When this occurs, the object’s declared type is no longer identical to its run-time type.</p></li><li><p>基类可以定义并实现<a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/virtual" target="_blank" rel="noopener">虚</a>方法，派生类可以<a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/override" target="_blank" rel="noopener">重写</a>这些方法，即派生类提供自己的定义和实现。在运行时，客户端代码调用该方法，CLR 查找对象的运行时类型，并调用虚方法的重写方法。因此，你可以在源代码中调用基类的方法，但执行该方法的派生类版本。</p></li></ul><p>虚方法允许你以统一方式处理多组相关的对象。例如，假定你有一个绘图应用程序，允许用户在绘图图面上创建各种形状。你在编译时不知道用户将创建哪些特定类型的形状。但应用程序必须跟踪创建的所有类型的形状，并且必须更新这些形状以响应用户鼠标操作。你可以使用多态性通过两个基本步骤解决这一问题：</p><ol><li>创建一个类层次结构，其中每个特定形状类均派生自一个公共基类。</li><li>使用虚方法通过对基类方法的单个调用来调用任何派生类上的相应方法。</li></ol><p>首先，创建一个名为 <code>Rectangle Shape</code> 的基类，并创建一些派生类，例如 <code>Triangle Circle</code>、 和 。为 <code>Draw Shape</code> 类提供一个名为  的虚方法，并在每个派生类中重写该方法以绘制该类表示的特定形状。创建一个 <code>List&lt;Shape&gt;</code> 对象，并向该对象添加 Circle、Triangle 和 Rectangle。若要更新绘图图面，请使用 <a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/foreach-in" target="_blank" rel="noopener">foreach</a> 循环对该列表进行循环访问，并对其中的每个 <code>Shape</code> 对象调用 <code>Draw</code> 方法。虽然列表中的每个对象都具有声明类型 <code>Shape</code> ，但调用的将是运行时类型（该方法在每个派生类中的重写版本）。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Shape</span> &#123;</span><br><span class="line">    <span class="comment">// A few example members</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> X &#123; <span class="keyword">get</span>; <span class="keyword">private</span> <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> Y &#123; <span class="keyword">get</span>; <span class="keyword">private</span> <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> Height &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> Width &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Virtual method</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Draw</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        Console.WriteLine (<span class="string">"Performing base class drawing tasks"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Circle</span> : <span class="title">Shape</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Draw</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// Code to draw a circle...</span></span><br><span class="line">        Console.WriteLine (<span class="string">"Drawing a circle"</span>);</span><br><span class="line">        <span class="keyword">base</span>.Draw ();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title">Rectangle</span> : <span class="title">Shape</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Draw</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// Code to draw a rectangle...</span></span><br><span class="line">        Console.WriteLine (<span class="string">"Drawing a rectangle"</span>);</span><br><span class="line">        <span class="keyword">base</span>.Draw ();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title">Triangle</span> : <span class="title">Shape</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Draw</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// Code to draw a triangle...</span></span><br><span class="line">        Console.WriteLine (<span class="string">"Drawing a triangle"</span>);</span><br><span class="line">        <span class="keyword">base</span>.Draw ();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span> (<span class="params"><span class="keyword">string</span>[] args</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// Polymorphism at work #1: a Rectangle, Triangle and Circle</span></span><br><span class="line">        <span class="comment">// can all be used whereever a Shape is expected. No cast is</span></span><br><span class="line">        <span class="comment">// required because an implicit conversion exists from a derived </span></span><br><span class="line">        <span class="comment">// class to its base class.</span></span><br><span class="line">        <span class="keyword">var</span> shapes = <span class="keyword">new</span> List&lt;Shape&gt; &#123;</span><br><span class="line">            <span class="keyword">new</span> Rectangle (),</span><br><span class="line">            <span class="keyword">new</span> Triangle (),</span><br><span class="line">            <span class="keyword">new</span> Circle ()</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Polymorphism at work #2: the virtual method Draw is</span></span><br><span class="line">        <span class="comment">// invoked on each of the derived classes, not the base class.</span></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> shape <span class="keyword">in</span> shapes) &#123;</span><br><span class="line">            shape.Draw ();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Keep the console open in debug mode.</span></span><br><span class="line">        Console.WriteLine (<span class="string">"Press any key to exit."</span>);</span><br><span class="line">        Console.ReadKey ();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Output:</span></span><br><span class="line"><span class="comment">    Drawing a rectangle</span></span><br><span class="line"><span class="comment">    Performing base class drawing tasks</span></span><br><span class="line"><span class="comment">    Drawing a triangle</span></span><br><span class="line"><span class="comment">    Performing base class drawing tasks</span></span><br><span class="line"><span class="comment">    Drawing a circle</span></span><br><span class="line"><span class="comment">    Performing base class drawing tasks</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>在 C# 中，每个类型都是多态的，因为包括用户定义类型在内的所有类型都继承自 <a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.object" target="_blank" rel="noopener">Object</a>。</p><h2 id="虚成员-Virtual-Members"><a href="#虚成员-Virtual-Members" class="headerlink" title="虚成员 Virtual Members"></a>虚成员 Virtual Members</h2><p>当派生类从基类继承时，它会获得基类的所有方法、字段、属性和事件。派生类的设计器可以选择是否：</p><ul><li><p>重写基类中的虚拟成员</p></li><li><p>继承最接近的基类方法而不重写它</p></li><li><p>定义隐藏基类实现的成员的新非虚实现</p></li></ul><p>仅当基类成员声明为 <a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/virtual" target="_blank" rel="noopener">virtual</a> 或 <a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/abstract" target="_blank" rel="noopener">abstract</a> 时，派生类才能重写基类成员。派生成员必须使用 <a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/override" target="_blank" rel="noopener">override</a> 关键字显式指示该方法将参与虚调用。以下代码提供了一个示例：The following code provides an example:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">BaseClass</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">DoWork</span>(<span class="params"></span>) </span>&#123; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">int</span> WorkProperty</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> <span class="number">0</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DerivedClass</span> : <span class="title">BaseClass</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">DoWork</span>(<span class="params"></span>) </span>&#123; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">int</span> WorkProperty</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> <span class="number">0</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>字段不能是虚拟的，只有方法、属性、事件和索引器才可以是虚拟的。当派生类重写某个虚拟成员时，即使该派生类的实例被当作基类的实例访问，也会调用该成员。以下代码提供了一个示例：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">DerivedClass B = <span class="keyword">new</span> DerivedClass();</span><br><span class="line">B.DoWork();  <span class="comment">// Calls the new method.</span></span><br><span class="line"></span><br><span class="line">BaseClass A = (BaseClass)B;</span><br><span class="line">A.DoWork();  <span class="comment">// Also calls the new method.</span></span><br></pre></td></tr></table></figure><p>虚方法和属性允许派生类扩展基类，而无需使用方法的基类实现。有关详细信息，请参阅<a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/programming-guide/classes-and-structs/versioning-with-the-override-and-new-keywords" target="_blank" rel="noopener">使用 Override 和 New 关键字进行版本控制</a>。接口提供另一种方式来定义将实现留给派生类的方法或方法集。有关详细信息，请参阅<a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/programming-guide/interfaces/index" target="_blank" rel="noopener">接口</a>。</p><h2 id="使用新成员隐藏基类成员-Hiding-Base-Class-Members-with-New-Members"><a href="#使用新成员隐藏基类成员-Hiding-Base-Class-Members-with-New-Members" class="headerlink" title="使用新成员隐藏基类成员 Hiding Base Class Members with New Members"></a>使用新成员隐藏基类成员 Hiding Base Class Members with New Members</h2><p>如果希望派生成员具有与基类中的成员相同的名称，但又不希望派生成员参与虚调用，则可以使用 <a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/new" target="_blank" rel="noopener">new</a> 关键字。<code>new</code> 关键字放置在要替换的类成员的返回类型之前。以下代码提供了一个示例：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">BaseClass</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DoWork</span>(<span class="params"></span>) </span>&#123; WorkField++; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> WorkField;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> WorkProperty</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> <span class="number">0</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DerivedClass</span> : <span class="title">BaseClass</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> new <span class="keyword">void</span> <span class="title">DoWork</span>(<span class="params"></span>) </span>&#123; WorkField++; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">new</span> <span class="keyword">int</span> WorkField;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">new</span> <span class="keyword">int</span> WorkProperty</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> <span class="number">0</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过将派生类的实例强制转换为基类的实例，仍然可以从客户端代码访问隐藏的基类成员。例如：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">DerivedClass B = <span class="keyword">new</span> DerivedClass();</span><br><span class="line">B.DoWork();  <span class="comment">// Calls the new method.</span></span><br><span class="line"></span><br><span class="line">BaseClass A = (BaseClass)B;</span><br><span class="line">A.DoWork();  <span class="comment">// Calls the old method.</span></span><br></pre></td></tr></table></figure><h2 id="阻止派生类重写虚拟成员-Preventing-Derived-Classes-from-Overriding-Virtual-Members"><a href="#阻止派生类重写虚拟成员-Preventing-Derived-Classes-from-Overriding-Virtual-Members" class="headerlink" title="阻止派生类重写虚拟成员 Preventing Derived Classes from Overriding Virtual Members"></a>阻止派生类重写虚拟成员 Preventing Derived Classes from Overriding Virtual Members</h2><p>无论在虚拟成员和最初声明虚拟成员的类之间已声明了多少个类，虚拟成员永远都是虚拟的。 如果类 A 声明了一个虚拟成员，类 B 从 A 派生，类 C 从类 B 派生，则类 C 继承该虚拟成员，并且可以选择重写它，而不管类 B 是否为该成员声明了重写。以下代码提供了一个示例：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">A</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">DoWork</span>(<span class="params"></span>) </span>&#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">B</span> : <span class="title">A</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">DoWork</span>(<span class="params"></span>) </span>&#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>派生类可以通过将重写声明为 <a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/sealed" target="_blank" rel="noopener">sealed</a> 来停止虚拟继承。这需要在类成员声明中的 <code>override</code>sealed<code></code> 关键字前面放置  关键字。以下代码提供了一个示例：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">C</span> : <span class="title">B</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">DoWork</span>(<span class="params"></span>) </span>&#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上一示例中，方法 <code>DoWork</code> 对从 C 派生的任何类都不再是虚方法。它对 C 的实例仍是虚拟的，即使它们转换为类型 B 或类型 A。使用 <code>new</code> 关键字可以将密封方法替换为派生类，如下方示例所示：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">D</span> : <span class="title">C</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> new <span class="keyword">void</span> <span class="title">DoWork</span>(<span class="params"></span>) </span>&#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在此情况下，如果在 D 中使用类型为 D 的变量调用 <code>DoWork</code>，被调用的将是新的 。如果使用类型为 C、B 或 A 的变量访问 D 的实例，对 <code>DoWork</code> 的调用将遵循虚拟继承的规则，即把这些调用传送到类 C 的实现。</p><h2 id="从派生类访问基类虚拟成员-Accessing-Base-Class-Virtual-Members-from-Derived-Classes"><a href="#从派生类访问基类虚拟成员-Accessing-Base-Class-Virtual-Members-from-Derived-Classes" class="headerlink" title="从派生类访问基类虚拟成员 Accessing Base Class Virtual Members from Derived Classes"></a>从派生类访问基类虚拟成员 Accessing Base Class Virtual Members from Derived Classes</h2><p>已替换或重写某个方法或属性的派生类仍然可以使用基关键字访问基类的该方法或属性。以下代码提供了一个示例：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Base</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">DoWork</span>(<span class="params"></span>) </span>&#123;<span class="comment">/*...*/</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Derived</span> : <span class="title">Base</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">DoWork</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//Perform Derived's work here</span></span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        <span class="comment">// Call DoWork on base class</span></span><br><span class="line">        <span class="keyword">base</span>.DoWork();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有关详细信息，请参阅 <a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/base" target="_blank" rel="noopener">base</a>。</p><h1 id="System-Object-基类"><a href="#System-Object-基类" class="headerlink" title="System.Object 基类"></a>System.Object 基类</h1><p>System.Object在.Net中是所有类型的基类，任何类型都直接或间接地继承自System.Object。没有指定基类的类型都默认继承于System.Object。</p><p>由于所有的类型都继承于System.Object。因此，所有的类型都具有下面这些特性:</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>GetType()</td><td>获取对象的类型.</td></tr><tr><td>ToString()</td><td>获取对象的字符串信息，默认返回对象带命名空间的全名。</td></tr><tr><td>public virtual bool Equals(Object obj);</td><td>确定指定的对象是否等于当前对象。</td></tr><tr><td>public static bool Equals(Object objA,Object objB);</td><td>确定指定的对象实例是否被视为相等。</td></tr><tr><td>public static bool ReferenceEquals(Object objA,Object objB);</td><td>确定指定的 Object 实例是否是相同的实例。</td></tr><tr><td>GetHashCode()</td><td>获取对象的值的散列码。</td></tr><tr><td>Finalize()</td><td>在垃圾回收时，进行资源管理。</td></tr><tr><td>MemberwiseClone()</td><td>对象实例的浅拷贝。</td></tr></tbody></table><h1 id="is"><a href="#is" class="headerlink" title="is"></a>is</h1><p>检查对象是否与给定类型兼容，或（从 C# 7 开始）针对某个模式测试表达式。</p><h2 id="类型兼容性测试Testing-for-type-compatibility"><a href="#类型兼容性测试Testing-for-type-compatibility" class="headerlink" title="类型兼容性测试Testing for type compatibility"></a>类型兼容性测试Testing for type compatibility</h2><p><code>is</code> 关键字在运行时评估类型兼容性。它确定对象实例或表达式结果是否可转换为指定类型。语法如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">expr <span class="keyword">is</span> type</span><br></pre></td></tr></table></figure><p>其中 <em>expr</em> 是计算结果为某个类型的实例的表达式，而 <em>type</em> 是 <em>expr</em> 结果要转换到的类型的名称。如果 <em>expr</em> 非空，并且通过计算表达式得出的对象可转换为 <em>type</em>，则 <code>is</code> 语句为 <code>true</code>；否则返回 <code>false</code>。</p><p>例如，以下代码确定 <code>obj</code> 是否可转换为 <code>Person</code> 类型的实例：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (obj <span class="keyword">is</span> Person) &#123;</span><br><span class="line">   <span class="comment">// Do something if obj is a Person.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果满足以下条件，则 <code>is</code> 语句为 true：</p><ul><li><p><em>expr</em> 是与 <em>type</em> 具有相同类型的一个实例。</p></li><li><p><em>expr</em> 是派生自 <em>type</em> 的类型的一个实例。换言之，<em>expr</em> 结果可以向上转换为 <em>type</em> 的一个实例。</p></li><li><p><em>expr</em> 具有属于 <em>type</em> 的一个基类的编译时类型，<em>expr</em> 还具有属于 <em>type</em> 或派生自 <em>type</em> 的运行时类型。变量的编译时类型是其声明中定义的变量类型。变量的运行时类型是分配给该变量的实例类型。</p></li><li><p><em>expr</em> 是实现 <em>type</em> 接口的类型的一个实例。</p></li></ul><p>下例表明，对于所有这些转换，<code>is</code> 表达式的计算结果都为 <code>true</code>。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Class1</span> : <span class="title">IFormatProvider</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">object</span> <span class="title">GetFormat</span>(<span class="params">Type t</span>)</span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (t.Equals(<span class="keyword">this</span>.GetType()))      </span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Class2</span> : <span class="title">Class1</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">int</span> Value &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Example</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> cl1 = <span class="keyword">new</span> Class1();</span><br><span class="line">      Console.WriteLine(cl1 <span class="keyword">is</span> IFormatProvider);</span><br><span class="line">      Console.WriteLine(cl1 <span class="keyword">is</span> Object);</span><br><span class="line">      Console.WriteLine(cl1 <span class="keyword">is</span> Class1);</span><br><span class="line">      Console.WriteLine(cl1 <span class="keyword">is</span> Class2); </span><br><span class="line">      Console.WriteLine();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">var</span> cl2 = <span class="keyword">new</span> Class2();</span><br><span class="line">      Console.WriteLine(cl2 <span class="keyword">is</span> IFormatProvider);</span><br><span class="line">      Console.WriteLine(cl2 <span class="keyword">is</span> Class2);</span><br><span class="line">      Console.WriteLine(cl2 <span class="keyword">is</span> Class1);</span><br><span class="line">      Console.WriteLine();</span><br><span class="line"></span><br><span class="line">      Class1 cl = cl2;</span><br><span class="line">      Console.WriteLine(cl <span class="keyword">is</span> Class1);</span><br><span class="line">      Console.WriteLine(cl <span class="keyword">is</span> Class2);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// The example displays the following output:</span></span><br><span class="line"><span class="comment">//     True</span></span><br><span class="line"><span class="comment">//     True</span></span><br><span class="line"><span class="comment">//     True</span></span><br><span class="line"><span class="comment">//     False</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//     True</span></span><br><span class="line"><span class="comment">//     True</span></span><br><span class="line"><span class="comment">//     True</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//     True</span></span><br><span class="line"><span class="comment">//     True</span></span><br></pre></td></tr></table></figure><p>从 C# 7 开始，可以使用<a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/is#type" target="_blank" rel="noopener">类型模式</a>的模式匹配来编写代码，代码使用 <code>is</code> 语句更为简洁。</p><h2 id="利用-is-的模式匹配-Pattern-matching-with-is"><a href="#利用-is-的模式匹配-Pattern-matching-with-is" class="headerlink" title="利用 is 的模式匹配 Pattern matching with is"></a>利用 <code>is</code> 的模式匹配 Pattern matching with <code>is</code></h2><p>从 C# 7 开始，<code>is</code> 和 <a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/switch" target="_blank" rel="noopener">switch</a> 语句支持模式匹配。<code>is</code> 关键字支持以下模式：</p><ul><li><p><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/is#type" target="_blank" rel="noopener">类型模式</a>，用于测试表达式是否可转换为指定类型，如果可以，则将其转换为该类型的一个变量。</p></li><li><p><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/is#constant" target="_blank" rel="noopener">常量模式</a>，用于测试表达式计算结果是否为指定的常数值。[Constant pattern]</p></li><li><p><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/is#var" target="_blank" rel="noopener">var 模式</a>，始终成功的匹配，可将表达式的值绑定到新局部变量。[var pattern]</p></li></ul><h3 id="类型模式-Type-pattern"><a href="#类型模式-Type-pattern" class="headerlink" title="类型模式 Type pattern"></a>类型模式 Type pattern</h3><p>使用类型模式执行模式匹配时，<code>is</code> 会测试表达式是否可转换为指定类型，如果可以，则将其转换为该类型的一个变量。它是 <code>is</code> 语句的直接扩展，可执行简单的类型计算和转换。<code>is</code> 类型模式的一般形式为：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">expr <span class="keyword">is</span> type varname</span><br></pre></td></tr></table></figure><p>其中 <em>expr</em> 是计算结果为某个类型的实例的表达式，<em>type</em> 是 <em>expr</em> 结果要转换到的类型的名称，<em>varname</em> 是 <em>expr</em> 结果要转换到的对象（如果 <code>is</code> 测试为 <code>true</code>）。</p><p>如果以下任一条件成立，则 <code>is</code> 表达式为 <code>true</code>：</p><ul><li><p><em>expr</em> 是与 <em>type</em> 具有相同类型的一个实例。</p></li><li><p><em>expr</em> 是派生自 <em>type</em> 的类型的一个实例。换言之，<em>expr</em> 结果可以向上转换为 <em>type</em> 的一个实例。</p></li><li><p><em>expr</em> 具有属于 <em>type</em> 的一个基类的编译时类型，<em>expr</em> 还具有属于 <em>type</em> 或派生自 <em>type</em> 的运行时类型。变量的编译时类型是其声明中定义的变量类型。变量的运行时类型是分配给该变量的实例类型。</p></li><li><p><em>expr</em> 是实现 <em>type</em> 接口的类型的一个实例。</p></li></ul><p>如果 <em>exp</em> 为 <code>true</code>，且 <code>is</code> 与 <code>if</code> 语句一起使用，则会分配 <em>varname</em>，并且其仅在 <code>if</code> 语句中具有局部范围。</p><p>下列示例使用 <code>is</code> 类型模式为类型的 <a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.icomparable.compareto#System_IComparable_CompareTo_System_Object_" target="_blank" rel="noopener">IComparable.CompareTo(Object)</a> 方法提供实现。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Employee</span> : <span class="title">IComparable</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> String Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">CompareTo</span>(<span class="params">Object o</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (o <span class="keyword">is</span> Employee e)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> Name.CompareTo(e.Name);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentException(<span class="string">"o is not an Employee object."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果没有模式匹配，则可能按以下方式编写此代码。使用类型模式匹配无需测试转换结果是否为 <code>null</code>，从而生成更紧凑易读的代码。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Employee</span> : <span class="title">IComparable</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> String Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">CompareTo</span>(<span class="params">Object o</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> e = o <span class="keyword">as</span> Employee;</span><br><span class="line">        <span class="keyword">if</span> (e == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentException(<span class="string">"o is not an Employee object."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Name.CompareTo(e.Name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="常量模式-Constant-pattern"><a href="#常量模式-Constant-pattern" class="headerlink" title="常量模式 Constant pattern"></a>常量模式 Constant pattern</h3><p>使用常量模式执行模式匹配时，<code>is</code> 会测试表达式结果是否等于指定常量。在 C# 6 和更低版本中，<a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/switch" target="_blank" rel="noopener">switch</a> 语句支持常量模式从。C# 7 开始，<code>is</code> 语句也支持常量模式。语法为：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">expr <span class="keyword">is</span> constant</span><br></pre></td></tr></table></figure><p>其中 <em>expr</em> 是要计算的表达式，<em>constant</em> 是要测试的值。 <em>constant</em> 可以是以下任何常数表达式：</p><ul><li><p>一个文本值。A literal value.</p></li><li><p>已声明 <code>const</code> 变量的名称。The name of a declared <code>const</code> variable.</p></li><li><p>一个枚举常量。An enumeration constant.</p></li></ul><p>常数表达式的计算方式如下：</p><ul><li><p>如果 <em>expr</em> 和 <em>constant</em> 均为整型类型，则 C# 相等运算符确定表示式是否返回 <code>true</code>（即，是否为 <code>expr == constant</code>）。</p></li><li><p>否则，由对静态 <a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.object.equals#System_Object_Equals_System_Object_System_Object_" target="_blank" rel="noopener">Object.Equals(expr, constant)</a> 方法的调用来确定表达式的值。</p></li></ul><p>下例同时使用了类型模式和常量模式来测试对象是否为 <code>Dice</code> 实例，如果是，则确定骰子的值是否为 6。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Dice</span></span><br><span class="line">&#123;</span><br><span class="line">    Random rnd = <span class="keyword">new</span> Random();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dice</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">Roll</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> rnd.Next(<span class="number">1</span>, <span class="number">7</span>); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> d1 = <span class="keyword">new</span> Dice();</span><br><span class="line">        ShowValue(d1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ShowValue</span>(<span class="params"><span class="keyword">object</span> o</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">int</span> HIGH_ROLL = <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (o <span class="keyword">is</span> Dice d &amp;&amp; d.Roll() <span class="keyword">is</span> HIGH_ROLL)</span><br><span class="line">            Console.WriteLine(<span class="string">$"The value is <span class="subst">&#123;HIGH_ROLL&#125;</span>!"</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            Console.WriteLine(<span class="string">$"The dice roll is not a <span class="subst">&#123;HIGH_ROLL&#125;</span>!"</span>);</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// The example displays output like the following:</span></span><br><span class="line"><span class="comment">//      The value is 6!</span></span><br></pre></td></tr></table></figure><h3 id="var-模式-var-pattern"><a href="#var-模式-var-pattern" class="headerlink" title="var 模式 var pattern"></a>var 模式 var pattern</h3><p>具有 var 模式的模式匹配始终成功。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">expr <span class="keyword">is</span> <span class="keyword">var</span> varname</span><br></pre></td></tr></table></figure><p>其中，<em>expr</em> 的值始终分配给名为 <em>varname</em> 的局部变量。<em>varname</em> 是一个与 <em>expr</em> 具有相同类型的静态变量。下例使用 var 模式向名为 <code>obj</code> 的变量分配表达式。然后，显示 <code>obj</code> 的值和类型。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      <span class="keyword">object</span>[] items = &#123; <span class="keyword">new</span> Book(<span class="string">"The Tempest"</span>), <span class="keyword">new</span> Person(<span class="string">"John"</span>) &#125;;</span><br><span class="line">      <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> items) &#123;</span><br><span class="line">        <span class="keyword">if</span> (item <span class="keyword">is</span> <span class="keyword">var</span> obj)</span><br><span class="line">          Console.WriteLine(<span class="string">$"Type: <span class="subst">&#123;obj.GetType().Name&#125;</span>, Value: <span class="subst">&#123;obj&#125;</span>"</span>); </span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Book</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Book</span>(<span class="params"><span class="keyword">string</span> title</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">       Title = title;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Title &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">string</span> <span class="title">ToString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> Title;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Person</span>(<span class="params"><span class="keyword">string</span> name</span>)</span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      Name = name;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">string</span> Name </span><br><span class="line">   &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">string</span> <span class="title">ToString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> Name;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// The example displays the following output:</span></span><br><span class="line"><span class="comment">//       Type: Book, Value: The Tempest</span></span><br><span class="line"><span class="comment">//       Type: Person, Value: John</span></span><br></pre></td></tr></table></figure><p>请注意，如果 <em>expr</em> 为 <code>null</code>，则 <code>is</code> 表达式仍为 true 并向 <em>varname</em> 分配 <code>null</code>。</p><h1 id="as"><a href="#as" class="headerlink" title="as"></a>as</h1><p>可以使用 <code>as</code> 运算符在符合的引用类型或<a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/programming-guide/nullable-types/index" target="_blank" rel="noopener">可以为 null 的类型</a>之间执行某些类型的转换。以下代码显示一个示例。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">csrefKeywordsOperators</span> &#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Base</span> &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">string</span> <span class="title">ToString</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"Base"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Derived</span> : <span class="title">Base</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span> &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">            Derived d = <span class="keyword">new</span> Derived ();</span><br><span class="line"></span><br><span class="line">            Base b = d <span class="keyword">as</span> Base;</span><br><span class="line">            <span class="keyword">if</span> (b != <span class="literal">null</span>) &#123;</span><br><span class="line">                Console.WriteLine (b.ToString ());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>as</code> 运算符类似于转换运算。但是，如果无法进行转换，则 <code>as</code> 会返回 <code>null</code>，而不是引发异常。请看下面的示例：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">expression <span class="keyword">as</span> type</span><br></pre></td></tr></table></figure><p>该代码等效于以下表达式，但 <code>expression</code> 变量仅进行一次计算。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">expression <span class="keyword">is</span> type ? (type)expression : (type)<span class="literal">null</span></span><br></pre></td></tr></table></figure><p>请注意，<code>as</code> 运算符仅执行引用转换、可以为 null 的转换和装箱转换。<code>as</code> 运算符无法执行其他转换，例如用户定义的转换，应使用转换表达式执行此转换。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">ClassA</span> &#123; &#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title">ClassB</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">MainClass</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">object</span>[] objArray = <span class="keyword">new</span> <span class="keyword">object</span>[<span class="number">6</span>];</span><br><span class="line">        objArray[<span class="number">0</span>] = <span class="keyword">new</span> ClassA ();</span><br><span class="line">        objArray[<span class="number">1</span>] = <span class="keyword">new</span> ClassB ();</span><br><span class="line">        objArray[<span class="number">2</span>] = <span class="string">"hello"</span>;</span><br><span class="line">        objArray[<span class="number">3</span>] = <span class="number">123</span>;</span><br><span class="line">        objArray[<span class="number">4</span>] = <span class="number">123.4</span>;</span><br><span class="line">        objArray[<span class="number">5</span>] = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; objArray.Length; ++i) &#123;</span><br><span class="line">            <span class="keyword">string</span> s = objArray[i] <span class="keyword">as</span> <span class="keyword">string</span>;</span><br><span class="line">            Console.Write (<span class="string">"&#123;0&#125;:"</span>, i);</span><br><span class="line">            <span class="keyword">if</span> (s != <span class="literal">null</span>) &#123;</span><br><span class="line">                Console.WriteLine (<span class="string">"'"</span> + s + <span class="string">"'"</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                Console.WriteLine (<span class="string">"not a string"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Output:</span></span><br><span class="line"><span class="comment">0:not a string</span></span><br><span class="line"><span class="comment">1:not a string</span></span><br><span class="line"><span class="comment">2:'hello'</span></span><br><span class="line"><span class="comment">3:not a string</span></span><br><span class="line"><span class="comment">4:not a string</span></span><br><span class="line"><span class="comment">5:not a string</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h1 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h1><iframe src="https://slowread.cn/EssentialCSharp5-Index.html" width="100%" height="300" frameborder="0" allowfullscreen></iframe>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;通过继承，可以创建重用、扩展和修改在其他类中定义的行为的新类。继承主要实现重用代码，节省开发时间。C#中的继承符合下列规则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;继承是可传递的。如果C从B中派生，B又从A中派生，那么C不仅继承了B中声明的成员，同样也继承了A中的成员。Object类作为所有类的基类。&lt;/li&gt;
&lt;li&gt;派生类应当是对基类的扩展。派生类可以添加新的成员，但不能除去已经继承的成员的定义。&lt;/li&gt;
&lt;li&gt;构造函数和析构函数不能被继承。除此之外的其它成员，不论对它们定义了怎样的访问方式，都能被继承。基类中成员的访问方式只能决定派生类能否访问它们。&lt;/li&gt;
&lt;li&gt;派生类如果定义了与继承而来的成员同名的新成员，就可以覆盖已继承的成员。但这并不因为这派生类删除了这些成员，只是不能再访问这些成员。&lt;/li&gt;
&lt;li&gt;类可以定义虚文法、虚属性以及虚索引指示器，它的派生类能够重载这些成员，从而实现类可以展示出多态性。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="C#" scheme="https://at2008.github.io/tags/C/"/>
    
      <category term="C#本质论" scheme="https://at2008.github.io/tags/C-%E6%9C%AC%E8%B4%A8%E8%AE%BA/"/>
    
      <category term="Essential C#" scheme="https://at2008.github.io/tags/Essential-C/"/>
    
  </entry>
  
  <entry>
    <title>C#本质论笔记 第5章 类</title>
    <link href="https://at2008.github.io/2017/12/22/CSharp%E6%9C%AC%E8%B4%A8%E8%AE%BA%E7%AC%94%E8%AE%B0-%E7%AC%AC5%E7%AB%A0-%E7%B1%BB/"/>
    <id>https://at2008.github.io/2017/12/22/CSharp本质论笔记-第5章-类/</id>
    <published>2017-12-22T05:20:40.000Z</published>
    <updated>2018-08-03T13:45:55.788Z</updated>
    
    <content type="html"><![CDATA[<h1 id="类的定义和实例化"><a href="#类的定义和实例化" class="headerlink" title="类的定义和实例化"></a>类的定义和实例化</h1><p>类和对象都能关联数据，将类想象成模具，将对象想象成根据模具浇筑出来的零件，可以更好理解这一点。</p><p>使用类，可以通过组合其他类型的变量、方法和事件创建自己的自定义类型。A <em>class</em> is a construct that enables you to create your own custom types by grouping together variables of other types, methods and events. 类好比是蓝图。A class is like a blueprint. 它定义类型的数据和行为。It defines the data and behavior of a type. 如果类未声明为静态，客户端代码就可以通过创建分配给变量的_对象_或_实例_来使用该类。If the class is not declared as static, client code can use it by creating <em>objects</em> or <em>instances</em> which are assigned to a variable. 变量会一直保留在内存中，直至对变量的所有引用超出范围为止。The variable remains in memory until all references to it go out of scope. 超出范围时，CLR 将对其进行标记，以便用于垃圾回收。At that time, the CLR marks it as eligible for garbage collection. 如果类声明为<a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/static" target="_blank" rel="noopener">静态</a>，则内存中只有一个副本，且客户端代码只能通过类本身，而不是<em>实例变量</em>来访问它。If the class is declared as <a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/static" target="_blank" rel="noopener">static</a>, then only one copy exists in memory and client code can only access it through the class itself, not an <em>instance variable</em>. 有关详细信息，请参阅<a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/programming-guide/classes-and-structs/static-classes-and-static-class-members" target="_blank" rel="noopener">静态类和静态类成员</a>。For more information, see <a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/programming-guide/classes-and-structs/static-classes-and-static-class-members" target="_blank" rel="noopener">Static Classes and Static Class Members</a>.</p><p>与结构不同，类支持_继承_，这是面向对象的编程的一个基本特点。Unlike structs, classes support <em>inheritance</em>, a fundamental characteristic of object-oriented programming. 有关详细信息，请参阅<a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/programming-guide/classes-and-structs/inheritance" target="_blank" rel="noopener">继承</a>。</p><a id="more"></a><blockquote><p>例子，包含类的定义、实例化、字段声明、字段访问和方法：</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        Employee employee1 = <span class="keyword">new</span> Employee ();</span><br><span class="line">        Employee employee2;</span><br><span class="line">        employee2 = <span class="keyword">new</span> Employee ();</span><br><span class="line"></span><br><span class="line">        employee1.FirstName = <span class="string">"Inigo"</span>;</span><br><span class="line">        employee1.LastName = <span class="string">"Montoya"</span>;</span><br><span class="line">        employee1.Salary = <span class="string">"Too Little"</span>;</span><br><span class="line">        IncreaseSalary (employee1);</span><br><span class="line">        Console.WriteLine (<span class="string">"&#123;0&#125;: &#123;1&#125;"</span>, employee1.GetName (), employee1.Salary);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">IncreaseSalary</span> (<span class="params">Employee employee</span>) </span>&#123;</span><br><span class="line">        employee.Salary = <span class="string">"Enough to survive on"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Employee</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> FirstName;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> LastName;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Salary = <span class="string">"Not enough"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">GetName</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> FirstName + <span class="string">" "</span> + LastName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&lt;&gt;</p><h1 id="this-关键字"><a href="#this-关键字" class="headerlink" title="this 关键字"></a>this 关键字</h1><p><code>this</code> 关键字指代类的当前实例。在此示例中，<code>this</code> 用于限定类似名称隐藏的 <code>Employee</code> 类成员、<code>name</code> 和 <code>alias</code>。In this example, <code>this</code> is used to qualify the <code>Employee</code> class members, <code>name</code> and <code>alias</code>, which are hidden by similar names. 它还用于将某个对象传递给属于其他类的方法 <code>CalcTax</code>。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">class</span> <span class="title">Employee</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">string</span> name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">string</span> <span class="keyword">alias</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">decimal</span> salary = <span class="number">3000.00</span>m;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Constructor:</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Employee</span> (<span class="params"><span class="keyword">string</span> name, <span class="keyword">string</span> <span class="keyword">alias</span></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// Use this to qualify the fields, name and alias:</span></span><br><span class="line">        <span class="comment">// 如果不用 this 指定类成员 name，那么 name = name; 只是自己给自己赋值，</span></span><br><span class="line">        <span class="comment">// 最终，类成员 name 未被赋值，为 null</span></span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.<span class="keyword">alias</span> = <span class="keyword">alias</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Printing method:</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printEmployee</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        Console.WriteLine (<span class="string">"Name: &#123;0&#125;\nAlias: &#123;1&#125;"</span>, name, <span class="keyword">alias</span>);</span><br><span class="line">        <span class="comment">// Passing the object to the CalcTax method by using this:</span></span><br><span class="line">        Console.WriteLine (<span class="string">"Taxes: &#123;0:C&#125;"</span>, Tax.CalcTax (<span class="keyword">this</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">decimal</span> Salary &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> salary; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Tax</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">decimal</span> <span class="title">CalcTax</span> (<span class="params">Employee E</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0.08</span>m * E.Salary;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">MainClass</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// Create objects:</span></span><br><span class="line">        Employee E1 = <span class="keyword">new</span> Employee (<span class="string">"Mingda Pan"</span>, <span class="string">"mpan"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Display results:</span></span><br><span class="line">        E1.printEmployee ();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Output:</span></span><br><span class="line"><span class="comment">    Name: Mingda Pan</span></span><br><span class="line"><span class="comment">    Alias: mpan</span></span><br><span class="line"><span class="comment">    Taxes: $240.00</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h1 id="高级主题：存储和载入文件"><a href="#高级主题：存储和载入文件" class="headerlink" title="高级主题：存储和载入文件"></a>高级主题：存储和载入文件</h1><h2 id="将数据持久化存储到文件"><a href="#将数据持久化存储到文件" class="headerlink" title="将数据持久化存储到文件"></a>将数据持久化存储到文件</h2><blockquote><p>示例：首先，实例化一个<code>FileStream</code>对象，将它与一个以员工的全名命名的文件对应起来。<code>FileMode.Create</code>参数指明，如果对应的文件不存在就创建一个；如果文件存在，就覆盖它。接着创建一个<code>StreamWriter</code>类。StreamWriter类负责将文本写入<code>FileStream</code>。数据是用<code>WriteLine()</code>方法写入的，就像向控制台写入一样。</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="comment">// IO namespace</span></span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">class</span> <span class="title">Employee</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> FirstName;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> LastName;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Salary;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Save</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        DataStorage.Store (<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">DataStorage</span> &#123;</span><br><span class="line">    <span class="comment">// Save an employee object to a file</span></span><br><span class="line">    <span class="comment">// named with the Employee name.</span></span><br><span class="line">    <span class="comment">// Error handling not shown.</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Store</span> (<span class="params">Employee employee</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// Instantiate a FileStream using FirstNameLastName.dat</span></span><br><span class="line">        <span class="comment">// for the filename. FileMode.Create will force</span></span><br><span class="line">        <span class="comment">// a new file to be created or override an</span></span><br><span class="line">        <span class="comment">// existing file.</span></span><br><span class="line">        FileStream stream = <span class="keyword">new</span> FileStream (</span><br><span class="line">            employee.FirstName + employee.LastName + <span class="string">".dat"</span>,</span><br><span class="line">            FileMode.Create);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Create a StreamWriter object for writing text</span></span><br><span class="line">        <span class="comment">// into the FileStream</span></span><br><span class="line">        StreamWriter writer = <span class="keyword">new</span> StreamWriter (stream);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Write all the data associated with the employee.</span></span><br><span class="line">        writer.WriteLine (employee.FirstName);</span><br><span class="line">        writer.WriteLine (employee.LastName);</span><br><span class="line">        writer.WriteLine (employee.Salary);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Close the StreamWriter and its Stream.</span></span><br><span class="line">        writer.Close (); <span class="comment">// Automatically closes the stream</span></span><br><span class="line">        stream.Close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">SaveDataToFile</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span> (<span class="params"><span class="keyword">string</span>[] args</span>) </span>&#123;</span><br><span class="line">        Employee employee = <span class="keyword">new</span> Employee ();</span><br><span class="line">        employee.FirstName = <span class="string">"Jon"</span>;</span><br><span class="line">        employee.LastName = <span class="string">"Snow"</span>;</span><br><span class="line">        employee.Salary = <span class="string">"$6000.00"</span>;</span><br><span class="line">        employee.Save ();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写入操作完成后，<code>FileStream</code>和<code>StreamWriter</code>都需要关闭，避免它们在等待垃圾回收器运行期间，处于“不确定性打开”的状态。上述代码没有任何错误处理机制，如果引发异常，两个<code>Close()</code>方法都不会执行。</p><h2 id="从文件中获取数据"><a href="#从文件中获取数据" class="headerlink" title="从文件中获取数据"></a>从文件中获取数据</h2><p>读取数据与存储数据相反，它使用StreamReader而不是StreamWriter。同样的，一旦数据读取完毕，就要在FileStream和StreamReader上调用Close()方法。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        Employee employee1;</span><br><span class="line"></span><br><span class="line">        Employee employee2 = <span class="keyword">new</span> Employee ();</span><br><span class="line">        employee2.SetName (<span class="string">"Inigo"</span>, <span class="string">"Montoya"</span>);</span><br><span class="line">        employee2.Save ();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Modify employee2 after saving.</span></span><br><span class="line">        IncreaseSalary (employee2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Load employee1 from the saved version of employee2</span></span><br><span class="line">        employee1 = DataStorage.Load (<span class="string">"Inigo"</span>, <span class="string">"Montoya"</span>);</span><br><span class="line"></span><br><span class="line">        Console.WriteLine (</span><br><span class="line">            <span class="string">"&#123;0&#125;: &#123;1&#125;"</span>,</span><br><span class="line">            employee1.GetName (),</span><br><span class="line">            employee1.Salary);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">IncreaseSalary</span> (<span class="params">Employee employee</span>) </span>&#123;</span><br><span class="line">        employee.Salary = <span class="string">"Enough to survive on"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Employee</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> FirstName;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> LastName;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Salary;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">GetName</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> FirstName + <span class="string">" "</span> + LastName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetName</span> (<span class="params"><span class="keyword">string</span> newFirstName, <span class="keyword">string</span> newLastName</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.FirstName = newFirstName;</span><br><span class="line">        <span class="keyword">this</span>.LastName = newLastName;</span><br><span class="line">        Console.WriteLine (<span class="string">"Name changed to '&#123;0&#125;'"</span>,</span><br><span class="line">            <span class="keyword">this</span>.GetName ());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Save</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        DataStorage.Store (<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">DataStorage</span> &#123;</span><br><span class="line">    <span class="comment">// Save an employee object to a file </span></span><br><span class="line">    <span class="comment">// named with the Employee name.</span></span><br><span class="line">    <span class="comment">// Error handling not shown.</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Store</span> (<span class="params">Employee employee</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// Instantiate a FileStream using FirstNameLastName.dat</span></span><br><span class="line">        <span class="comment">// for the filename. FileMode.Create will force</span></span><br><span class="line">        <span class="comment">// a new file to be created or override an</span></span><br><span class="line">        <span class="comment">// existing file.</span></span><br><span class="line">        FileStream stream = <span class="keyword">new</span> FileStream (</span><br><span class="line">            employee.FirstName + employee.LastName + <span class="string">".dat"</span>,</span><br><span class="line">            FileMode.Create);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Create a StreamWriter object for writing text</span></span><br><span class="line">        <span class="comment">// into the FileStream</span></span><br><span class="line">        StreamWriter writer = <span class="keyword">new</span> StreamWriter (stream);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Write all the data associated with the employee.</span></span><br><span class="line">        writer.WriteLine (employee.FirstName);</span><br><span class="line">        writer.WriteLine (employee.LastName);</span><br><span class="line">        writer.WriteLine (employee.Salary);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Close the StreamWriter and its Stream.</span></span><br><span class="line">        writer.Close (); <span class="comment">// Automatically closes the stream</span></span><br><span class="line">        stream.Close ();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Employee <span class="title">Load</span> (<span class="params"><span class="keyword">string</span> firstName, <span class="keyword">string</span> lastName</span>) </span>&#123;</span><br><span class="line">        Employee employee = <span class="keyword">new</span> Employee ();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Instantiate a FileStream using FirstNameLastName.dat</span></span><br><span class="line">        <span class="comment">// for the filename. FileMode.Open will open</span></span><br><span class="line">        <span class="comment">// an existing file or else report an error.</span></span><br><span class="line">        FileStream stream = <span class="keyword">new</span> FileStream (</span><br><span class="line">            firstName + lastName + <span class="string">".dat"</span>, FileMode.Open);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Create a SteamReader for reading text from the file.</span></span><br><span class="line">        StreamReader reader = <span class="keyword">new</span> StreamReader (stream);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Read each line from the file and place it into</span></span><br><span class="line">        <span class="comment">// the associated property.</span></span><br><span class="line">        employee.FirstName = reader.ReadLine ();</span><br><span class="line">        employee.LastName = reader.ReadLine ();</span><br><span class="line">        employee.Salary = reader.ReadLine ();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Close the StreamReader and its Stream.</span></span><br><span class="line">        reader.Close (); <span class="comment">// Automatically closes the stream</span></span><br><span class="line">        stream.Close ();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> employee;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="访问修饰符-Access-Modifiers"><a href="#访问修饰符-Access-Modifiers" class="headerlink" title="访问修饰符 Access Modifiers"></a>访问修饰符 Access Modifiers</h1><p>访问修饰符是关键字，用于指定成员或类型已声明的可访问性。Access modifiers are keywords used to specify the declared accessibility of a member or a type. 本部分介绍四个访问修饰符：This section introduces the four access modifiers:</p><ul><li><p><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/public" target="_blank" rel="noopener">公用 public</a></p></li><li><p><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/protected" target="_blank" rel="noopener">受保护 protected</a></p></li><li><p><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/internal" target="_blank" rel="noopener">内部 internal</a></p></li><li><p><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/private" target="_blank" rel="noopener">专用 private</a></p></li></ul><p>可以使用访问修饰符指定以下六个可访问性级别：The following six accessibility levels can be specified using the access modifiers:</p><p><code>public</code>：访问不受限制。<code>public</code>: Access is not restricted.</p><p><code>protected</code>：访问限于包含类或派生自包含类的类型。<code>protected</code>: Access is limited to the containing class or types derived from the containing class.</p><p><code>internal</code>：访问限于当前程序集。<code>internal</code>: Access is limited to the current assembly.</p><p><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/protected-internal" target="_blank" rel="noopener"><code>protected internal</code></a>： 访问仅限于当前程序集或从包含类派生的类型。<a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/protected-internal" target="_blank" rel="noopener"><code>protected internal</code></a>: Access is limited to the current assembly or types derived from the containing class.</p><p><code>private</code>：访问限于包含类。<code>private</code>: Access is limited to the containing type.</p><p><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/private-protected" target="_blank" rel="noopener"><code>private protected</code></a>： 访问被限制为包含的类或从包含当前程序集中的类派生的类型。</p><blockquote><p>示例：使用<code>private</code>访问修饰符。下例为了隐藏<code>Password</code>字段，禁止从它包容类的外部访问，使用<code>private</code>访问修饰符替代<code>public</code>，这样就无法从<code>Program</code>类中访问<code>Password</code>字段了。</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        Employee employee = <span class="keyword">new</span> Employee ();</span><br><span class="line"></span><br><span class="line">        employee.FirstName = <span class="string">"Inigo"</span>;</span><br><span class="line">        employee.LastName = <span class="string">"Montoya"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Password is private, so it cannot be</span></span><br><span class="line">        <span class="comment">// accessed from outside the class.</span></span><br><span class="line">        <span class="comment">// Console.WriteLine(</span></span><br><span class="line">        <span class="comment">//    ("Password = &#123;0&#125;", employee.Password);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Employee</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> FirstName;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> LastName;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Salary;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">string</span> Password;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">bool</span> IsAuthenticated;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">bool</span> <span class="title">Logon</span> (<span class="params"><span class="keyword">string</span> password</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (Password == password) &#123;</span><br><span class="line">            IsAuthenticated = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> IsAuthenticated;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">bool</span> <span class="title">GetIsAuthenticated</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> IsAuthenticated;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h1><p>属性是一种成员，它提供灵活的机制来读取、写入或计算私有字段的值。A property is a member that provides a flexible mechanism to read, write, or compute the value of a private field. 属性可用作公共数据成员，但它们实际上是称为<em>访问器</em>的特殊方法。Properties can be used as if they are public data members, but they are actually special methods called <em>accessors</em>. 这使得可以轻松访问数据，还有助于提高方法的安全性和灵活性。</p><p>属性结合了字段和方法的多个方面。Properties combine aspects of both fields and methods. 对于对象的用户来说，属性似乎是一个字段，访问属性需要相同的语法。To the user of an object, a property appears to be a field, accessing the property requires the same syntax. 对于类的实现者来说，属性是一两个代码块，表示 <a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/get" target="_blank" rel="noopener">get</a> 访问器和/或 <a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/set" target="_blank" rel="noopener">set</a> 访问器。To the implementer of a class, a property is one or two code blocks, representing a <a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/get" target="_blank" rel="noopener">get</a> accessor and/or a <a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/set" target="_blank" rel="noopener">set</a> accessor. 读取属性时，执行 <code>get</code> 访问器的代码块；向属性赋予新值时，执行 <code>set</code> 访问器的代码块。The code block for the <code>get</code> accessor is executed when the property is read; the code block for the <code>set</code> accessor is executed when the property is assigned a new value. 将不带 <code>set</code> 访问器的属性视为只读。A property without a <code>set</code> accessor is considered read-only. 将不带 <code>get</code> 访问器的属性视为只写。A property without a <code>get</code> accessor is considered write-only. 将具有以上两个访问器的属性视为读写。A property that has both accessors is read-write.</p><p>与字段不同，属性不会被归类为变量。Unlike fields, properties are not classified as variables. 因此，不能将属性作为 <a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/ref" target="_blank" rel="noopener">ref</a> 或 <a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/out" target="_blank" rel="noopener">out</a> 参数传递。</p><h2 id="示例Example"><a href="#示例Example" class="headerlink" title="示例Example"></a>示例Example</h2><p>此示例演示实例、静态和只读属性。This example demonstrates instance, static, and read-only properties. 它接收通过键盘键入的员工姓名，按 1 递增 <code>NumberOfEmployees</code>，并显示员工姓名和编号。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Employee</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> NumberOfEmployees;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> counter;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">string</span> name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// A read-write instance property:</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Name &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> name; &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123; name = <span class="keyword">value</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// A read-only static property:</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> Counter &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> counter; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// A Constructor:</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Employee</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// Calculate the employee's number:</span></span><br><span class="line">        counter = ++counter + NumberOfEmployees;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">TestEmployee</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        Employee.NumberOfEmployees = <span class="number">107</span>;</span><br><span class="line">        Employee e1 = <span class="keyword">new</span> Employee ();</span><br><span class="line">        e1.Name = <span class="string">"Claude Vige"</span>;</span><br><span class="line"></span><br><span class="line">        System.Console.WriteLine (<span class="string">"Employee number: &#123;0&#125;"</span>, Employee.Counter);</span><br><span class="line">        System.Console.WriteLine (<span class="string">"Employee name: &#123;0&#125;"</span>, e1.Name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* Output:</span></span><br><span class="line"><span class="comment">    Employee number: 108</span></span><br><span class="line"><span class="comment">    Employee name: Claude Vige</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="属性的声明"><a href="#属性的声明" class="headerlink" title="属性的声明"></a>属性的声明</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        Employee employee = <span class="keyword">new</span> Employee ();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Call the FirstName property's setter.</span></span><br><span class="line">        employee.FirstName = <span class="string">"Inigo"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Call the FirstName property's getter.</span></span><br><span class="line">        System.Console.WriteLine (employee.FirstName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Employee</span> &#123;</span><br><span class="line">    <span class="comment">// FirstName property</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> FirstName &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> _FirstName;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123;</span><br><span class="line">            _FirstName = <span class="keyword">value</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">string</span> _FirstName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// LastName property</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> LastName &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> _LastName;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123;</span><br><span class="line">            _LastName = <span class="keyword">value</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">string</span> _LastName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自动实现的属性"><a href="#自动实现的属性" class="headerlink" title="自动实现的属性"></a>自动实现的属性</h2><p>从C# 3.0开始，属性语法有了简化版本，允许在声明属性时，不添加取值或赋值方法，也不声明任何支持地段。一切都将自动实现。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        Employee employee1 =</span><br><span class="line">            <span class="keyword">new</span> Employee ();</span><br><span class="line">        Employee employee2 =</span><br><span class="line">            <span class="keyword">new</span> Employee ();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Call the FirstName property's setter.</span></span><br><span class="line">        employee1.FirstName = <span class="string">"Inigo"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Call the FirstName property's getter.</span></span><br><span class="line">        System.Console.WriteLine (employee1.FirstName);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Assign an auto-implemented property</span></span><br><span class="line">        employee2.Title = <span class="string">"Computer Nerd"</span>;</span><br><span class="line">        employee1.Manager = employee2;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Print employee1's manager's title.</span></span><br><span class="line">        System.Console.WriteLine (employee1.Manager.Title);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Employee</span> &#123;</span><br><span class="line">    <span class="comment">// FirstName property</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> FirstName &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> _FirstName;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123;</span><br><span class="line">            _FirstName = <span class="keyword">value</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">string</span> _FirstName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// LastName property</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> LastName &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> _LastName;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123;</span><br><span class="line">            _LastName = <span class="keyword">value</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">string</span> _LastName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Title property</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Title &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Manager property</span></span><br><span class="line">    <span class="keyword">public</span> Employee Manager &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="具有支持字段的属性-Properties-with-backing-fields"><a href="#具有支持字段的属性-Properties-with-backing-fields" class="headerlink" title="具有支持字段的属性 Properties with backing fields"></a>具有支持字段的属性 Properties with backing fields</h2><p>有一个实现属性的基本模式，该模式使用私有支持字段来设置和检索属性值。One basic pattern for implementing a property involves using a private backing field for setting and retrieving the property value. <code>get</code> 访问器返回私有字段的值，<code>set</code> 访问器在向私有字段赋值之前可能会执行一些数据验证。The <code>get</code> accessor returns the value of the private field, and the <code>set</code> accessor may perform some data validation before assigning a value to the private field. 这两个访问器还可以在存储或返回数据之前对其执行某些转换或计算。Both accessors may also perform some conversion or computation on the data before it is stored or returned.</p><p>下面的示例阐释了此模式。The following example illustrates this pattern. 在此示例中，<code>TimePeriod</code> 类表示时间间隔。In this example, the <code>TimePeriod</code> class represents an interval of time. 在内部，该类将时间间隔以秒为单位存储在名为 <code>seconds</code> 的私有字段中。Internally, the class stores the time interval in seconds in a private field named <code>seconds</code>. 名为 <code>Hours</code> 的读-写属性允许客户以小时为单位指定时间间隔。A read-write property named <code>Hours</code> allows the customer to specify the time interval in hours. <code>get</code> 和 <code>set</code> 访问器都会执行小时与秒之间的必要转换。Both the <code>get</code> and the <code>set</code> accessors perform the necessary conversion between hours and seconds. 此外，<code>set</code> 访问器还会验证数据，如果小时数无效，则引发 <a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.argumentoutofrangeexception" target="_blank" rel="noopener">ArgumentOutOfRangeException</a>。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">TimePeriod</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> seconds;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">double</span> Hours &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> seconds / <span class="number">3600</span>; &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">value</span> &lt; <span class="number">0</span> || <span class="keyword">value</span> &gt; <span class="number">24</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentOutOfRangeException (</span><br><span class="line">                    <span class="string">$"<span class="subst">&#123;<span class="keyword">nameof</span>(<span class="keyword">value</span>)&#125;</span> must be between 0 and 24."</span>);</span><br><span class="line"></span><br><span class="line">            seconds = <span class="keyword">value</span> * <span class="number">3600</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        TimePeriod t = <span class="keyword">new</span> TimePeriod ();</span><br><span class="line">        <span class="comment">// The property assignment causes the 'set' accessor to be called.</span></span><br><span class="line">        t.Hours = <span class="number">24</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Retrieving the property causes the 'get' accessor to be called.</span></span><br><span class="line">        Console.WriteLine (<span class="string">$"Time in hours: <span class="subst">&#123;t.Hours&#125;</span>"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// The example displays the following output:</span></span><br><span class="line"><span class="comment">//    Time in hours: 24</span></span><br></pre></td></tr></table></figure><h2 id="表达式主体定义-Expression-body-definitions"><a href="#表达式主体定义-Expression-body-definitions" class="headerlink" title="表达式主体定义 Expression body definitions"></a>表达式主体定义 Expression body definitions</h2><p>属性访问器通常由单行语句组成，这些语句只分配或只返回表达式的结果。Property accessors often consist of single-line statements that just assign or return the result of an expression. 可以将这些属性作为 expression-bodied 成员来实现。You can implement these properties as expression-bodied members. <code>=&gt;</code> 符号后跟用于为属性赋值或从属性中检索值的表达式，即组成了表达式主体定义。Expression body definitions consist of the <code>=&gt;</code> symbol followed by the expression to assign to or retrieve from the property.</p><p>从 C# 6 开始，只读属性可以将 <code>get</code> 访问器作为 expression-bodied 成员实现。Starting with C# 6, read-only properties can implement the <code>get</code> accessor as an expression-bodied member. 在这种情况下，既不使用 <code>get</code> 访问器关键字，也不使用 <code>return</code> 关键字。In this case, neither the <code>get</code> accessor keyword nor the <code>return</code> keyword is used. 下面的示例将只读 <code>Name</code> 属性作为 expression-bodied 成员实现。The following example implements the read-only <code>Name</code> property as an expression-bodied member.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">string</span> firstName;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">string</span> lastName;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span> (<span class="params"><span class="keyword">string</span> first, <span class="keyword">string</span> last</span>) </span>&#123;</span><br><span class="line">        firstName = first;</span><br><span class="line">        lastName = last;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Name =&gt; <span class="string">$"<span class="subst">&#123;firstName&#125;</span> <span class="subst">&#123;lastName&#125;</span>"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Example</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> person = <span class="keyword">new</span> Person (<span class="string">"Isabelle"</span>, <span class="string">"Butts"</span>);</span><br><span class="line">        Console.WriteLine (person.Name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// The example displays the following output:</span></span><br><span class="line"><span class="comment">//      Isabelle Butts</span></span><br></pre></td></tr></table></figure><p>从 C# 7 开始，<code>get</code> 和 <code>set</code> 访问器都可以作为 expression-bodied 成员实现。Starting with C# 7, both the <code>get</code> and the <code>set</code> accessor can be implemented as expression-bodied members. 在这种情况下，必须使用 <code>get</code> 和 <code>set</code> 关键字。In this case, the <code>get</code> and <code>set</code> keywords must be present. 下面的示例阐释如何为这两个访问器使用表达式主体定义。The following example illustrates the use of expression body definitions for both accessors. 请注意，<code>return</code> 关键字不与 <code>get</code> 访问器搭配使用。Note that the <code>return</code> keyword is not used with the <code>get</code> accessor.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SaleItem</span> &#123;</span><br><span class="line">    <span class="keyword">string</span> name;</span><br><span class="line">    <span class="keyword">decimal</span> cost;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SaleItem</span> (<span class="params"><span class="keyword">string</span> name, <span class="keyword">decimal</span> cost</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.cost = cost;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Name &#123;</span><br><span class="line">        <span class="keyword">get</span> =&gt; name;</span><br><span class="line">        <span class="keyword">set</span> =&gt; name = <span class="keyword">value</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">decimal</span> Price &#123;</span><br><span class="line">        <span class="keyword">get</span> =&gt; cost;</span><br><span class="line">        <span class="keyword">set</span> =&gt; cost = <span class="keyword">value</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span> (<span class="params"><span class="keyword">string</span>[] args</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> item = <span class="keyword">new</span> SaleItem (<span class="string">"Shoes"</span>, <span class="number">19.95</span>m);</span><br><span class="line">        Console.WriteLine (<span class="string">$"<span class="subst">&#123;item.Name&#125;</span>: sells for <span class="subst">&#123;item.Price:C2&#125;</span>"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// The example displays output like the following:</span></span><br><span class="line"><span class="comment">//       Shoes: sells for $19.95</span></span><br></pre></td></tr></table></figure><h2 id="只读和只写属性"><a href="#只读和只写属性" class="headerlink" title="只读和只写属性"></a>只读和只写属性</h2><p>省略 <code>set</code> 访问器可使属性为只读，省略 <code>get</code> 访问器可使属性为只写。只读属性对于任何赋值气度都会造成编译错误。例如，下例中是<code>Id</code>为只读：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        Employee employee1 = <span class="keyword">new</span> Employee ();</span><br><span class="line">        employee1.Initialize (<span class="number">42</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ERROR:  Property or indexer 'Employee.Id'</span></span><br><span class="line">        <span class="comment">// cannot be assigned to -- it is read-only</span></span><br><span class="line">        <span class="comment">//employee1.Id = "490";                     //will not compile if you uncomment this line</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Employee</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Initialize</span> (<span class="params"><span class="keyword">int</span> id</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// Use field because Id property has no setter,</span></span><br><span class="line">        <span class="comment">// it is read-only.</span></span><br><span class="line">        _Id = id.ToString ();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="comment">// Id property declaration</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Id &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> _Id;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// No setter provided.</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">string</span> _Id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上例中采用Employee构造函数(而不是属性)对字段进行赋值（_Id = id）。如果通过属性来赋值，会造成编译错误。</p><h2 id="限制访问器可访问性（C-编程指南）Restricting-Accessor-Accessibility-C-Programming-Guide"><a href="#限制访问器可访问性（C-编程指南）Restricting-Accessor-Accessibility-C-Programming-Guide" class="headerlink" title="限制访问器可访问性（C# 编程指南）Restricting Accessor Accessibility (C# Programming Guide)"></a>限制访问器可访问性（C# 编程指南）Restricting Accessor Accessibility (C# Programming Guide)</h2><p>属性或索引器的 <a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/get" target="_blank" rel="noopener">get</a> 和 <a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/set" target="_blank" rel="noopener">set</a> 部分称为访问器。The <a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/get" target="_blank" rel="noopener">get</a> and <a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/set" target="_blank" rel="noopener">set</a> portions of a property or indexer are called <em>accessors</em>. 默认情况下，这些访问器具有相同的可见性或访问级别：其所属属性或索引器的可见性或访问级别。By default these accessors have the same visibility, or access level: that of the property or indexer to which they belong. 有关详细信息，请参阅<a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/accessibility-levels" target="_blank" rel="noopener">可访问性级别</a>。For more information, see <a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/accessibility-levels" target="_blank" rel="noopener">accessibility levels</a>. 不过，有时限制对其中某个访问器的访问是有益的。However, it is sometimes useful to restrict access to one of these accessors. 通常是在保持 <code>get</code> 访问器可公开访问的情况下，限制 <code>set</code> 访问器的可访问性。Typically, this involves restricting the accessibility of the <code>set</code> accessor, while keeping the <code>get</code> accessor publicly accessible.</p><p>可以为get或set部分指定访问修饰符（但不能为两者都指定），从而覆盖为属性声明指定的访问修饰符。例如:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        Employee employee1 = <span class="keyword">new</span> Employee ();</span><br><span class="line">        employee1.Initialize (<span class="number">42</span>);</span><br><span class="line">        <span class="comment">// ERROR: The property or indexer 'Employee.Id'</span></span><br><span class="line">        <span class="comment">// cannot be used in this context because the set</span></span><br><span class="line">        <span class="comment">// accessor is inaccessible</span></span><br><span class="line">        <span class="comment">//employee1.Id = "490";                     //will not compile if you uncomment this line</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Employee</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Initialize</span> (<span class="params"><span class="keyword">int</span> id</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// Set Id property</span></span><br><span class="line">        Id = id.ToString ();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="comment">// Id property declaration</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Id &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> _Id;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Providing an access modifier is in C# 2.0</span></span><br><span class="line">        <span class="comment">// and higher only</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">set</span> &#123;</span><br><span class="line">            _Id = <span class="keyword">value</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">string</span> _Id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为赋值方法指定private修饰符后，属性对于处Employee之外的其他类来说是只读的。在Employee类内部，属性是可读/可写的，所以可在构造器中对属性进行赋值。为取值方法或赋值方法指定访问修饰符时，注意该访问修饰符的“限制性”必须比应用于整个属相的访问修饰符更“严格”。例如，属性声明为较为严格的private，但将它的赋值方法声明为较宽松的public，就会发生编译错误。</p><h2 id="属性作为虚字段使用"><a href="#属性作为虚字段使用" class="headerlink" title="属性作为虚字段使用"></a>属性作为虚字段使用</h2><p>下例中，Name属性的实现：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        Employee employee1 = <span class="keyword">new</span> Employee ();</span><br><span class="line"></span><br><span class="line">        employee1.Name = <span class="string">"Inigo Montoya"</span>;</span><br><span class="line">        System.Console.WriteLine (employee1.Name);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Employee</span> &#123;</span><br><span class="line">    <span class="comment">// FirstName property</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> FirstName &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> _FirstName;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123;</span><br><span class="line">            _FirstName = <span class="keyword">value</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">string</span> _FirstName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// LastName property</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> LastName &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> _LastName;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123;</span><br><span class="line">            _LastName = <span class="keyword">value</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">string</span> _LastName;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Name property</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Name &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> FirstName + <span class="string">" "</span> + LastName;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123;</span><br><span class="line">            <span class="comment">// Split the assigned value into </span></span><br><span class="line">            <span class="comment">// first and last names.</span></span><br><span class="line">            <span class="keyword">string</span>[] names;</span><br><span class="line">            names = <span class="keyword">value</span>.Split (<span class="keyword">new</span> <span class="keyword">char</span>[] &#123; <span class="string">' '</span> &#125;);</span><br><span class="line">            <span class="keyword">if</span> (names.Length == <span class="number">2</span>) &#123;</span><br><span class="line">                FirstName = names[<span class="number">0</span>];</span><br><span class="line">                LastName = names[<span class="number">1</span>];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// Throw an exception if the full </span></span><br><span class="line">                <span class="comment">// name was not assigned.</span></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> System.ArgumentException (</span><br><span class="line">                    <span class="keyword">string</span>.Format (</span><br><span class="line">                        <span class="string">"Assigned value '&#123;0&#125;' is invalid"</span>, <span class="keyword">value</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Title property</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Title &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Manager property</span></span><br><span class="line">    <span class="keyword">public</span> Employee Manager &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="构造器-Constructors-构造函数"><a href="#构造器-Constructors-构造函数" class="headerlink" title="构造器 Constructors (构造函数)"></a>构造器 Constructors (构造函数)</h1><p>每当创建<a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/class" target="_blank" rel="noopener">类</a>或<a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/struct" target="_blank" rel="noopener">结构</a>时，将会调用其构造函数。Whenever a <a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/class" target="_blank" rel="noopener">class</a> or <a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/struct" target="_blank" rel="noopener">struct</a> is created, its constructor is called. 类或结构可能具有采用不同参数的多个构造函数。A class or struct may have multiple constructors that take different arguments. 使用构造函数，程序员能够设置默认值、限制实例化，并编写灵活易读的代码。Constructors enable the programmer to set default values, limit instantiation, and write code that is flexible and easy to read. 有关详细信息和示例，请参阅<a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/programming-guide/classes-and-structs/using-constructors" target="_blank" rel="noopener">使用构造函数</a>和<a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/programming-guide/classes-and-structs/instance-constructors" target="_blank" rel="noopener">实例构造函数</a>。</p><h2 id="构造函数声明与调用"><a href="#构造函数声明与调用" class="headerlink" title="构造函数声明与调用"></a>构造函数声明与调用</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Employee</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Employee constructor</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Employee</span>(<span class="params"><span class="keyword">string</span> firstName, <span class="keyword">string</span> lastName</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        FirstName = firstName;</span><br><span class="line">        LastName = lastName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> FirstName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> LastName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Salary &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">｝</span><br></pre></td></tr></table></figure><p>构造函数是一种<code>方法</code>，其名称与其<code>类名`</code>完全相同<code>。 其方法签名仅包含方法名称和其参数列表；它</code>没有返回类型`。构造函数是“运行时”用来初始化对象实例的方法。在此例中，构造函数以员工的名字和姓氏作为参数，允许程序员在实例化Employee对象时制定这些参数的值。如下例：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Employee employee;</span><br><span class="line">        employee = <span class="keyword">new</span> Employee(<span class="string">"Inigo"</span>, <span class="string">"Montoya"</span>);</span><br><span class="line">        employee.Salary = <span class="string">"Too Little"</span>;</span><br><span class="line"></span><br><span class="line">        System.Console.WriteLine(</span><br><span class="line">            <span class="string">"&#123;0&#125; &#123;1&#125;: &#123;2&#125;"</span>,</span><br><span class="line">            employee.FirstName,</span><br><span class="line">            employee.LastName,</span><br><span class="line">            employee.Salary);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果某个构造函数可以作为单个语句实现，则可以使用<a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/programming-guide/statements-expressions-operators/expression-bodied-members" target="_blank" rel="noopener">表达式主体定义</a>。If a constructor can be implemented as a single statement, you can use an <a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/programming-guide/statements-expressions-operators/expression-bodied-members" target="_blank" rel="noopener">expression body definition</a>. 以下示例定义 <code>Location</code> 类，其构造函数具有一个名为“name”的字符串参数。The following example defines a <code>Location</code> class whose constructor has a single string parameter named <em>name</em>. 表达式主体定义给 <code>locationName</code> 字段分配参数。The expression body definition assigns the argument to the <code>locationName</code> field.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Location</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">string</span> locationName;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Location</span>(<span class="params"><span class="keyword">string</span> name</span>) </span>=&gt; locationName = name;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">string</span> Name</span><br><span class="line">   &#123;</span><br><span class="line">      <span class="keyword">get</span> =&gt; locationName;</span><br><span class="line">      <span class="keyword">set</span> =&gt; locationName = <span class="keyword">value</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="默认构造器-Default-constructors"><a href="#默认构造器-Default-constructors" class="headerlink" title="默认构造器 Default constructors"></a>默认构造器 Default constructors</h2><p>如果没有为类提供构造函数，默认情况下，C# 将创建一个会实例化对象并将成员变量设置为默认值的构造函数，如<a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/default-values-table" target="_blank" rel="noopener">默认值表</a>中所列。If you don’t provide a constructor for your class, C# creates one by default that instantiates the object and sets member variables to the default values as listed in the <a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/default-values-table" target="_blank" rel="noopener">Default Values Table</a>. 如果没有为结构提供构造函数，C# 将依赖于隐式默认构造函数，自动将值类型的每个字段初始化为其默认值，如<a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/default-values-table" target="_blank" rel="noopener">默认值表</a>中所列。If you don’t provide a constructor for your struct, C# relies on an <em>implicit default constructor</em> to automatically initialize each field of a value type to its default value as listed in the <a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/default-values-table" target="_blank" rel="noopener">Default Values Table</a>. 有关详细信息和示例，请参阅<a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/programming-guide/classes-and-structs/instance-constructors" target="_blank" rel="noopener">实例构造函数</a>。</p><h2 id="对象初始化器-Object-Initializer"><a href="#对象初始化器-Object-Initializer" class="headerlink" title="对象初始化器 Object Initializer"></a>对象初始化器 Object Initializer</h2><p>可以使用<code>对象初始值设定项</code>(对象初始化器)以声明方式初始化类型对象，而无需显式调用类型的构造函数。You can use object initializers to initialize type objects in a declarative manner without explicitly invoking a constructor for the type.</p><p>以下示例演示如何将<code>对象初始化器</code>用于命名对象。The following examples show how to use object initializers with named objects. 编译器通过首先访问默认实例构造函数，然后处理成员初始化来处理对象初始值设定项。The compiler processes object initializers by first accessing the default instance constructor and then processing the member initializations. 因此，如果默认构造函数在类中声明为 <code>private</code>，则需要公共访问的对象初始值设定项将失败。Therefore, if the default constructor is declared as <code>private</code> in the class, object initializers that require public access will fail.</p><p>如果要定义匿名类型，则必须使用<code>对象初始化器</code>。You must use an object initializer if you’re defining an anonymous type. 有关详细信息，请参阅<a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/programming-guide/classes-and-structs/how-to-return-subsets-of-element-properties-in-a-query" target="_blank" rel="noopener">如何：在查询中返回元素属性的子集</a>。For more information, see <a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/programming-guide/classes-and-structs/how-to-return-subsets-of-element-properties-in-a-query" target="_blank" rel="noopener">How to: Return Subsets of Element Properties in a Query</a>.</p><p>下面的示例演示如何使用<code>对象初始化器</code>初始化新的 <code>StudentName</code> 类型。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Declare a StudentName by using the constructor that has two parameters.</span></span><br><span class="line">        StudentName student1 = <span class="keyword">new</span> StudentName (<span class="string">"Craig"</span>, <span class="string">"Playstead"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Make the same declaration by using an object initializer and sending </span></span><br><span class="line">        <span class="comment">// arguments for the first and last names. The default constructor is </span></span><br><span class="line">        <span class="comment">// invoked in processing this declaration, not the constructor that has</span></span><br><span class="line">        <span class="comment">// two parameters.</span></span><br><span class="line">        StudentName student2 = <span class="keyword">new</span> StudentName &#123;</span><br><span class="line">            FirstName = <span class="string">"Craig"</span>,</span><br><span class="line">            LastName = <span class="string">"Playstead"</span>,</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Declare a StudentName by using an object initializer and sending</span></span><br><span class="line">        <span class="comment">// an argument for only the ID property. No corresponding constructor is</span></span><br><span class="line">        <span class="comment">// necessary. Only the default constructor is used to process object</span></span><br><span class="line">        <span class="comment">// initializers.</span></span><br><span class="line">        StudentName student3 = <span class="keyword">new</span> StudentName &#123;</span><br><span class="line">            ID = <span class="number">183</span></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Declare a StudentName by using an object initializer and sending</span></span><br><span class="line">        <span class="comment">// arguments for all three properties. No corresponding constructor is</span></span><br><span class="line">        <span class="comment">// defined in the class.</span></span><br><span class="line">        StudentName student4 = <span class="keyword">new</span> StudentName &#123;</span><br><span class="line">            FirstName = <span class="string">"Craig"</span>,</span><br><span class="line">            LastName = <span class="string">"Playstead"</span>,</span><br><span class="line">            ID = <span class="number">116</span></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        System.Console.WriteLine (student1.ToString ());</span><br><span class="line">        System.Console.WriteLine (student2.ToString ());</span><br><span class="line">        System.Console.WriteLine (student3.ToString ());</span><br><span class="line">        System.Console.WriteLine (student4.ToString ());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Output:</span></span><br><span class="line">    <span class="comment">// Craig  0</span></span><br><span class="line">    <span class="comment">// Craig  0</span></span><br><span class="line">    <span class="comment">//   183</span></span><br><span class="line">    <span class="comment">// Craig  116</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">StudentName</span> &#123;</span><br><span class="line">    <span class="comment">// The default constructor has no parameters. The default constructor</span></span><br><span class="line">    <span class="comment">// is invoked in the processing of object initializers.</span></span><br><span class="line">    <span class="comment">// You can test this by changing the access modifier from public to</span></span><br><span class="line">    <span class="comment">// private. The declarations in Main that use object initializers will</span></span><br><span class="line">    <span class="comment">// fail.</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StudentName</span> (<span class="params"></span>) </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// The following constructor has parameters for two of the three</span></span><br><span class="line">    <span class="comment">// properties.</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StudentName</span> (<span class="params"><span class="keyword">string</span> first, <span class="keyword">string</span> last</span>) </span>&#123;</span><br><span class="line">        FirstName = first;</span><br><span class="line">        LastName = last;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Properties.</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> FirstName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> LastName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> ID &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">string</span> <span class="title">ToString</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> FirstName + <span class="string">"  "</span> + ID;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面的示例演示如何使用<code>集合初始化器</code>来初始化 <code>StudentName</code> 类型的集合。The following example shows how to initialize a collection of <code>StudentName</code> types by using a collection initializer. 请注意，集合初始值设定项是一系列由逗号分隔的对象初始值设定项。Note that a collection initializer is a series of comma-separated object initializers.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">List&lt;StudentName&gt; students = <span class="keyword">new</span> List&lt;StudentName&gt;()</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">new</span> StudentName &#123;FirstName=<span class="string">"Craig"</span>, LastName=<span class="string">"Playstead"</span>, ID=<span class="number">116</span>&#125;,</span><br><span class="line">  <span class="keyword">new</span> StudentName &#123;FirstName=<span class="string">"Shu"</span>, LastName=<span class="string">"Ito"</span>, ID=<span class="number">112</span>&#125;,</span><br><span class="line">  <span class="keyword">new</span> StudentName &#123;FirstName=<span class="string">"Gretchen"</span>, LastName=<span class="string">"Rivas"</span>, ID=<span class="number">113</span>&#125;,</span><br><span class="line">  <span class="keyword">new</span> StudentName &#123;FirstName=<span class="string">"Rajesh"</span>, LastName=<span class="string">"Rotti"</span>, ID=<span class="number">114</span>&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="终结器-Finalizers"><a href="#终结器-Finalizers" class="headerlink" title="终结器 Finalizers"></a>终结器 Finalizers</h2><p>终结器用于析构类的实例。Finalizers are used to destruct instances of classes.</p><blockquote><p>备注 Remarks</p></blockquote><ul><li><p>无法在结构中定义终结器。Finalizers cannot be defined in structs. 它们仅用于类。They are only used with classes.</p></li><li><p>一个类只能有一个终结器。A class can only have one finalizer.</p></li><li><p>不能继承或重载终结器。Finalizers cannot be inherited or overloaded.</p></li><li><p>不能手动调用终结器。Finalizers cannot be called. 可以自动调用它们。They are invoked automatically.</p></li><li><p>终结器不使用修饰符或参数。</p></li></ul><p>例如，以下是类 <code>Car</code> 的终结器声明。For example, the following is a declaration of a finalizer for the <code>Car</code> class.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Car</span></span><br><span class="line">&#123;</span><br><span class="line">    ~Car()  <span class="comment">// destructor</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// cleanup statements...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>终结器也可以作为表达式主体定义实现，如下面的示例所示。A finalizer can also be implemented as an expression body definition, as the following example shows.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Destroyer</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">string</span> <span class="title">ToString</span>(<span class="params"></span>) </span>=&gt; GetType().Name;</span><br><span class="line"></span><br><span class="line">   ~Destroyer() =&gt; Console.WriteLine(<span class="string">$"The <span class="subst">&#123;ToString()&#125;</span> destructor is executing."</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序员无法控制何时调用终结器，因为这由垃圾回收器决定。The programmer has no control over when the finalizer is called because this is determined by the garbage collector. 垃圾回收器检查应用程序不再使用的对象。The garbage collector checks for objects that are no longer being used by the application. 如果它认为某个对象符合终止条件，则调用终结器（如果有），并回收用来存储此对象的内存。If it considers an object eligible for finalization, it calls the finalizer (if any) and reclaims the memory used to store the object. 还可在程序退出后调用终结器。Finalizers are also called when the program exits.</p><p>可以通过调用 <a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.gc.collect" target="_blank" rel="noopener">Collect</a> 强制进行垃圾回收，但多数情况下应避免此操作，因为它可能会造成性能问题。</p><h2 id="构造器的重载"><a href="#构造器的重载" class="headerlink" title="构造器的重载"></a>构造器的重载</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Employee</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Employee</span> (<span class="params"><span class="keyword">string</span> firstName, <span class="keyword">string</span> lastName</span>) </span>&#123;</span><br><span class="line">        FirstName = firstName;</span><br><span class="line">        LastName = lastName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Employee</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">int</span> id, <span class="keyword">string</span> firstName, <span class="keyword">string</span> lastName</span>) </span>&#123;</span><br><span class="line">        Id = id;</span><br><span class="line">        FirstName = firstName;</span><br><span class="line">        LastName = lastName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Employee</span> (<span class="params"><span class="keyword">int</span> id</span>) </span>&#123;</span><br><span class="line">        Id = id;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Look up employee name...</span></span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> FirstName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> LastName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Salary &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>应优先使用可选参数而不是重载，以便在API中清楚地看出“默认”属性的默认值。例如，Person的一个构造器签名Person（string firstName, string lastName, int? age = null）就清楚地指明如果Person的Age未指定，就将它默认为null。</p><h2 id="构造器链：使用this调用另一个构造器"><a href="#构造器链：使用this调用另一个构造器" class="headerlink" title="构造器链：使用this调用另一个构造器"></a>构造器链：使用this调用另一个构造器</h2><p>上例中，对Employee对象进行初始化的代码多处重复，可以从一个构造器中调用另一个构造器，避免重复输入代码。这称为<strong>构造器链</strong>，它是用<strong>构造器初始化器</strong>来实现的。C#采用的语法格式是在一个冒号后面添加this关键字，再添加被调用构造器的参数列表。构造器初始化器在自行当前的构造器实现之前，判断要调用另外哪一个构造器，实例如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Employee</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Employee</span> (<span class="params"><span class="keyword">string</span> firstName, <span class="keyword">string</span> lastName</span>) </span>&#123;</span><br><span class="line">        FirstName = firstName;</span><br><span class="line">        LastName = lastName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Employee</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">int</span> id, <span class="keyword">string</span> firstName, <span class="keyword">string</span> lastName</span>) : <span class="title">this</span> (<span class="params">firstName, lastName</span>) </span>&#123;</span><br><span class="line">        Id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Employee</span> (<span class="params"><span class="keyword">int</span> id</span>) </span>&#123;</span><br><span class="line">        Id = id;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Look up employee name...</span></span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// <span class="doctag">NOTE:</span>  Member constructors cannot be </span></span><br><span class="line">        <span class="comment">// called explicitly inline</span></span><br><span class="line">        <span class="comment">// this(id, firstName, lastName);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> FirstName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> LastName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Salary &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上例中，3个参数的构造器调用2个参数的构造器。通常情况下，用<code>参数最少</code>的构造器调用<code>参数最多</code>的构造器，为未知的参数传递默认值。如下例：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Employee</span>(<span class="params"><span class="keyword">int</span> id</span>):<span class="title">this</span>(<span class="params">id,<span class="string">""</span>,<span class="string">""</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">string</span> firstName;</span><br><span class="line">    <span class="keyword">string</span> lastName;</span><br><span class="line">    Id = id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检索、组合Employee数据</span></span><br><span class="line">    firstName = <span class="keyword">string</span>.Empty;</span><br><span class="line">    lastName = <span class="keyword">string</span>.Empty;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    Initialize(id, firstName, lastName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>构造器链</code>完整例子参考：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> personName;</span><br><span class="line">    <span class="comment">//定义年龄为可空类型,这样就可以赋予其null值</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>? personAge;</span><br><span class="line">    <span class="comment">//下面前三个构造函数都是去调用参数最多的第四个构造函数,只取它们所需要的部分参数即可</span></span><br><span class="line">    <span class="comment">//这样的做法就是this串联构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span> (<span class="params"></span>) : <span class="title">this</span> (<span class="params"><span class="string">""</span>, <span class="number">0</span></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span> (<span class="params"><span class="keyword">string</span> name</span>) : <span class="title">this</span> (<span class="params">name, <span class="literal">null</span></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span> (<span class="params"><span class="keyword">int</span> age</span>) : <span class="title">this</span> (<span class="params"><span class="string">""</span>, age</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span> (<span class="params"><span class="keyword">string</span> name, <span class="keyword">int</span>? age</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.personName = name;</span><br><span class="line">        <span class="comment">//通过 ?? 判断传入的age是否null值</span></span><br><span class="line">        <span class="comment">//如果属于null值,则赋值100</span></span><br><span class="line">        <span class="keyword">this</span>.personAge = age ?? <span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Display</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        Console.WriteLine (<span class="string">"Name:&#123;0&#125;,Age:&#123;1&#125;"</span>, personName, personAge);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Hello</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span> (<span class="params"><span class="keyword">string</span>[] args</span>) </span>&#123;</span><br><span class="line">        Person per1 = <span class="keyword">new</span> Person ();</span><br><span class="line">        per1.Display ();</span><br><span class="line">        Person per2 = <span class="keyword">new</span> Person (<span class="number">20</span>);</span><br><span class="line">        per2.Display ();</span><br><span class="line">        Person per3 = <span class="keyword">new</span> Person (<span class="string">"evan"</span>);</span><br><span class="line">        per3.Display ();</span><br><span class="line">        Person per4 = <span class="keyword">new</span> Person (<span class="string">"evan"</span>, <span class="number">20</span>);</span><br><span class="line">        per4.Display ();</span><br><span class="line">        Console.ReadKey ();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="初学者主题：集中初始化"><a href="#初学者主题：集中初始化" class="headerlink" title="初学者主题：集中初始化"></a>初学者主题：集中初始化</h2><p>创建单独的方法，将所有初始化代码集中在一起，如下例中，创建名为Initialize()方法，它同时获取员工的名字、姓氏和ID。示例如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Employee</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Employee</span> (<span class="params"><span class="keyword">string</span> firstName, <span class="keyword">string</span> lastName</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> id;</span><br><span class="line">        <span class="comment">// Generate an employee ID...</span></span><br><span class="line">        id = <span class="number">0</span>; <span class="comment">// id needs to be initialized for this example</span></span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        Initialize (id, firstName, lastName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Employee</span> (<span class="params"><span class="keyword">int</span> id, <span class="keyword">string</span> firstName, <span class="keyword">string</span> lastName</span>) </span>&#123;</span><br><span class="line">        Initialize (id, firstName, lastName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Employee</span> (<span class="params"><span class="keyword">int</span> id</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">string</span> firstName;</span><br><span class="line">        <span class="keyword">string</span> lastName;</span><br><span class="line">        Id = id;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Look up employee data</span></span><br><span class="line">        firstName = <span class="keyword">string</span>.Empty;</span><br><span class="line">        lastName = <span class="keyword">string</span>.Empty;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">        Initialize (id, firstName, lastName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Initialize</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">int</span> id, <span class="keyword">string</span> firstName, <span class="keyword">string</span> lastName</span>) </span>&#123;</span><br><span class="line">        Id = id;</span><br><span class="line">        FirstName = firstName;</span><br><span class="line">        LastName = lastName;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> FirstName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> LastName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="匿名类型"><a href="#匿名类型" class="headerlink" title="匿名类型"></a>匿名类型</h2><p>C# 3.0引入了对匿名类型的支持，匿名类型提供了一种方便的方法，可用来将一组只读属性封装到单个对象中，而无需首先显式定义一个类型。 类型名由编译器生成，并且不能在源代码级使用。 每个属性的类型由编译器推断。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> patent1 =</span><br><span class="line">            <span class="keyword">new</span> &#123;</span><br><span class="line">                Title = <span class="string">"Bifocals"</span>,</span><br><span class="line">                YearOfPublication = <span class="string">"1784"</span></span><br><span class="line">            &#125;;</span><br><span class="line">        <span class="keyword">var</span> patent2 =</span><br><span class="line">            <span class="keyword">new</span> &#123;</span><br><span class="line">                Title = <span class="string">"Phonograph"</span>,</span><br><span class="line">                YearOfPublication = <span class="string">"1877"</span></span><br><span class="line">            &#125;;</span><br><span class="line">        <span class="keyword">var</span> patent3 =</span><br><span class="line">            <span class="keyword">new</span> &#123;</span><br><span class="line">                patent1.Title,</span><br><span class="line">                Year = patent1.YearOfPublication</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">        System.Console.WriteLine (<span class="string">"&#123;0&#125; (&#123;1&#125;)"</span>,</span><br><span class="line">            patent1.Title, patent1.YearOfPublication);</span><br><span class="line">        System.Console.WriteLine (<span class="string">"&#123;0&#125; (&#123;1&#125;)"</span>,</span><br><span class="line">            patent2.Title, patent1.YearOfPublication);</span><br><span class="line"></span><br><span class="line">        Console.WriteLine ();</span><br><span class="line">        Console.WriteLine (patent1);</span><br><span class="line">        Console.WriteLine (patent2);</span><br><span class="line"></span><br><span class="line">        Console.WriteLine ();</span><br><span class="line">        Console.WriteLine (patent3);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 输出</span></span><br><span class="line"><span class="comment">ifocals (1784)</span></span><br><span class="line"><span class="comment">Phonograph (1784)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&#123; Title = Bifocals, YearOfPublication = 1784 &#125;</span></span><br><span class="line"><span class="comment">&#123; Title = Phonograph, YearOfPublication = 1877 &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&#123; Title = Bifocals, Year = 1784 &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>匿名类型通常用在查询表达式的 <a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/select-clause" target="_blank" rel="noopener">select</a> 子句中，以便返回源序列中每个对象的属性子集。Anonymous types typically are used in the <a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/select-clause" target="_blank" rel="noopener">select</a> clause of a query expression to return a subset of the properties from each object in the source sequence. 有关查询的详细信息，请参阅 <a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/programming-guide/linq-query-expressions/index" target="_blank" rel="noopener">LINQ 查询表达式</a>。</p><h1 id="静态成员"><a href="#静态成员" class="headerlink" title="静态成员"></a>静态成员</h1><p>使用 <code>static</code> 修饰符可声明属于类型本身而不是属于特定对象的静态成员。Use the <code>static</code> modifier to declare a static member, which belongs to the type itself rather than to a specific object. <code>static</code> 修饰符可用于类、字段、方法、属性、运算符、事件和构造函数，但不能用于索引器、终结器或类以外的类型。The <code>static</code> modifier can be used with classes, fields, methods, properties, operators, events, and constructors, but it cannot be used with indexers, finalizers, or types other than classes. 有关详细信息，请参阅<a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/programming-guide/classes-and-structs/static-classes-and-static-class-members" target="_blank" rel="noopener">静态类和静态类成员</a>。For more information, see <a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/programming-guide/classes-and-structs/static-classes-and-static-class-members" target="_blank" rel="noopener">Static Classes and Static Class Members</a>.</p><p>C# 不支持静态局部变量（在方法范围中声明的变量）。C# does not support static local variables (variables that are declared in method scope).</p><p>可在成员的返回类型之前使用 <code>static</code> 关键字声明静态类成员，如下面的示例所示：You declare static class members by using the <code>static</code> keyword before the return type of the member, as shown in the following example:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Automobile</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> NumberOfWheels = <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> SizeOfGasTank</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">15</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Drive</span>(<span class="params"></span>) </span>&#123; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">event</span> EventType RunOutOfGas;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Other non-static fields and properties...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在首次访问静态成员之前以及在调用构造函数（如果有）之前，会初始化静态成员。Static members are initialized before the static member is accessed for the first time and before the static constructor, if there is one, is called. 若要访问静态类成员，请使用类的名称（而不是变量名称）指定成员的位置，如下面的示例所示：To access a static class member, use the name of the class instead of a variable name to specify the location of the member, as shown in the following example:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Automobile.Drive();</span><br><span class="line"><span class="keyword">int</span> i = Automobile.NumberOfWheels;</span><br></pre></td></tr></table></figure><p>如果类包含静态字段，则提供在类加载时初始化它们的静态构造函数。</p><p>常量或类型声明是隐式的静态成员。A constant or type declaration is implicitly a static member.</p><p>不能通过实例引用静态成员。A static member cannot be referenced through an instance. 然而，可以通过类型名称引用它。Instead, it is referenced through the type name. 例如，请考虑以下类：For example, consider the following class:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyBaseC</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">struct</span> MyStruct</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> x = <span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>若要引用静态成员 <code>x</code>，除非可从相同范围访问该成员，否则请使用完全限定的名称 <code>MyBaseC.MyStruct.x</code>：To refer to the static member <code>x</code>, use the fully qualified name, <code>MyBaseC.MyStruct.x</code>, unless the member is accessible from the same scope:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Console.WriteLine(MyBaseC.MyStruct.x);</span><br></pre></td></tr></table></figure><p>尽管类的实例包含该类的所有实例字段的单独副本，但每个<code>静态</code>字段<code>只有一个副本</code>。</p><blockquote><p>示例</p></blockquote><p>此示例显示，尽管可以使用尚未声明的其他静态字段来初始化某个静态字段，但除非向该静态字段显式分配值，否则不会定义该结果。This example shows that although you can initialize a static field by using another static field not yet declared, the results will be undefined until you explicitly assign a value to the static field.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Test</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> x = y;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> y = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        Console.WriteLine (x);</span><br><span class="line">        Console.WriteLine (y);</span><br><span class="line"></span><br><span class="line">        x = <span class="number">99</span>;</span><br><span class="line">        Console.WriteLine (x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Output:</span></span><br><span class="line"><span class="comment">    0</span></span><br><span class="line"><span class="comment">    5</span></span><br><span class="line"><span class="comment">    99</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="静态字段"><a href="#静态字段" class="headerlink" title="静态字段"></a>静态字段</h2><blockquote><p>使用<code>static</code>关键字声明一个<code>静态字段</code>，然后访问：</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        Employee.NextId = <span class="number">1000000</span>;</span><br><span class="line"></span><br><span class="line">        Employee employee1 = <span class="keyword">new</span> Employee (</span><br><span class="line">            <span class="string">"Inigo"</span>, <span class="string">"Montoya"</span>);</span><br><span class="line">        Employee employee2 = <span class="keyword">new</span> Employee (</span><br><span class="line">            <span class="string">"Princess"</span>, <span class="string">"Buttercup"</span>);</span><br><span class="line"></span><br><span class="line">        Console.WriteLine (</span><br><span class="line">            <span class="string">"&#123;0&#125; &#123;1&#125; (&#123;2&#125;)"</span>,</span><br><span class="line">            employee1.FirstName,</span><br><span class="line">            employee1.LastName,</span><br><span class="line">            employee1.Id);</span><br><span class="line">        Console.WriteLine (</span><br><span class="line">            <span class="string">"&#123;0&#125; &#123;1&#125; (&#123;2&#125;)"</span>,</span><br><span class="line">            employee2.FirstName,</span><br><span class="line">            employee2.LastName,</span><br><span class="line">            employee2.Id);</span><br><span class="line"></span><br><span class="line">        Console.WriteLine (<span class="string">"NextId = &#123;0&#125;"</span>, Employee.NextId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Employee</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Employee</span> (<span class="params"><span class="keyword">string</span> firstName, <span class="keyword">string</span> lastName</span>) </span>&#123;</span><br><span class="line">        FirstName = firstName;</span><br><span class="line">        LastName = lastName;</span><br><span class="line">        Id = NextId;</span><br><span class="line">        NextId++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> NextId = <span class="number">42</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> FirstName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> LastName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Salary &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 输出</span></span><br><span class="line"><span class="comment">Inigo Montoya (1000000)</span></span><br><span class="line"><span class="comment">Princess Buttercup (1000001)</span></span><br><span class="line"><span class="comment">NextId = 1000002</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><code>NextId</code>字段声明包含<code>static</code>修饰符，成为<strong>静态字段</strong>。<code>静态字段</code>和<code>实例字段</code>一样可以在声明时进行初始化。<code>静态字段</code>只属于类本身，从类外部访问静态字段时要使用<code>类名</code>,而不是类实例（变量）名。只有在类（或者派生类）内部代码中，才可以省略类名。</p><h2 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h2><p>Console.WriteLine()这些，就是静态方法。无需实例话，直接引用。</p><h2 id="静态构造器"><a href="#静态构造器" class="headerlink" title="静态构造器"></a>静态构造器</h2><p>C#支持<code>静态构造器</code>,不允许有任何参数。使用静态构造器将类中的静态数据初始化成特定的值，尤其是无法通过声明时的一次简单赋值来获得初始值的时候。</p><blockquote><p>声明静态构造器</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Employee</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="title">Employee</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        Random randomGenerator = <span class="keyword">new</span> Random ();</span><br><span class="line">        NextId = randomGenerator.Next (<span class="number">101</span>, <span class="number">999</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> NextId = <span class="number">42</span>;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在静态构造器中进行的赋值，优先于声明时的赋值，这和实例字段情况一样。不要在静态构造器中抛出异常，这会造成类型在用用程序的剩余生存期内无法使用。</p><h2 id="静态属性"><a href="#静态属性" class="headerlink" title="静态属性"></a>静态属性</h2><p>可以将属性声明为static，使用静态属性几乎肯定比使用公共静态字段好，因为公共静态字段在任何地方都能调用，而静态属性至少提供了一定程度的封装。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Employee</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> NextId &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> _NextId;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">set</span> &#123;</span><br><span class="line">            _NextId = <span class="keyword">value</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> _NextId = <span class="number">42</span>;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="静态类"><a href="#静态类" class="headerlink" title="静态类"></a>静态类</h2><p>静态类无法实例化。 换句话说，无法使用 <code>new</code> 关键字创建类类型的变量。 由于不存在任何实例变量，因此可以<code>使用类名本身</code>访问静态类的成员。静态类可以用作只对输入参数进行操作并且不必获取或设置任何内部实例字段的方法集的方便容器。</p><p>以下列表提供静态类的主要功能：The following list provides the main features of a static class:</p><ul><li><p>只包含静态成员。Contains only static members.</p></li><li><p>无法进行实例化。Cannot be instantiated.</p></li><li><p>会进行密封。Is sealed.</p></li><li><p>不能包含<a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/programming-guide/classes-and-structs/instance-constructors" target="_blank" rel="noopener">实例构造函数</a>。</p></li></ul><p>因此，创建静态类基本上与创建只包含静态成员和私有构造函数的类相同。Creating a static class is therefore basically the same as creating a class that contains only static members and a private constructor. 私有构造函数可防止类进行实例化。A private constructor prevents the class from being instantiated. 使用静态类的优点是编译器可以进行检查，以确保不会意外地添加任何实例成员。The advantage of using a static class is that the compiler can check to make sure that no instance members are accidentally added. 编译器可保证无法创建此类的实例。The compiler will guarantee that instances of this class cannot be created.</p><p>静态类会进行密封，因此不能继承。Static classes are sealed and therefore cannot be inherited. 它们不能继承自任何类（除了 <a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.object" target="_blank" rel="noopener">Object</a>）。They cannot inherit from any class except <a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.object" target="_blank" rel="noopener">Object</a>. 静态类不能包含实例构造函数；但是，它们可以包含静态构造函数。Static classes cannot contain an instance constructor; however, they can contain a static constructor. 如果类包含需要进行重要初始化的静态成员，则非静态类还应定义静态构造函数。Non-static classes should also define a static constructor if the class contains static members that require non-trivial initialization. 有关详细信息，请参阅<a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/programming-guide/classes-and-structs/static-constructors" target="_blank" rel="noopener">静态构造函数</a>。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arrayNum = &#123; <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span> &#125;;</span><br><span class="line">        <span class="keyword">int</span>[] arrayNumber = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span> &#125;;</span><br><span class="line"></span><br><span class="line">        System.Console.WriteLine (SimpleMath.Max (arrayNumber));</span><br><span class="line">        System.Console.WriteLine (SimpleMath.Min (arrayNum));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">SimpleMath</span> &#123;</span><br><span class="line">    <span class="comment">// params allows the number of parameters to vary.</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">Max</span> (<span class="params"><span class="keyword">params</span> <span class="keyword">int</span>[] numbers</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// Check that there is a least one item in numbers.</span></span><br><span class="line">        <span class="keyword">if</span> (numbers.Length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentException (</span><br><span class="line">                <span class="string">"numbers cannot be empty"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> result;</span><br><span class="line">        result = numbers[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">int</span> number <span class="keyword">in</span> numbers) &#123;</span><br><span class="line">            <span class="keyword">if</span> (number &gt; result) &#123;</span><br><span class="line">                result = number;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// params allows the number of parameters to vary.</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">Min</span> (<span class="params"><span class="keyword">params</span> <span class="keyword">int</span>[] numbers</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// Check that there is a least one item in numbers.</span></span><br><span class="line">        <span class="keyword">if</span> (numbers.Length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentException (</span><br><span class="line">                <span class="string">"numbers cannot be empty"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> result;</span><br><span class="line">        result = numbers[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">int</span> number <span class="keyword">in</span> numbers) &#123;</span><br><span class="line">            <span class="keyword">if</span> (number &lt; result) &#123;</span><br><span class="line">                result = number;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="扩展方法"><a href="#扩展方法" class="headerlink" title="扩展方法"></a>扩展方法</h1><p>转自 <a href="http://www.cnblogs.com/wilber2013/p/4307282.html" target="_blank" rel="noopener">田小计划</a></p><p>当我们想为一个现有的类型添加一个方法的时候，有两种方式：一是直接在现有类型中添加方法；但是很多情况下现有类型都是不允许修改的，那么可以使用第二种方式，基于现有类型创建一个子类，然后在子类中添加想要的方法。</p><p>当C# 2.0中出现了静态类之后，对于上面的问题，我们也可以创建静态工具类来实现想要添加的方法。这样做可以避免创建子类，但是在使用时代码就没有那么直观了。</p><p>其实，上面的方法都不是很好的解决办法。在C# 3.0中出现了扩展方法，通过扩展方法我们可以直接在一个现有的类型上”添加”方法。当使用扩展方法的时候，可以像调用实例方法一样的方式来调用扩展方法。</p><h2 id="扩展方法的声明和调用"><a href="#扩展方法的声明和调用" class="headerlink" title="扩展方法的声明和调用"></a>扩展方法的声明和调用</h2><p>相比普通方法，扩展方法有它自己的特征，下面就来看看怎么声明一个扩展方法：</p><ul><li>它必须在一个非嵌套、非泛型的静态类中（所以扩展方法一定是静态方法）</li><li>它至少要有一个参数</li><li>第一个参数必须加上this关键字作为前缀<ul><li>第一个参数类型也称为扩展类型（extended type），表示该方法对这个类型进行扩展</li></ul></li><li>第一个参数不能用其他任何修饰符（比如out或ref）</li><li>第一个参数的类型不能是指针类型</li></ul><p>根据上面的要求，我们给int类型添加了一个扩展方法，用来判断一个int值是不是偶数：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ExtentionMethodTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">ExtentionMethods</span> &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">IsEven</span> (<span class="params"><span class="keyword">this</span> <span class="keyword">int</span> num</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> num % <span class="number">2</span> == <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span> &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span> (<span class="params"><span class="keyword">string</span>[] args</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line">            <span class="comment">//直接调用扩展方法</span></span><br><span class="line">            Console.WriteLine (<span class="string">"Is &#123;0&#125; a even number? &#123;1&#125;"</span>, num, num.IsEven ());</span><br><span class="line">            num = <span class="number">11</span>;</span><br><span class="line">            <span class="comment">//直接调用扩展方法</span></span><br><span class="line">            Console.WriteLine (<span class="string">"Is &#123;0&#125; a even number? &#123;1&#125;"</span>, num, num.IsEven ());</span><br><span class="line">            <span class="comment">//通过静态类调用静态方法</span></span><br><span class="line">            Console.WriteLine (<span class="string">"Is &#123;0&#125; a even number? &#123;1&#125;"</span>, num, ExtentionMethods.IsEven (num));</span><br><span class="line"></span><br><span class="line">            Console.Read ();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 输出</span></span><br><span class="line"><span class="comment">Is 10 a even number? True</span></span><br><span class="line"><span class="comment">Is 11 a even number? False</span></span><br><span class="line"><span class="comment">Is 11 a even number? False</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>通过上面的例子可以看到，当调用扩展方法的时候，可以像调用实例方法一样。这就是我们使用扩展方法的原因之一，我们可以给一个已有类型”添加”一个方法。</p><p>既然扩展方法是一个静态类的方法，我们当然也可以通过静态类来调用这个方法。</p><p>通过IL可以看到，其实扩展方法也是编译器为我们做了一些转换，将扩展方法转化成静态类的静态方法调用。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">.method <span class="keyword">private</span> hidebysig <span class="keyword">static</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Main</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">string</span>[] args</span></span></span><br><span class="line"><span class="function"><span class="params"></span>) cil managed </span>&#123;</span><br><span class="line">    <span class="comment">// Method begins at RVA 0x2068</span></span><br><span class="line">    <span class="comment">// Code size 98 (0x62)</span></span><br><span class="line">    .maxstack <span class="number">3</span></span><br><span class="line">        .entrypoint</span><br><span class="line">        .<span class="function">locals <span class="title">init</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">            [<span class="number">0</span>] int32</span></span></span><br><span class="line"><span class="function"><span class="params">        </span>)</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    IL_0000 : nop</span></span><br><span class="line"><span class="function">    IL_0001 : ldc.i4.s 10</span></span><br><span class="line"><span class="function">    IL_0003 : stloc .0</span></span><br><span class="line"><span class="function">    IL_0004 : ldstr "Is </span>&#123;<span class="number">0</span>&#125; a even number? &#123;<span class="number">1</span>&#125;<span class="string">"</span></span><br><span class="line"><span class="string">    IL_0009 : ldloc .0</span></span><br><span class="line"><span class="string">    IL_000a : box[System.Runtime] System.Int32</span></span><br><span class="line"><span class="string">    IL_000f : ldloc .0</span></span><br><span class="line"><span class="string">    //直接调用扩展方法</span></span><br><span class="line"><span class="string">    IL_0010 : call bool ExtentionMethodTest.ExtentionMethods::IsEven (int32)</span></span><br><span class="line"><span class="string">    IL_0015 : box[System.Runtime] System.Boolean</span></span><br><span class="line"><span class="string">    IL_001a : call void[System.Console] System.Console::WriteLine (string, object, object)</span></span><br><span class="line"><span class="string">    IL_001f : nop</span></span><br><span class="line"><span class="string">    IL_0020 : ldc.i4.s 11</span></span><br><span class="line"><span class="string">    IL_0022 : stloc .0</span></span><br><span class="line"><span class="string">    IL_0023 : ldstr "</span>Is &#123;<span class="number">0</span>&#125; a even number? &#123;<span class="number">1</span>&#125;<span class="string">"</span></span><br><span class="line"><span class="string">    IL_0028 : ldloc .0</span></span><br><span class="line"><span class="string">    IL_0029 : box[System.Runtime] System.Int32</span></span><br><span class="line"><span class="string">    IL_002e : ldloc .0</span></span><br><span class="line"><span class="string">    //直接调用扩展方法</span></span><br><span class="line"><span class="string">    IL_002f : call bool ExtentionMethodTest.ExtentionMethods::IsEven (int32)</span></span><br><span class="line"><span class="string">    IL_0034 : box[System.Runtime] System.Boolean</span></span><br><span class="line"><span class="string">    IL_0039 : call void[System.Console] System.Console::WriteLine (string, object, object)</span></span><br><span class="line"><span class="string">    IL_003e : nop</span></span><br><span class="line"><span class="string">    IL_003f : ldstr "</span>Is &#123;<span class="number">0</span>&#125; a even number? &#123;<span class="number">1</span>&#125;<span class="string">"</span></span><br><span class="line"><span class="string">    IL_0044 : ldloc .0</span></span><br><span class="line"><span class="string">    IL_0045 : box[System.Runtime] System.Int32</span></span><br><span class="line"><span class="string">    IL_004a : ldloc .0</span></span><br><span class="line"><span class="string">    //通过静态类调用静态方法</span></span><br><span class="line"><span class="string">    IL_004b : call bool ExtentionMethodTest.ExtentionMethods::IsEven (int32)</span></span><br><span class="line"><span class="string">    IL_0050 : box[System.Runtime] System.Boolean</span></span><br><span class="line"><span class="string">    IL_0055 : call void[System.Console] System.Console::WriteLine (string, object, object)</span></span><br><span class="line"><span class="string">    IL_005a : nop</span></span><br><span class="line"><span class="string">    IL_005b : call int32[System.Console] System.Console::Read ()</span></span><br><span class="line"><span class="string">    IL_0060 : pop</span></span><br><span class="line"><span class="string">    IL_0061 : ret</span></span><br><span class="line"><span class="string">&#125; // end of method Program::Main</span></span><br></pre></td></tr></table></figure><h1 id="const-和-readonly"><a href="#const-和-readonly" class="headerlink" title="const 和 readonly"></a>const 和 readonly</h1><ul><li>const修饰的常量在声明时必须初始化值；readonly修饰的常量可以不初始化值，且可以延迟到构造函数。</li><li>cons修饰的常量在编译期间会被解析，并将常量的值替换成初始化的值；而readonly延迟到运行的时候。</li><li>const修饰的常量注重的是效率；readonly修饰的常量注重灵活。</li><li>const修饰的常量没有内存消耗；readonly因为需要保存常量，所以有内存消耗。</li><li>const只能修饰基元类型、枚举类、或者字符串类型;readonly却没有这个限制。</li></ul><h2 id="const"><a href="#const" class="headerlink" title="const"></a>const</h2><p>常量是不可变的值，在编译时是已知的，在程序的生命周期内不会改变。Constants are immutable values which are known at compile time and do not change for the life of the program. 常量使用 <a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/const" target="_blank" rel="noopener">const</a> 修饰符声明。Constants are declared with the <a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/const" target="_blank" rel="noopener">const</a> modifier. 仅 C# 内置类型（不包括 <a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.object" target="_blank" rel="noopener">System.Object</a>）可声明为 <code>const</code>。Only the C# built-in types (excluding <a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.object" target="_blank" rel="noopener">System.Object</a>) may be declared as <code>const</code>. 有关内置类型的列表，请参阅<a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/built-in-types-table" target="_blank" rel="noopener">内置类型表</a>。For a list of the built-in types, see <a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/built-in-types-table" target="_blank" rel="noopener">Built-In Types Table</a>. 用户定义的类型（包括类、结构和数组）不能为 <code>const</code>。User-defined types, including classes, structs, and arrays, cannot be <code>const</code>. 使用 <a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/readonly" target="_blank" rel="noopener">readonly</a> 修饰符创建在运行时一次性（例如在构造函数中）初始化的类、结构或数组，此后不能更改。Use the <a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/readonly" target="_blank" rel="noopener">readonly</a> modifier to create a class, struct, or array that is initialized one time at runtime (for example in a constructor) and thereafter cannot be changed.</p><p>C# 不支持 <code>const</code> 方法、属性或事件。C# does not support <code>const</code> methods, properties, or events.</p><p>枚举类型使你能够为整数内置类型定义命名常量（例如 <code>int</code>、<code>uint</code>、<code>long</code> 等）。The enum type enables you to define named constants for integral built-in types (for example <code>int</code>, <code>uint</code>, <code>long</code>, and so on). 有关详细信息，请参阅<a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/enum" target="_blank" rel="noopener">枚举</a>。For more information, see <a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/enum" target="_blank" rel="noopener">enum</a>.</p><p><strong>常量在声明时必须初始化</strong>。Constants must be initialized as they are declared. 例如: For example:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Calendar1</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">const</span> <span class="keyword">int</span> months = <span class="number">12</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以同时声明多个同一类型的常量，例如：Multiple constants of the same type can be declared at the same time, for example:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Calendar2</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> months = <span class="number">12</span>, weeks = <span class="number">52</span>, days = <span class="number">365</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>常量字段自动成为静态字段，将常量字段显式声明为static会造成编译错误。</p><h2 id="readonly"><a href="#readonly" class="headerlink" title="readonly"></a>readonly</h2><p><code>readonly</code> 关键字是一个可在字段上使用的修饰符。The <code>readonly</code> keyword is a modifier that you can use on fields. 当字段声明包括 <code>readonly</code> 修饰符时，该声明引入的字段赋值只能作为声明的一部分出现，或者出现在同一类的构造函数中。When a field declaration includes a <code>readonly</code> modifier, assignments to the fields introduced by the declaration can only occur as part of the declaration or in a constructor in the same class.</p><p>在此示例中，即使在类构造函数中给字段 <code>year</code> 赋了值，它的值仍无法在 <code>ChangeYear</code> 方法中更改：In this example, the value of the field <code>year</code> cannot be changed in the method <code>ChangeYear</code>, even though it is assigned a value in the class constructor:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Age</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">readonly</span> <span class="keyword">int</span> _year;</span><br><span class="line">    Age(<span class="keyword">int</span> year)</span><br><span class="line">    &#123;</span><br><span class="line">        _year = year;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">ChangeYear</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//_year = 1967; // Compile error if uncommented.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>readonly</code> 关键字不同于 <a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/const" target="_blank" rel="noopener">const</a> 关键字。<code>const</code> 字段只能在该字段的声明中初始化。</p><p><code>readonly</code> 字段可以在声明或构造函数中初始化。因此，根据所使用的构造函数，<code>readonly</code> 字段可能具有不同的值。另外，虽然 <code>const</code> 字段是编译时常量，但 <code>readonly</code> 字段可用于运行时常量，如下面的示例所示：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="keyword">uint</span> timeStamp = (<span class="keyword">uint</span>)DateTime.Now.Ticks;</span><br></pre></td></tr></table></figure><blockquote><p>示例</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ReadOnlyTest</span> &#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">SampleClass</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> x;</span><br><span class="line">        <span class="comment">// Initialize a readonly field</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">readonly</span> <span class="keyword">int</span> y = <span class="number">25</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">readonly</span> <span class="keyword">int</span> z;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">SampleClass</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">// Initialize a readonly instance field</span></span><br><span class="line">            z = <span class="number">24</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">SampleClass</span> (<span class="params"><span class="keyword">int</span> p1, <span class="keyword">int</span> p2, <span class="keyword">int</span> p3</span>) </span>&#123;</span><br><span class="line">            x = p1;</span><br><span class="line">            y = p2;</span><br><span class="line">            z = p3;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        SampleClass p1 = <span class="keyword">new</span> SampleClass (<span class="number">11</span>, <span class="number">21</span>, <span class="number">32</span>); <span class="comment">// OK</span></span><br><span class="line">        Console.WriteLine (<span class="string">"p1: x=&#123;0&#125;, y=&#123;1&#125;, z=&#123;2&#125;"</span>, p1.x, p1.y, p1.z);</span><br><span class="line">        SampleClass p2 = <span class="keyword">new</span> SampleClass ();</span><br><span class="line">        p2.x = <span class="number">55</span>; <span class="comment">// OK</span></span><br><span class="line">        Console.WriteLine (<span class="string">"p2: x=&#123;0&#125;, y=&#123;1&#125;, z=&#123;2&#125;"</span>, p2.x, p2.y, p2.z);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> Output:</span></span><br><span class="line"><span class="comment">    p1: x=11, y=21, z=32</span></span><br><span class="line"><span class="comment">    p2: x=55, y=25, z=24</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>在前面的示例中，如果使用如下的语句：</p><p><code>p2.y = 66;        // Error</code></p><p>将收到编译器错误消息：you will get the compiler error message:</p><p><code>The left-hand side of an assignment must be an l-value</code></p><p>这与尝试给常数赋值时收到的错误相同。</p><blockquote><p>声明不包含字面值的类型的readonly字段</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">CommonGuid</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> Guid ComIUnknownGuid =</span><br><span class="line">        <span class="keyword">new</span> Guid (<span class="string">"00000000-0000-0000-C000-000000000046"</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> Guid ComIClassFactoryGuid =</span><br><span class="line">        <span class="keyword">new</span> Guid (<span class="string">"00000001-0000-0000-C000-000000000046"</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> Guid ComIDispatchGuid =</span><br><span class="line">        <span class="keyword">new</span> Guid (<span class="string">"00020400-0000-0000-C000-000000000046"</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> Guid ComITypeInfoGuid =</span><br><span class="line">        <span class="keyword">new</span> Guid (<span class="string">"00020401-0000-0000-C000-000000000046"</span>);</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="嵌套类"><a href="#嵌套类" class="headerlink" title="嵌套类"></a>嵌套类</h1><p>在<a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/class" target="_blank" rel="noopener">类</a>或<a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/struct" target="_blank" rel="noopener">构造</a>中定义的类型称为嵌套类型。A type defined within a <a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/class" target="_blank" rel="noopener">class</a> or <a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/struct" target="_blank" rel="noopener">struct</a> is called a nested type. 例如:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Container</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Nested</span></span><br><span class="line">    &#123;</span><br><span class="line">        Nested() &#123; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不论外部类型是类还是构造，嵌套类型均<code>默认</code>为 <a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/private" target="_blank" rel="noopener">private</a>；仅可从其包含类型中进行访问。Regardless of whether the outer type is a class or a struct, nested types default to <a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/private" target="_blank" rel="noopener">private</a>; they are accessible only from their containing type. 在上一个示例中，<code>Nested</code> 类无法访问外部类型。</p><p>还可指定<a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/access-modifiers" target="_blank" rel="noopener">访问修饰符</a>来定义嵌套类型的可访问性，如下所示：You can also specify an <a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/access-modifiers" target="_blank" rel="noopener">access modifier</a> to define the accessibility of a nested type, as follows:</p><ul><li><p>嵌套类型的<strong>类</strong>可以是<a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/public" target="_blank" rel="noopener">公共</a>，<a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/protected" target="_blank" rel="noopener">保护</a>，<a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/internal" target="_blank" rel="noopener">内部</a>，<a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/protected-internal" target="_blank" rel="noopener">受保护内部</a>，<a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/private" target="_blank" rel="noopener">私有</a>或<a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/private-protected" target="_blank" rel="noopener">私有受保护</a>。Nested types of a <strong>class</strong> can be <a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/public" target="_blank" rel="noopener">public</a>, <a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/protected" target="_blank" rel="noopener">protected</a>, <a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/internal" target="_blank" rel="noopener">internal</a>, <a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/protected-internal" target="_blank" rel="noopener">protected internal</a>, <a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/private" target="_blank" rel="noopener">private</a> or <a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/private-protected" target="_blank" rel="noopener">private protected</a>.</p><p>  但是，定义<code>protected</code>，<code>protected internal</code>或<code>private protected</code>嵌套类内的<a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/sealed" target="_blank" rel="noopener">密封类</a>将生成编译器警告<a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/misc/cs0628" target="_blank" rel="noopener">CS0628</a>，”新的保护的成员声明为密封类中。”However, defining a <code>protected</code>, <code>protected internal</code> or <code>private protected</code> nested class inside a <a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/sealed" target="_blank" rel="noopener">sealed class</a> generates compiler warning <a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/misc/cs0628" target="_blank" rel="noopener">CS0628</a>, “new protected member declared in sealed class.”</p></li><li><p>构造的嵌套类型可以是 <a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/public" target="_blank" rel="noopener">public</a>、<a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/internal" target="_blank" rel="noopener">internal</a> 或 <a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/private" target="_blank" rel="noopener">private</a>。Nested types of a <strong>struct</strong> can be <a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/public" target="_blank" rel="noopener">public</a>, <a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/internal" target="_blank" rel="noopener">internal</a>, or <a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/private" target="_blank" rel="noopener">private</a>.</p></li></ul><p>以下示例使 <code>Nested</code> 类为 public：The following example makes the <code>Nested</code> class public:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Container</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Nested</span></span><br><span class="line">    &#123;</span><br><span class="line">        Nested() &#123; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="分部类和方法-Partial-Classes-and-Methods"><a href="#分部类和方法-Partial-Classes-and-Methods" class="headerlink" title="分部类和方法 Partial Classes and Methods"></a>分部类和方法 Partial Classes and Methods</h1><p>可以将<a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/class" target="_blank" rel="noopener">类</a>或<a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/struct" target="_blank" rel="noopener">结构</a>、<a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/interface" target="_blank" rel="noopener">接口</a>或方法的定义拆分到两个或更多个源文件中。It is possible to split the definition of a <a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/class" target="_blank" rel="noopener">class</a> or a <a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/struct" target="_blank" rel="noopener">struct</a>, an <a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/interface" target="_blank" rel="noopener">interface</a> or a method over two or more source files. 每个源文件包含类型或方法定义的一部分，编译应用程序时将把所有部分组合起来。Each source file contains a section of the type or method definition, and all parts are combined when the application is compiled.</p><h2 id="分部类-Partial-Classes"><a href="#分部类-Partial-Classes" class="headerlink" title="分部类 Partial Classes"></a>分部类 Partial Classes</h2><p>在以下几种情况下需要拆分类定义：There are several situations when splitting a class definition is desirable:</p><ul><li><p>处理大型项目时，使一个类分布于多个独立文件中可以让多位程序员同时对该类进行处理。When working on large projects, spreading a class over separate files enables multiple programmers to work on it at the same time.</p></li><li><p>使用自动生成的源时，无需重新创建源文件便可将代码添加到类中。When working with automatically generated source, code can be added to the class without having to recreate the source file. Visual Studio 在创建 Windows 窗体、Web 服务包装器代码等时都使用此方法。Visual Studio uses this approach when it creates Windows Forms, Web service wrapper code, and so on. 无需修改 Visual Studio 创建的文件，就可创建使用这些类的代码。You can create code that uses these classes without having to modify the file created by Visual Studio.</p></li><li><p>若要拆分类定义，请使用 <a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/partial-type" target="_blank" rel="noopener">partial</a> 关键字修饰符，如下所示：To split a class definition, use the <a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/partial-type" target="_blank" rel="noopener">partial</a> keyword modifier, as shown here:</p></li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// File:Program1.cs</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">Employee</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DoWork</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// File:Program2.cs</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">Employee</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">GoToLunch</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>partial</code> 关键字指示可在命名空间中定义该类、结构或接口的其他部分。The <code>partial</code> keyword indicates that other parts of the class, struct, or interface can be defined in the namespace. 所有部分都必须使用 <code>partial</code> 关键字。All the parts must use the <code>partial</code> keyword. 在编译时，各个部分都必须可用来形成最终的类型。All the parts must be available at compile time to form the final type. 各个部分必须具有相同的可访问性，如 <code>public</code>、<code>private</code> 等。</p><blockquote><p>嵌套类型是可以分部的：</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// File: Program.cs</span></span><br><span class="line"><span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        CommandLine commandLine = <span class="keyword">new</span> CommandLine(args);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span>(commandLine.Action)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// File: Program+CommandLine.cs</span></span><br><span class="line"><span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Define a nested class for processing the command line.</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title">CommandLine</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">CommandLine</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="comment">//not implemented</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> Action</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span> &#123; <span class="keyword">throw</span> <span class="keyword">new</span> NotImplementedException(); &#125;</span><br><span class="line">            <span class="keyword">set</span> &#123; <span class="keyword">throw</span> <span class="keyword">new</span> NotImplementedException(); &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="分部方法-Partial-Methods"><a href="#分部方法-Partial-Methods" class="headerlink" title="分部方法 Partial Methods"></a>分部方法 Partial Methods</h2><p>C# 3.0 引入了<strong>分部方法</strong>概念，对 C# 2.0 的分部类进行了扩展。分部方法只存在于分部类中。</p><p>分部类或结构可以包含分部方法。A partial class or struct may contain a partial method. 类的一个部分包含方法的签名。One part of the class contains the signature of the method. 可以在同一部分或另一个部分中定义可选实现。An optional implementation may be defined in the same part or another part. 如果未提供该实现，则会在编译时删除方法以及对方法的所有调用。If the implementation is not supplied, then the method and all calls to the method are removed at compile time.</p><p>分部方法使类的某个部分的实施者能够定义方法（类似于事件）。Partial methods enable the implementer of one part of a class to define a method, similar to an event. 类的另一部分的实施者可以决定是否实现该方法。The implementer of the other part of the class can decide whether to implement the method or not. 如果未实现该方法，编译器会删除方法签名以及对该方法的所有调用。If the method is not implemented, then the compiler removes the method signature and all calls to the method. 调用该方法（包括调用中的任何参数计算结果）在运行时没有任何影响。The calls to the method, including any results that would occur from evaluation of arguments in the calls, have no effect at run time. 因此，分部类中的任何代码都可以随意地使用分部方法，即使未提供实现也是如此。Therefore, any code in the partial class can freely use a partial method, even if the implementation is not supplied. 调用但不实现该方法不会导致编译时错误或运行时错误。No compile-time or run-time errors will result if the method is called but not implemented.</p><p>在自定义生成的代码时，分部方法特别有用。Partial methods are especially useful as a way to customize generated code. 这些方法允许保留方法名称和签名，因此生成的代码可以调用方法，而开发人员可以决定是否实现方法。They allow for a method name and signature to be reserved, so that generated code can call the method but the developer can decide whether to implement the method. 与分部类非常类似，分部方法使代码生成器创建的代码和开发人员创建的代码能够协同工作，而不会产生运行时开销。Much like partial classes, partial methods enable code created by a code generator and code created by a human developer to work together without run-time costs.</p><p>分部方法声明由两个部分组成：定义和实现。A partial method declaration consists of two parts: the definition, and the implementation. 它们可以位于分部类的不同部分中，也可以位于同一部分中。These may be in separate parts of a partial class, or in the same part. 如果不存在实现声明，则编译器会优化定义声明和对方法的所有调用。If there is no implementation declaration, then the compiler optimizes away both the defining declaration and all calls to the method.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Definition in file1.cs</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">partial</span> <span class="keyword">void</span> <span class="title">onNameChanged</span>(<span class="params"></span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Implementation in file2.cs</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">partial</span> <span class="keyword">void</span> <span class="title">onNameChanged</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">        <span class="comment">// method body</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li><p>分部方法声明必须以上下文关键字 <a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/partial-type" target="_blank" rel="noopener">partial</a> 开头，并且方法必须返回 <a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/void" target="_blank" rel="noopener">void</a>。Partial method declarations must begin with the contextual keyword <a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/partial-type" target="_blank" rel="noopener">partial</a> and the method must return <a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/void" target="_blank" rel="noopener">void</a>.</p></li><li><p>分部方法可以有 <a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/ref" target="_blank" rel="noopener">ref</a> 参数，但不能有 <a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/out" target="_blank" rel="noopener">out</a> 参数。Partial methods can have <a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/ref" target="_blank" rel="noopener">ref</a> but not <a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/out" target="_blank" rel="noopener">out</a> parameters.</p></li><li><p>分部方法为隐式 <a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/private" target="_blank" rel="noopener">private</a> 方法，因此不能为 <a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/virtual" target="_blank" rel="noopener">virtual</a> 方法。Partial methods are implicitly <a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/private" target="_blank" rel="noopener">private</a>, and therefore they cannot be <a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/virtual" target="_blank" rel="noopener">virtual</a>.</p></li><li><p>分部方法不能为 <a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/extern" target="_blank" rel="noopener">extern</a> 方法，因为主体的存在确定了方法是在定义还是在实现。Partial methods cannot be <a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/extern" target="_blank" rel="noopener">extern</a>, because the presence of the body determines whether they are defining or implementing.</p></li><li><p>分部方法可以有 <a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/static" target="_blank" rel="noopener">static</a> 和 <a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/unsafe" target="_blank" rel="noopener">unsafe</a> 修饰符。Partial methods can have <a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/static" target="_blank" rel="noopener">static</a> and <a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/unsafe" target="_blank" rel="noopener">unsafe</a> modifiers.</p></li><li><p>分部方法可以是泛型的。Partial methods can be generic. 约束将放在定义分部方法声明上，但也可以选择重复放在实现声明上。Constraints are put on the defining partial method declaration, and may optionally be repeated on the implementing one. 参数和类型参数名称在实现声明和定义声明中不必相同。Parameter and type parameter names do not have to be the same in the implementing declaration as in the defining one.</p></li><li><p>你可以为已定义并实现的分部方法生成<a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/delegate" target="_blank" rel="noopener">委托</a>，但不能为已经定义但未实现的分部方法生成委托。</p></li></ul><h1 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h1><iframe src="https://slowread.cn/EssentialCSharp5-Index.html" width="100%" height="300" frameborder="0" allowfullscreen></iframe>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;类的定义和实例化&quot;&gt;&lt;a href=&quot;#类的定义和实例化&quot; class=&quot;headerlink&quot; title=&quot;类的定义和实例化&quot;&gt;&lt;/a&gt;类的定义和实例化&lt;/h1&gt;&lt;p&gt;类和对象都能关联数据，将类想象成模具，将对象想象成根据模具浇筑出来的零件，可以更好理解这一点。&lt;/p&gt;
&lt;p&gt;使用类，可以通过组合其他类型的变量、方法和事件创建自己的自定义类型。A &lt;em&gt;class&lt;/em&gt; is a construct that enables you to create your own custom types by grouping together variables of other types, methods and events. 类好比是蓝图。A class is like a blueprint. 它定义类型的数据和行为。It defines the data and behavior of a type. 如果类未声明为静态，客户端代码就可以通过创建分配给变量的_对象_或_实例_来使用该类。If the class is not declared as static, client code can use it by creating &lt;em&gt;objects&lt;/em&gt; or &lt;em&gt;instances&lt;/em&gt; which are assigned to a variable. 变量会一直保留在内存中，直至对变量的所有引用超出范围为止。The variable remains in memory until all references to it go out of scope. 超出范围时，CLR 将对其进行标记，以便用于垃圾回收。At that time, the CLR marks it as eligible for garbage collection. 如果类声明为&lt;a href=&quot;https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/static&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;静态&lt;/a&gt;，则内存中只有一个副本，且客户端代码只能通过类本身，而不是&lt;em&gt;实例变量&lt;/em&gt;来访问它。If the class is declared as &lt;a href=&quot;https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/static&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;static&lt;/a&gt;, then only one copy exists in memory and client code can only access it through the class itself, not an &lt;em&gt;instance variable&lt;/em&gt;. 有关详细信息，请参阅&lt;a href=&quot;https://docs.microsoft.com/zh-cn/dotnet/csharp/programming-guide/classes-and-structs/static-classes-and-static-class-members&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;静态类和静态类成员&lt;/a&gt;。For more information, see &lt;a href=&quot;https://docs.microsoft.com/zh-cn/dotnet/csharp/programming-guide/classes-and-structs/static-classes-and-static-class-members&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Static Classes and Static Class Members&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;与结构不同，类支持_继承_，这是面向对象的编程的一个基本特点。Unlike structs, classes support &lt;em&gt;inheritance&lt;/em&gt;, a fundamental characteristic of object-oriented programming. 有关详细信息，请参阅&lt;a href=&quot;https://docs.microsoft.com/zh-cn/dotnet/csharp/programming-guide/classes-and-structs/inheritance&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;继承&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="C#" scheme="https://at2008.github.io/tags/C/"/>
    
      <category term="C#本质论" scheme="https://at2008.github.io/tags/C-%E6%9C%AC%E8%B4%A8%E8%AE%BA/"/>
    
      <category term="Essential C#" scheme="https://at2008.github.io/tags/Essential-C/"/>
    
  </entry>
  
  <entry>
    <title>Windows 系统常用工具软件</title>
    <link href="https://at2008.github.io/2017/12/19/Windows-%E7%B3%BB%E7%BB%9F%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E8%BD%AF%E4%BB%B6/"/>
    <id>https://at2008.github.io/2017/12/19/Windows-系统常用工具软件/</id>
    <published>2017-12-19T06:04:17.000Z</published>
    <updated>2018-08-03T15:46:18.238Z</updated>
    
    <content type="html"><![CDATA[<h2 id="截图"><a href="#截图" class="headerlink" title="截图"></a>截图</h2><ul><li><a href="https://zh.snipaste.com/index.html" target="_blank" rel="noopener">Snipaste</a>  大概是最犀利的截图工具了，稍微有点专业，适合重度截图使用者。</li></ul><p><img src="https://slowread.cn/images/material/Snipaste.png" alt="image"></p><ul><li><p><a href="https://pan.baidu.com/s/1eRQii8E" target="_blank" rel="noopener">FastStone Capture</a> 一款出色的屏幕捕捉（截图）软件，它集图像捕捉、浏览、编辑、视频录制等功能于一身，功能完善、使用方便，值得推荐！软件提供多种捕捉方式（如：活动窗口、窗口/对象、矩形区域、手绘区域、整个屏幕、滚动窗口等），还具备屏幕录像机、放大镜、颜色拾取、屏幕标尺等附加功能，支持快捷键操作。 网盘密码：<code>7n6e</code></p></li><li><p><a href="http://www.picpick.org/" target="_blank" rel="noopener">PicPick</a>   一款很不错的截图工具，小巧/实用/干净/免费/无广告，适合大多数用户使用。</p></li></ul><a id="more"></a><h2 id="OCR-文字识别"><a href="#OCR-文字识别" class="headerlink" title="OCR 文字识别"></a>OCR 文字识别</h2><ul><li><a href="https://pan.baidu.com/s/1P2xb9kBwX1gj8j2_APivZw" target="_blank" rel="noopener">天若ocr文字识别工具</a> 天若OCR识别工具，调用了各大网站的ocr接口，免费不限次数。具体介绍演示 <a href="https://www.52pojie.cn/thread-692917-1-1.html" target="_blank" rel="noopener">移步这里</a>。</li></ul><h2 id="录屏"><a href="#录屏" class="headerlink" title="录屏"></a>录屏</h2><ul><li><p><a href="https://pan.baidu.com/s/1qXTlkDm" target="_blank" rel="noopener">ScreenToGif</a>   录屏为Gif文件，小巧易用，功能强大。 网盘密码：<code>wlww</code></p></li><li><p><a href="https://pan.baidu.com/s/1boQnZUB/" target="_blank" rel="noopener">oCam</a>  录屏为视频文件，同类软件中体积算是最小的了，功能足够。网盘密码：<code>v7bk</code></p></li></ul><h2 id="图片-浏览查看"><a href="#图片-浏览查看" class="headerlink" title="图片 浏览查看"></a>图片 浏览查看</h2><ul><li><p><a href="https://www.xnview.com/" target="_blank" rel="noopener">XnView</a>    免费/干净。</p></li><li><p><a href="http://www.skycn.com/soft/appid/6433.html/" target="_blank" rel="noopener">iSee图片专家</a>  图片浏览和编辑特效功能。</p></li></ul><h2 id="照片-排版打印"><a href="#照片-排版打印" class="headerlink" title="照片 排版打印"></a>照片 排版打印</h2><ul><li><a href="http://www.neoimaging.cn/" target="_blank" rel="noopener">光影魔术手</a>    照片排版打印，免费/无广告。</li></ul><h2 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h2><ul><li><p><a href="http://browser.qq.com/" target="_blank" rel="noopener">QQ 浏览器</a>  与Chrome浏览器一样，基于Chromium，所以chrome浏览器的插件都可以用，在应用中心也可以搜索到插件，具备chrome浏览器没有的侧边栏。</p></li><li><p><a href="http://www.google.cn/chrome/browser/desktop/index.html/" target="_blank" rel="noopener">Chrome 浏览器</a>  多数浏览器的标准参照。</p></li></ul><h2 id="健康"><a href="#健康" class="headerlink" title="健康"></a>健康</h2><ul><li><a href="https://justgetflux.com/" target="_blank" rel="noopener">f.Lux</a> 能随着一天的时间变化自动调整你电脑显示器屏幕的色温，过滤对人眼伤害最大的蓝光，从而尽可能减少屏幕对眼睛所带来的疲劳感并帮助提高夜猫子们的睡眠质量。</li></ul><p><img src="https://slowread.cn/images/material/f.lux-config.png" alt="f.lux 配置界面"></p><h2 id="视频音频播放器"><a href="#视频音频播放器" class="headerlink" title="视频音频播放器"></a>视频音频播放器</h2><ul><li><a href="http://potplayer.daum.net/" target="_blank" rel="noopener">PotPlayer</a> 干净/简洁/流畅/易操作。</li></ul><h2 id="音乐播放器"><a href="#音乐播放器" class="headerlink" title="音乐播放器"></a>音乐播放器</h2><ul><li><p><a href="https://pan.baidu.com/s/1mhPqUxU" target="_blank" rel="noopener">foolbar 2000</a>  foobar2000，是一款免费软件，是Windows平台下的高级音频播放器。包含了一些重放增益支持、低内存占用等基本特色以及内置支持一些流行的音频格式。除了播放之外，它还支持生成媒体库、转换媒体文件编码、提取CD等功能，网盘内为汉化版。 网盘密码：<code>hkzp</code></p></li><li><p><a href="http://music.163.com/" target="_blank" rel="noopener">网易云音乐</a>    Windows/Mac/iPhone/iPad/安卓/Linux 全平台支持，CD音质。</p></li></ul><h2 id="视频音频格式转换"><a href="#视频音频格式转换" class="headerlink" title="视频音频格式转换"></a>视频音频格式转换</h2><ul><li><a href="http://www.pcfreetime.com/" target="_blank" rel="noopener">格式工厂</a>    免费多功能的多媒体文件转换工具。支持各种类型视频、音频、图片等多种格式，轻松转换到你想要的格式。</li></ul><h2 id="系统管理"><a href="#系统管理" class="headerlink" title="系统管理"></a>系统管理</h2><ul><li><a href="https://pan.baidu.com/s/1jHNYDF4" target="_blank" rel="noopener">Revo Uninstaller</a>  可帮助您卸载软件，并删除您的计算机上安装的有害程序！即使是控制面板的“Windows 程序和功能“（添加或删除程序）里无法卸载的，它是一个更快、更强大的替代小程序！可以监控并记录程序安装过程中发生的所有系统修改项，以便日后完全卸载。如果有感觉不放心的软件，可以在<code>Revo Uninstaller</code>监控模式下操作该软件，查看软件对系统进行的修改项，验证是否安全。 网盘密码：<code>nle1</code></li></ul><h2 id="系统安全-杀毒防护"><a href="#系统安全-杀毒防护" class="headerlink" title="系统安全 杀毒防护"></a>系统安全 杀毒防护</h2><ul><li><p><code>Windows Defender</code>  内置在 <code>Windows Vista</code> 以及以后的版本中，不用安装各种<code>卫士</code>了。</p></li><li><p><a href="http://www.huorong.cn/" target="_blank" rel="noopener">火绒安全软件</a>  干净/靠谱/轻巧的安全软件，还具备清理和拦截弹窗等功能。</p></li></ul><h2 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h2><ul><li><a href="http://note.youdao.com/" target="_blank" rel="noopener">有道云笔记</a>    提供了PC端、移动端、网页端等多端应用，用户可以随时随地对线上资料进行编辑、分享以及协同。</li></ul><h2 id="文本-代码-编辑器"><a href="#文本-代码-编辑器" class="headerlink" title="文本/代码 编辑器"></a>文本/代码 编辑器</h2><ul><li><p><a href="https://pan.baidu.com/s/1l03mk-T8NADQn83KN11nWw" target="_blank" rel="noopener">Notepad2-mod</a>  一个用来取代Notepad的开源、免费、绿色软件，只有一个主程序，不到2M大小。具有显示行号、内建各种程序语法的高亮度显示、改变背景颜色、支持Unicode与UTF-8的功能。</p></li><li><p><a href="http://www.sublimetextcn.com/" target="_blank" rel="noopener">Sublime Text</a>  一款流行的代码编辑器软件，支持多种编程语言和文件格式，可运行在Linux，Windows和Mac OS X。也是许多程序员喜欢使用的一款文本编辑器软件。</p></li><li><p><a href="https://zh-cn.emeditor.com/" target="_blank" rel="noopener">EmEditor</a>   快速，轻巧，可扩展，使用方便的 Windows 文本编辑器，支持多种编程语言和文件格式。</p></li><li><p><a href="https://pan.baidu.com/s/1i4OaBfZ" target="_blank" rel="noopener">Notepad++</a>  小巧高效、免费全能的文本编辑器,支持众多程序语言，比如C++、C#、Java等主流程序语言；支持HTML、XML、ASP，Perl、Python、JavaScript等网页/脚本语言。Notepad++作为程序员们最喜爱的编辑器之一，像语法高亮，语法折叠，宏等编辑器常用功能一个都不少，集成多种常用插件（适合开发者使用）。 网盘密码：<code>6ebx</code></p></li></ul><h2 id="Markdown文件编辑"><a href="#Markdown文件编辑" class="headerlink" title="Markdown文件编辑"></a>Markdown文件编辑</h2><ul><li><p><a href="https://code.visualstudio.com/" target="_blank" rel="noopener">Visual Studio Code</a>  <code>Sublime</code> 也是一款很好的 <code>Markdown</code> 编辑工具，并且相对轻量，但是 <code>VSCode</code> 添加了 <code>Markdown All in One</code> 和 <code>markdownlint</code> 等插件后，功能上相比 <code>Sublime</code> 更为强大，可以在编辑器内实时预览，同样可以保存为 <code>HTML</code> 格式。<code>VSCode</code> 相关插件参见<a href="https://slowread.cn/2017/12/14/Visual-Studio-Code-%E5%B8%B8%E7%94%A8%E6%8F%92%E4%BB%B6/" target="_blank" rel="noopener">Visual Studio Code VSCode 常用 插件 扩展</a>。VSCode 是全功能的编辑/编码/调试工具，开源/免费/插件丰富/功能强大。</p></li><li><p><a href="https://marketplace.visualstudio.com/items?itemName=shd101wyy.markdown-preview-enhanced" target="_blank" rel="noopener">Markdown Preview Enhanced</a> 是 VSCode Markdown 增强插件，功能比 VSCode 内置 Markdown 功能强大很多，具体功能参见<a href="https://shd101wyy.github.io/markdown-preview-enhanced/#/zh-cn/" target="_blank" rel="noopener">Markdown Preview Enhanced 官网介绍</a>。</p></li><li><p>Markdown 相关浏览器插件 （Chrome/QQ浏览器）</p><ul><li>Markdown Cheatsheet Markdown 语法备忘表</li><li>Convert Medium Posts to Markdown    将网页文章转换为 Markdown</li><li>拷贝为 Markdown    将你在页面中选中的HTML格式转化为Markdown格式。</li><li>Copy as Markdown Quotation  拷贝Web页面为Markdown引用格式，与上面插件区别为多了引用标记。</li></ul></li></ul><h2 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h2><ul><li><a href="https://yun.baidu.com/s/1cp9zuY" target="_blank" rel="noopener">Total Commander</a> 著名的文件管理软件，其功能类似于资源管理器。它具有两个并排的文件窗口，方便用户对文件及文件夹进行复制、移动、删除等操作和管理。</li></ul><p><img src="http://8.pic.pc6.com/thumb/up/2016-10/20161011912359860869188538250_600_0.png" alt="alt"></p><ul><li><p><a href="http://www.softwareok.com/?seite=Freeware/Q-Dir/language/Simplified-Chinese/" target="_blank" rel="noopener">Q-Dir</a> 一款非常独特的资源管理器，<code>Q-Dir</code> 特别适用于频繁在各个目录间跳跃复制、粘贴和移动的情况。功能类似于 <code>Total Commander</code>，相比较更小巧/简单易用。</p></li><li><p><a href="https://pan.baidu.com/s/1c1Yt0HE/" target="_blank" rel="noopener">TreeSize</a> 一个磁盘空间管理器，用树形、饼图等图形描述出来，能够显示文件大小和实际占用空间数及浪费的空间等信息，比较磁盘空间变化情况，让你做出相应的删除决定。 网盘密码：<code>bbx2</code></p></li></ul><p><img src="https://slowread.cn/images/material/TreeSizePro.png" alt="image"></p><ul><li><a href="https://pan.baidu.com/s/1cbfyVG/" target="_blank" rel="noopener">FileTypesMan</a> 一个用来查看系统中已注册文件类型的小工具。可以给没有图标的文件指定图标或者修改图标，比如 <code>Markdown</code> 文件。 网盘密码：<code>fqzc</code></li></ul><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><ul><li><p><a href="https://github.com/proxyee-down-org/proxyee-down/" target="_blank" rel="noopener">proxyee-down</a> <code>百度网盘</code>文件下载利器,不限速，开源免费。同时支持http方式下载文件，使用本地http代理服务器方式嗅探下载请求，支持所有操作系统和大部分主流浏览器,支持分段下载和断点下载。</p></li><li><p><a href="https://pan.baidu.com/s/1dE9URMp/" target="_blank" rel="noopener">迅雷5</a> 迅雷7/9版本似乎主要是限速和广告，之前的迅雷才是真正的下载工具。 网盘密码：<code>s8lq</code></p></li><li><p><a href="https://www.qbittorrent.org/" target="_blank" rel="noopener">qBittorrent</a> 一个新的轻量级BitTorrent客户端，它简单易用，功能强大，被视为一个良好的替代其他BitTorrent软件的客户端。软件界面自动支持中文。</p></li></ul><h2 id="PDF-阅读-编辑"><a href="#PDF-阅读-编辑" class="headerlink" title="PDF 阅读/编辑"></a>PDF 阅读/编辑</h2><ul><li><p><a href="https://pan.baidu.com/s/1qYsTIwO/" target="_blank" rel="noopener">Foxit Reader</a> 福昕阅读器，这里提供的是早期版本，体积小巧（<code>5M</code>），启动迅速，单文件免安装，干净/无广告，对PDF文件需要的功能，都具备了。 网盘密码：<code>v9c8</code></p></li><li><p><a href="https://pan.baidu.com/s/1wBMS7HGhcYNjSnGFqDoIbQ/" target="_blank" rel="noopener">PDF-XChange Editor Plus</a> PDF-XChange Editor Plus是著名的PDF阅读工具PDF-XChange的编辑器增强版本。专注于PDF电子文档的编辑功能，体积小巧，速度飞快，提供<code>中文版</code>，界面友好，具备丰富的配置和功能选项，而且非常简单易用! 可帮助你快速的制作和编写PDF电子文档!PDF-XChange Editor编辑器就能修改PDF文档中的任意内容了，比如删除文字/图片/<code>文档页面</code>，添加文字或者图片等，当然也可以添加图表了。 网盘密码：<code>guxr</code></p></li><li><p><a href="http://www.sumatrapdfreader.org/free-pdf-reader.html" target="_blank" rel="noopener">SumatraPDF</a>    一款开源的<code>pdf</code>阅读器。它的功能极度精简，速度很快，支持 <code>PDF, ePub, MOBI, CHM, XPS, DjVu, CBZ, CBR</code> 多种格式，支持中文界面。</p></li><li><p><a href="https://pan.baidu.com/s/1i5Moi3N/" target="_blank" rel="noopener">PdgCntEditor</a> 一个图形化文件目录编辑器，支持PDF 、DjVu 和PDG三种格式，可以快速编辑 PDF 文件标签、目录并保存文件。 网盘密码：<code>wji8</code></p></li></ul><p><img src="https://slowread.cn/images/material/PdgCntEditor.png" alt="image"></p><h2 id="电子邮件-eMail-客户端"><a href="#电子邮件-eMail-客户端" class="headerlink" title="电子邮件 eMail 客户端"></a>电子邮件 eMail 客户端</h2><ul><li><p><a href="http://www.yomail.com/" target="_blank" rel="noopener">YoMail</a>    优秀的邮件客户端，还支持 <code>Gmail</code>，具备协作沟通功能。</p></li><li><p><a href="http://mail.163.com/dashi/" target="_blank" rel="noopener">网易邮箱大师</a>  同样是不错的邮件客户端，同样支持 <code>Gmail</code>。</p></li></ul><h2 id="压缩软件"><a href="#压缩软件" class="headerlink" title="压缩软件"></a>压缩软件</h2><ul><li><p><a href="http://www.bandisoft.com/bandizip/" target="_blank" rel="noopener">BandZip</a> Bandizip 是一款来自韩国的免费优秀的文件压缩/解压缩软件，支持 Win 与 Mac，操作方式与 WinRAR 相似，支持压缩和解压 rar、zip、7z 等众多主流格式。<code>提供中文版</code>，免费、纯净、无广告！Bandizip 同样支持文件右键菜单快速压缩/解压缩文件和文件夹，甚至还可以在右键菜单上快速预览压缩包里的文件列表。</p></li><li><p><a href="http://www.7-zip.org/" target="_blank" rel="noopener">7-Zip</a> 一款完全免费而且开源的压缩软件，相比其他软件有更高的压缩比但同时耗费的资源也相对更多，如果你需要一款能够提供强大压缩性能的软件，那么它是你最好的选择。</p></li></ul><h2 id="输入法"><a href="#输入法" class="headerlink" title="输入法"></a>输入法</h2><ul><li><p><a href="http://qq.pinyin.cn/" target="_blank" rel="noopener">QQ输入法</a>  简洁、干净、字库云同步，多平台支持。</p></li><li><p>微软拼音  <code>Windows 10</code> 自带的拼音输入法挺好，干净，也可以云存储个人输入习惯和词库。</p></li></ul><h2 id="网络优化"><a href="#网络优化" class="headerlink" title="网络优化"></a>网络优化</h2><ul><li><p><a href="https://www.grc.com/dns/benchmark.htm" target="_blank" rel="noopener">DNS Benchmark</a>    一个测试DNS速度的工具，可以测试出最适合你的DNS，免费。中文使用说明参见<a href="http://www.apprcn.com/dns-benchmark.html" target="_blank" rel="noopener">这里</a>。</p></li><li><p><a href="https://pan.baidu.com/s/1i5mwyIL/" target="_blank" rel="noopener">DNS Jumper</a>    用于一键切换DNS的免费应用程序，里面已经包含18组DNS ，当然也包含了Google DNS，或者可以自定义添加。 网盘密码：<code>cfiq</code></p></li></ul><h2 id="Shell"><a href="#Shell" class="headerlink" title="Shell"></a>Shell</h2><ul><li><p><a href="http://cmder.net//" target="_blank" rel="noopener">Cmder</a> 是一个增强型命令行工具，不仅可以使用windows下的所有命令，也可以使用linux的命令,shell命令。还附带了漂亮的monokai等多个配色主题。</p></li><li><p><a href="https://mobaxterm.mobatek.net/" target="_blank" rel="noopener">MobaXterm</a> 开源/免费/干净/功能强大的全能终端软件。</p></li></ul><p><img src="https://slowread.cn/images/material/MobaXterm.png" alt="image"></p><h2 id="Windows-系统重装"><a href="#Windows-系统重装" class="headerlink" title="Windows 系统重装"></a>Windows 系统重装</h2><ul><li><a href="http://www.wepe.com.cn/download.html" target="_blank" rel="noopener">微PE工具箱</a>  PE工具全功能集合，最干净的PE工具，用于制作系统启动 U 盘和系统启动维护。</li></ul><p><img src="https://slowread.cn/images/material/WeiPE.png" alt="image"></p><h2 id="欢迎推荐-持续更新"><a href="#欢迎推荐-持续更新" class="headerlink" title="欢迎推荐 持续更新"></a>欢迎推荐 持续更新</h2>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;截图&quot;&gt;&lt;a href=&quot;#截图&quot; class=&quot;headerlink&quot; title=&quot;截图&quot;&gt;&lt;/a&gt;截图&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://zh.snipaste.com/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Snipaste&lt;/a&gt;  大概是最犀利的截图工具了，稍微有点专业，适合重度截图使用者。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://slowread.cn/images/material/Snipaste.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://pan.baidu.com/s/1eRQii8E&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;FastStone Capture&lt;/a&gt; 一款出色的屏幕捕捉（截图）软件，它集图像捕捉、浏览、编辑、视频录制等功能于一身，功能完善、使用方便，值得推荐！软件提供多种捕捉方式（如：活动窗口、窗口/对象、矩形区域、手绘区域、整个屏幕、滚动窗口等），还具备屏幕录像机、放大镜、颜色拾取、屏幕标尺等附加功能，支持快捷键操作。 网盘密码：&lt;code&gt;7n6e&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://www.picpick.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;PicPick&lt;/a&gt;   一款很不错的截图工具，小巧/实用/干净/免费/无广告，适合大多数用户使用。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Windows" scheme="https://at2008.github.io/tags/Windows/"/>
    
      <category term="工具软件" scheme="https://at2008.github.io/tags/%E5%B7%A5%E5%85%B7%E8%BD%AF%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>C#本质论笔记 第4章 方法和参数</title>
    <link href="https://at2008.github.io/2017/12/19/CSharp%E6%9C%AC%E8%B4%A8%E8%AE%BA%E7%AC%94%E8%AE%B0-%E7%AC%AC4%E7%AB%A0-%E6%96%B9%E6%B3%95%E5%92%8C%E5%8F%82%E6%95%B0/"/>
    <id>https://at2008.github.io/2017/12/19/CSharp本质论笔记-第4章-方法和参数/</id>
    <published>2017-12-18T16:02:07.000Z</published>
    <updated>2018-08-03T13:46:03.722Z</updated>
    
    <content type="html"><![CDATA[<h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><p>方法是包含一系列语句的代码块。 程序通过调用该方法并指定任何所需的方法参数使语句得以执行。 在 C# 中，每个执行的指令均在方法的上下文中执行。 Main 方法是每个 C# 应用程序的入口点，并在启动程序时由公共语言运行时 (CLR) 调用。</p><blockquote><blockquote><p>规范</p></blockquote><p>要为方法名使用动词或动词短语。</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.Console.Write(<span class="string">"Enter Your first name: "</span>)</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>解析</p></blockquote><ul><li><code>System</code> 命名空间</li><li><code>Console</code> 类型名称</li><li><code>Write</code> 方法名称</li><li><code>&quot;Enter Your first name: &quot;</code> 实参</li></ul></blockquote><a id="more"></a><h1 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h1><p>命名空间是一种分类机制，用于组合功能相关的所有类型。System 命名空间包含了用于执行大量基本变成活动的类型。</p><blockquote><p>常见命名空间</p></blockquote><table><thead><tr><th>命名空间</th><th>描述</th></tr></thead><tbody><tr><td>System</td><td>主命名空间</td></tr><tr><td>System.Collections.Generic</td><td>泛型集合接口和类</td></tr><tr><td>System.Collections</td><td>使用Arraylist</td></tr><tr><td>System.Linq</td><td>语言集成查询</td></tr><tr><td>System.Text</td><td>编码方式</td></tr><tr><td>System.Text.RegularExpressions</td><td>正则表达式</td></tr><tr><td>System.Threading</td><td>多线程</td></tr><tr><td>System.Windows.Forms</td><td>winform窗体</td></tr><tr><td>System.Windows.Forms.Control</td><td>winform控件</td></tr><tr><td>System.IO</td><td>操作文件、文件夹</td></tr><tr><td>System.Data</td><td>操作ado.net</td></tr><tr><td>System.Data.SqlClient</td><td>操作ado.net</td></tr><tr><td>System.Net</td><td>操作网络</td></tr><tr><td>System.Net.Sockets</td><td>操作网络套接字</td></tr><tr><td>System.Management</td><td>获取硬件信息(需要添加引用)</td></tr><tr><td>System.Drawing</td><td>绘制系统</td></tr><tr><td>System.Xml</td><td>操作xml</td></tr><tr><td>System.Media</td><td>播放wav和系统wav文件</td></tr><tr><td>Microsoft.Win32</td><td>操作注册表</td></tr><tr><td>System.Runtime.InteropServices</td><td>引用dll</td></tr><tr><td>System.Security.Cryptography</td><td>加密解密</td></tr><tr><td>System.Text.RegularExpressions</td><td>正则表达式</td></tr><tr><td>Microsoft.VisualBasic</td><td>简繁体转换(需要添加引用)</td></tr><tr><td>System.Diagnostics</td><td>调试输出</td></tr><tr><td>System.Web.UI</td><td>web页面</td></tr><tr><td>System.Web.UI.Control</td><td>web控件</td></tr><tr><td>System.Configuration</td><td>配置信息</td></tr><tr><td>System.DateTime</td><td>操作时间</td></tr><tr><td>System.Math</td><td>操作数字类</td></tr><tr><td>Microsoft.Win32.Registry</td><td>操作注册表</td></tr></tbody></table><h1 id="方法的声明和调用"><a href="#方法的声明和调用" class="headerlink" title="方法的声明和调用"></a>方法的声明和调用</h1><p>在类或者结构中声明方法。</p><blockquote><p>例子</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">IntroducingMethods</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span> (<span class="params"><span class="keyword">string</span>[] args</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">string</span> firstName;</span><br><span class="line">        <span class="keyword">string</span> lastName;</span><br><span class="line">        <span class="keyword">string</span> fullName;</span><br><span class="line"></span><br><span class="line">        System.Console.WriteLine (<span class="string">"Hey you!"</span>);</span><br><span class="line"></span><br><span class="line">        firstName = GetUserInput (<span class="string">"Enter your first name: "</span>);</span><br><span class="line">        lastName = GetUserInput (<span class="string">"Enter you last name: "</span>);</span><br><span class="line"></span><br><span class="line">        fullName = GetFullName (firstName, lastName);</span><br><span class="line"></span><br><span class="line">        DisplayGreeting (fullName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">string</span> <span class="title">GetUserInput</span> (<span class="params"><span class="keyword">string</span> prompt</span>) </span>&#123;</span><br><span class="line">        System.Console.Write (prompt);</span><br><span class="line">        <span class="keyword">return</span> System.Console.ReadLine ();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">string</span> <span class="title">GetFullName</span> (<span class="params"><span class="keyword">string</span> firstName, <span class="keyword">string</span> lastName</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> firstName + <span class="string">" "</span> + lastName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">DisplayGreeting</span> (<span class="params"><span class="keyword">string</span> name</span>) </span>&#123;</span><br><span class="line">        System.Console.WriteLine (<span class="string">"Your full name is &#123;0&#125;."</span>, name);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="初学者主题：用方法进行重构"><a href="#初学者主题：用方法进行重构" class="headerlink" title="初学者主题：用方法进行重构"></a>初学者主题：用方法进行重构</h2><p>将一组相关语句转移到一个方法中，而不是把它们留在一个较大的方法中，这是重构 <code>refactoring</code> 的一种形式。</p><ul><li>重构有助于减少重复代码，因为可以从多个位置调用方法，而不必在每个位置都重复这个方法的代码。</li><li>重构还有助于增强代码的可读性。</li></ul><h2 id="方法的返回类型和返回值"><a href="#方法的返回类型和返回值" class="headerlink" title="方法的返回类型和返回值"></a>方法的返回类型和返回值</h2><p>方法可以将值返回给调用方。 如果列在方法名之前的返回类型 <code>不是 void</code>，则该方法可通过使用 <code>return</code> 关键字返回值。 带 <code>return</code> 关键字，后跟与返回类型匹配的值的语句将该值返回到方法调用方。</p><p><code>return</code> 语句并非只能在方法末尾出现，例如，<code>if</code> 或 <code>switch</code> 语句中可以包含 <code>return</code> 语句，举例如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="function"><span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">MyMethod</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">      <span class="keyword">string</span> command = ObtainCommand();</span><br><span class="line">      <span class="keyword">switch</span>(command)</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="keyword">case</span> <span class="string">"quit"</span>:</span><br><span class="line">              <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">          <span class="comment">// ... omitted, other cases</span></span><br><span class="line">          <span class="keyword">default</span>:</span><br><span class="line">              <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果 <code>return</code> 之后有“不可达”的语句，编译器会发出警告，指出有永远执行不到的语句。</p><p>指定 <code>void</code> 作为返回类型，表示没有返回值，所以，<code>return</code> <code>可有可无</code>。</p><h1 id="using-指令"><a href="#using-指令" class="headerlink" title="using 指令"></a>using 指令</h1><p>C# 允许简写类的全名，为此，要在文件的顶部列出类的命名空间（名称空间），前面加上 <code>using</code> 关键字。在文件的其他地方，就可以使用其类型名称来引用空间中的类型了。</p><blockquote><p>例子</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// The using directive imports all types from the</span></span><br><span class="line"><span class="comment">// specified namespace into the entire file.</span></span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">HelloWorld</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">      <span class="comment">// No need to qualify Console with System</span></span><br><span class="line">      <span class="comment">// because of the using directive above.</span></span><br><span class="line">      Console.WriteLine(<span class="string">"Hello, my name is Inigo Montoya"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果要引用某个命名空间的子命名空间中的类型，同样需要在文件顶部用 using 语句明确指定子命名空间引用。例如，要访问 <code>System.Text</code> 中的 <code>StringBuilder</code> 类型，必须增加一个 <code>using System.Text;</code> 指令，或者使用  <code>Syste.Text.StringBuilder</code> 对类型进行完全限定，而不能仅仅写成  <code>Text.StringBuilder</code>。</p><h2 id="使用别名"><a href="#使用别名" class="headerlink" title="使用别名"></a>使用别名</h2><p>可以利用 using 指令为命名空间或类型取一个别名。别名alias是在using指令起作用范围内可以使用的替代名称。别名的两个最常见的用途是消除两个同名类型的歧义和缩写长名称。</p><blockquote><p>例如，System.Timers 中存在 Timer 类型，System.Threading 中也存在一个 Timer 类型，当这两个命名空间同时存在并同时需要被引用时，需要用别名来加以区分：</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Threading;</span><br><span class="line"><span class="keyword">using</span> CountDownTimer = System.Timers.Timer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">HelloWorld</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">      CountDownTimer timer;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>如果别名跟要区别的类型名相同，或者说别名占用了类型名的名字，那么如果要引用另外一个类型，就必须完全限定或者定义新的不同的别名，如下例：</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Threading;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Declare alias Timer to refer to System.Timers.Timer to</span></span><br><span class="line"><span class="comment">// avoid code ambiguity with System.Threading.Timer</span></span><br><span class="line"><span class="keyword">using</span> Timer = System.Timers.Timer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">HelloWorld</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">      Timer timer;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>上例中，Timer 时别名，如果要引用 System.Threading.Timer类型，必须完全限定或者定义不同的别名。这又是要搞么？😥</p></blockquote><h2 id="高级主题：嵌套的-using-指令"><a href="#高级主题：嵌套的-using-指令" class="headerlink" title="高级主题：嵌套的 using 指令"></a>高级主题：嵌套的 using 指令</h2><p>也可以在命名空间内部使用 <code>using</code> 指令，有效范围限于命名空间内部。不过，很少这样使用。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">EssentialCSharp</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">class</span> <span class="title">HelloWorld</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// No need to qualify Console with System</span></span><br><span class="line">        <span class="comment">// because of the using directive above.</span></span><br><span class="line">        Console.WriteLine(<span class="string">"Hello, my name is Inigo Montoya"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Main-和命令行参数"><a href="#Main-和命令行参数" class="headerlink" title="Main() 和命令行参数"></a>Main() 和命令行参数</h1><p><code>Main</code> 方法是 C# 应用程序的入口点。 （库和服务不要求使用 <code>Main</code> 方法作为入口点）。<code>Main</code> 方法是应用程序启动后调用的第一个方法。</p><p>C# 程序中只能有一个入口点。 如果多个类包含 <code>Main</code> 方法，必须使用 <code>/main</code> 编译器选项来编译程序，以指定将哪个 <code>Main</code> 方法用作入口点。 有关详细信息，请参阅 <a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/compiler-options/main-compiler-option/" target="_blank" rel="noopener">/main（C# 编译器选项</a>）。</p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ul><li><code>Main</code> 方法是可执行程序的入口点，也是程序控制开始和结束的位置。</li><li><code>Main</code> 在类或结构中声明。 Main 必须是静态方法，不得为公共方法。 （在前面的示例中，它获得的是私有成员的默认访问权限）。封闭类或结构不一定要是静态的。</li><li><code>Main</code> 可以具有 void、int，或者以 C# 7.1、Task 或 Task<int> 返回类型开头。</int></li><li>当且仅当 <code>Main</code> 返回 Task 或 Task<int> 时，<code>Main</code> 的声明可包括 async 修饰符。 请注意，该操作可明确排除 <code>async void Main</code> 方法。</int></li><li>使用或不使用包含命令行自变量的 string[] 参数声明 <code>Main</code> 方法都行。 使用 Visual Studio 创建 Windows 应用程序时，可以手动添加此形参，也可以使用 Environment 类来获取命令行实参。 参数被读取为从零开始编制索引的命令行自变量。 与 C 和 C++ 不同，程序的名称不被视为第一个命令行自变量。</li></ul><h2 id="命令行参数"><a href="#命令行参数" class="headerlink" title="命令行参数"></a>命令行参数</h2><blockquote><p>可以通过以下方式之一定义方法来将自变量发送到 Main 方法：</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br></pre></td></tr></table></figure><p>程序运行时，通过 string 数组参数将命令行参数传递给 Main()。要获取参数，操作数组就可以了。</p><blockquote><p>示例</p></blockquote><table><thead><tr><th>命令行输入</th><th>传递给 Main 的字符串数组</th></tr></thead><tbody><tr><td>executable.exe a b c</td><td>“a”<br>“b”<br>“c”</td></tr><tr><td>executable.exe one two</td><td>“one”<br>“two”</td></tr><tr><td>executable.exe “one two” three</td><td>“one two”<br>“three”</td></tr></tbody></table><blockquote><p>实例说明</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">CommandLine</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span> (<span class="params"><span class="keyword">string</span>[] args</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// The Length property provides the number of array elements</span></span><br><span class="line">        System.Console.WriteLine (<span class="string">"parameter count = &#123;0&#125;"</span>, args.Length);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; args.Length; i++) &#123;</span><br><span class="line">            System.Console.WriteLine (<span class="string">"Arg[&#123;0&#125;] = [&#123;1&#125;]"</span>, i, args[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 执行 CommandLine.exe a b c 输出: </span></span><br><span class="line"><span class="comment">    parameter count = 3</span></span><br><span class="line"><span class="comment">    Arg[0] = [a]</span></span><br><span class="line"><span class="comment">    Arg[1] = [b]</span></span><br><span class="line"><span class="comment">    Arg[2] = [c]</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/* 执行 commandline.exe "a b" c 输出: </span></span><br><span class="line"><span class="comment">    parameter count = 2</span></span><br><span class="line"><span class="comment">    Arg[0] = [a b]</span></span><br><span class="line"><span class="comment">    Arg[1] = [c]</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="高级主题：多个-Main-方法"><a href="#高级主题：多个-Main-方法" class="headerlink" title="高级主题：多个 Main() 方法"></a>高级主题：多个 Main() 方法</h2><p>如果多个类包含 Main 方法，对 <code>csc.exe</code> 使用 <code>/main:class</code> 选项将指定包含程序入口点的类。</p><blockquote><blockquote><p>示例</p></blockquote><p>编译 t2.cs 和 t3.cs，指出 Main 方法可在 Test2 中找到：</p></blockquote><pre><code>csc t2.cs t3.cs /main:Test2  </code></pre><h1 id="方法的参数"><a href="#方法的参数" class="headerlink" title="方法的参数"></a>方法的参数</h1><h2 id="按引用传递和按值传递参数"><a href="#按引用传递和按值传递参数" class="headerlink" title="按引用传递和按值传递参数"></a>按引用传递和按值传递参数</h2><p>默认情况下，值类型传递给方法时，传递的是副本而不是对象本身。 因此，对参数的更改不会影响调用方法中的原始副本。 可以使用 <code>ref</code> 关键字按引用传递值类型。 有关详细信息，请参阅<a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/programming-guide/classes-and-structs/passing-value-type-parameters/" target="_blank" rel="noopener">传递值类型参数</a>。 有关内置值类型的列表，请参阅<a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/value-types-table/" target="_blank" rel="noopener">值类型表</a>。</p><p>引用类型的对象传递到方法中时，将传递对对象的引用。 也就是说，该方法接收的不是对象本身，而是指示该对象位置的参数。 如果通过使用此引用更改对象的成员，即使是按值传递该对象，此更改也会反映在调用方法的参数中。</p><blockquote><p>例子</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SampleRefType</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> <span class="keyword">value</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Test</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        SampleRefType rt = <span class="keyword">new</span> SampleRefType ();</span><br><span class="line">        rt.<span class="keyword">value</span> = <span class="number">11</span>;</span><br><span class="line">        ModifyObject (rt);</span><br><span class="line">        Console.WriteLine (rt.<span class="keyword">value</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ModifyObject</span> (<span class="params">SampleRefType obj</span>) </span>&#123;</span><br><span class="line">        obj.<span class="keyword">value</span> = <span class="number">66</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 输出</span></span><br><span class="line"><span class="comment">66</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>在 C# 中，实参可以按值或按引用传递给形参。 按引用传递使函数成员、方法、属性、索引器、运算符和构造函数可以更改参数的值，并让该更改在调用环境中保持。 若要按引用传递参数，请使用 <code>ref</code> 或 <code>out</code> 关键字。</p><blockquote><p>例子</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span> (<span class="params"><span class="keyword">string</span>[] args</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> arg;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Passing by value.</span></span><br><span class="line">        <span class="comment">// The value of arg in Main is not changed.</span></span><br><span class="line">        arg = <span class="number">4</span>;</span><br><span class="line">        squareVal (arg);</span><br><span class="line">        Console.WriteLine (arg);</span><br><span class="line">        <span class="comment">// Output: 4</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Passing by reference.</span></span><br><span class="line">        <span class="comment">// The value of arg in Main is changed.</span></span><br><span class="line">        arg = <span class="number">4</span>;</span><br><span class="line">        squareRef (<span class="keyword">ref</span> arg);</span><br><span class="line">        Console.WriteLine (arg);</span><br><span class="line">        <span class="comment">// Output: 16 </span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">squareVal</span> (<span class="params"><span class="keyword">int</span> valParameter</span>) </span>&#123;</span><br><span class="line">        valParameter *= valParameter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Passing by reference</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">squareRef</span> (<span class="params"><span class="keyword">ref</span> <span class="keyword">int</span> refParameter</span>) </span>&#123;</span><br><span class="line">        refParameter *= refParameter;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="引用参数-ref"><a href="#引用参数-ref" class="headerlink" title="引用参数 ref"></a>引用参数 ref</h2><p>在方法的参数列表中使用 <code>ref</code> 关键字时，它指示参数按引用传递，而非按值传递。 按引用传递的效果是，对所调用方法中参数进行的任何更改都反映在调用方法中。 例如，如果调用方传递本地变量表达式或数组元素访问表达式，所调用方法会替换 <code>ref</code> 参数引用的对象，然后，当该方法返回时，调用方的本地变量或数组元素将开始引用新对象。</p><blockquote><p>若要使用 <code>ref</code> 参数，方法定义和调用方法均必须显式使用 <code>ref</code> 关键字，如下面的示例所示。</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">RefExample</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Method</span> (<span class="params"><span class="keyword">ref</span> <span class="keyword">int</span> i</span>) </span>&#123;</span><br><span class="line">        i = i + <span class="number">44</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> val = <span class="number">1</span>;</span><br><span class="line">        Method (<span class="keyword">ref</span> val);</span><br><span class="line">        Console.WriteLine (val);    <span class="comment">// Output: 45</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="输出参数-out"><a href="#输出参数-out" class="headerlink" title="输出参数 out"></a>输出参数 out</h2><p><code>out</code> 关键字通过引用传递参数。 它与 <code>ref</code> 关键字相似，只不过 <code>ref</code> 要求在传递之前初始化变量。 若要使用 <code>out</code> 参数，方法定义和调用方法均必须显式使用 <code>out</code> 关键字。 例如:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">OutExample</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Method</span> (<span class="params"><span class="keyword">out</span> <span class="keyword">int</span> i</span>) </span>&#123;</span><br><span class="line">        i = <span class="number">44</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> <span class="keyword">value</span>;</span><br><span class="line">        Method (<span class="keyword">out</span> <span class="keyword">value</span>);</span><br><span class="line">        Console.WriteLine (<span class="keyword">value</span>);  <span class="comment">// value is now 44</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="调用具有-out-参数的方法"><a href="#调用具有-out-参数的方法" class="headerlink" title="调用具有 out 参数的方法"></a>调用具有 out 参数的方法</h2><p>在 <code>C# 6</code> 及更早版本中，必须先在单独的语句中声明变量，然后才能将其作为 <code>out</code> 参数传递。 下面的示例先声明了变量 number，然后再将它传递给将字符串转换为数字的 <code>Int32.TryParse</code> 方法。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Example</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">string</span> <span class="keyword">value</span> = <span class="string">"1640"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> number;</span><br><span class="line">        <span class="keyword">if</span> (Int32.TryParse (<span class="keyword">value</span>, <span class="keyword">out</span> number))</span><br><span class="line">            Console.WriteLine (<span class="string">$"Converted '<span class="subst">&#123;<span class="keyword">value</span>&#125;</span>' to <span class="subst">&#123;number&#125;</span>"</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            Console.WriteLine (<span class="string">$"Unable to convert '<span class="subst">&#123;<span class="keyword">value</span>&#125;</span>'"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// The example displays the following output:</span></span><br><span class="line"><span class="comment">//       Converted '1640' to 1640</span></span><br></pre></td></tr></table></figure><p>从 <code>C# 7</code> 开始，可以在方法调用的参数列表而不是单独的变量声明中声明 <code>out</code> 变量。 这使得代码更简洁可读，还能防止在方法调用之前无意中向该变量赋值。 下面的示例与上一个示例基本相同，不同之处在于它在对 <code>Int32.TryParse</code> 方法的调用中定义了 <code>number</code> 变量。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Example</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">string</span> <span class="keyword">value</span> = <span class="string">"1640"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (Int32.TryParse (<span class="keyword">value</span>, <span class="keyword">out</span> <span class="keyword">int</span> number))</span><br><span class="line">            Console.WriteLine (<span class="string">$"Converted '<span class="subst">&#123;<span class="keyword">value</span>&#125;</span>' to <span class="subst">&#123;number&#125;</span>"</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            Console.WriteLine (<span class="string">$"Unable to convert '<span class="subst">&#123;<span class="keyword">value</span>&#125;</span>'"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// The example displays the following output:</span></span><br><span class="line"><span class="comment">//       Converted '1640' to 1640</span></span><br></pre></td></tr></table></figure><h2 id="数组参数"><a href="#数组参数" class="headerlink" title="数组参数"></a>数组参数</h2><p>参数以数组形式体现，即数组参数。数组可以作为实参传递给方法形参。由于数组是引用类型，因此方法可以更改元素的值。</p><blockquote><p>将一维数组作为参数传递</p></blockquote><ul><li>可将初始化的一维数组传递给方法。 例如，下列语句将一个数组发送给了 Print 方法。</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] theArray = &#123; <span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span> &#125;;</span><br><span class="line">PrintArray(theArray);</span><br></pre></td></tr></table></figure><ul><li>可在同一步骤中初始化并传递新数组，如下例所示。</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PrintArray(<span class="keyword">new</span> <span class="keyword">int</span>[] &#123; <span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span> &#125;);</span><br></pre></td></tr></table></figure><blockquote><p>将多维数组作为参数传递</p></blockquote><ul><li>通过与传递一维数组相同的方式，向方法传递初始化的多维数组。</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[,] theArray = &#123; &#123; <span class="number">1</span>, <span class="number">2</span> &#125;, &#123; <span class="number">2</span>, <span class="number">3</span> &#125;, &#123; <span class="number">3</span>, <span class="number">4</span> &#125; &#125;;</span><br><span class="line">Print2DArray(theArray);</span><br></pre></td></tr></table></figure><ul><li>可在同一步骤中初始化并传递新数组，如下例所示。</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Print2DArray(<span class="keyword">new</span> <span class="keyword">int</span>[,] &#123; &#123; <span class="number">1</span>, <span class="number">2</span> &#125;, &#123; <span class="number">3</span>, <span class="number">4</span> &#125;, &#123; <span class="number">5</span>, <span class="number">6</span> &#125;, &#123; <span class="number">7</span>, <span class="number">8</span> &#125; &#125;);</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>示例</p></blockquote><p>在下列示例中，初始化一个整数的二维数组，并将其传递至 Print2DArray 方法。 该方法将显示数组的元素。</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">ArrayClass2D</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Print2DArray</span> (<span class="params"><span class="keyword">int</span>[, ] arr</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// Display the array elements.</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.GetLength (<span class="number">0</span>); i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arr.GetLength (<span class="number">1</span>); j++) &#123;</span><br><span class="line">                System.Console.WriteLine (<span class="string">"Element(&#123;0&#125;,&#123;1&#125;)=&#123;2&#125;"</span>, i, j, arr[i, j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// Pass the array as an argument.</span></span><br><span class="line">        Print2DArray (<span class="keyword">new</span> <span class="keyword">int</span>[, ] &#123; &#123; <span class="number">1</span>, <span class="number">2</span> &#125;, &#123; <span class="number">3</span>, <span class="number">4</span> &#125;, &#123; <span class="number">5</span>, <span class="number">6</span> &#125;, &#123; <span class="number">7</span>, <span class="number">8</span> &#125; &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Keep the console window open in debug mode.</span></span><br><span class="line">        System.Console.WriteLine (<span class="string">"Press any key to exit."</span>);</span><br><span class="line">        System.Console.ReadKey ();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* Output:</span></span><br><span class="line"><span class="comment">    Element(0,0)=1</span></span><br><span class="line"><span class="comment">    Element(0,1)=2</span></span><br><span class="line"><span class="comment">    Element(1,0)=3</span></span><br><span class="line"><span class="comment">    Element(1,1)=4</span></span><br><span class="line"><span class="comment">    Element(2,0)=5</span></span><br><span class="line"><span class="comment">    Element(2,1)=6</span></span><br><span class="line"><span class="comment">    Element(3,0)=7</span></span><br><span class="line"><span class="comment">    Element(3,1)=8</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><blockquote><blockquote><p>示例</p></blockquote><p>传递一个长度可变的参数列表</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">PathEx</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">string</span> fullName;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Call Combine() with four arguments</span></span><br><span class="line">        fullName = Combine (</span><br><span class="line">            Directory.GetCurrentDirectory (),</span><br><span class="line">            <span class="string">"bin"</span>, <span class="string">"config"</span>, <span class="string">"index.html"</span>);</span><br><span class="line"></span><br><span class="line">        Console.WriteLine (fullName);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Call Combine() with only three arguments</span></span><br><span class="line">        fullName = Combine (</span><br><span class="line">            Environment.SystemDirectory,</span><br><span class="line">            <span class="string">"Temp"</span>, <span class="string">"index.html"</span>);</span><br><span class="line"></span><br><span class="line">        Console.WriteLine (fullName);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Call Combine() with an array</span></span><br><span class="line">        fullName = Combine (</span><br><span class="line">            <span class="keyword">new</span> <span class="keyword">string</span>[] &#123;</span><br><span class="line">                <span class="string">"C:\\"</span>,</span><br><span class="line">                <span class="string">"Data"</span>,</span><br><span class="line">                <span class="string">"HomeDir"</span>,</span><br><span class="line">                <span class="string">"index.html"</span></span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">        Console.WriteLine (fullName);</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">string</span> <span class="title">Combine</span> (<span class="params"><span class="keyword">params</span> <span class="keyword">string</span>[] paths</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">string</span> result = <span class="keyword">string</span>.Empty;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">string</span> path <span class="keyword">in</span> paths) &#123;</span><br><span class="line">            result = System.IO.Path.Combine (result, path);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 输出</span></span><br><span class="line"><span class="comment">d:\WaProj\CSharpGuide\bin\config\index.html</span></span><br><span class="line"><span class="comment">C:\Windows\system32\Temp\index.html</span></span><br><span class="line"><span class="comment">C:\Data\HomeDir\index.html</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><blockquote><blockquote><p>数组参数需要注意的地方</p></blockquote><ul><li>参数不一定是方法的唯一参数，但必须时方法声明中的最后一个参数。所以，只能有一个数组参数；</li><li>调用者可以显式地使用数组，而不必是以都好分隔的参数列表。最终生成的CIL代码是一样的。</li></ul></blockquote><h1 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h1><p>递归是一项非常重要的编程技巧，它使函数调用其本身。</p><blockquote><blockquote><p>示例</p></blockquote><p>返回目录中所有 <code>.cs</code>文件代码行总数：</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">LineCounter</span> &#123;</span><br><span class="line">    <span class="comment">// Use the first argument as the directory</span></span><br><span class="line">    <span class="comment">// to search, or default to the current directory.</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span> (<span class="params"><span class="keyword">string</span>[] args</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> totalLineCount = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">string</span> directory;</span><br><span class="line">        <span class="keyword">if</span> (args.Length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            directory = args[<span class="number">0</span>];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            directory = Directory.GetCurrentDirectory ();</span><br><span class="line">        &#125;</span><br><span class="line">        totalLineCount = DirectoryCountLines (directory);</span><br><span class="line">        System.Console.WriteLine (totalLineCount);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">DirectoryCountLines</span> (<span class="params"><span class="keyword">string</span> directory</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> lineCount = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">string</span> file <span class="keyword">in</span></span><br><span class="line">            Directory.GetFiles (directory, <span class="string">"*.cs"</span>)) &#123;</span><br><span class="line">            lineCount += CountLines (file);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">string</span> subdirectory <span class="keyword">in</span></span><br><span class="line">            Directory.GetDirectories (directory)) &#123;</span><br><span class="line">            lineCount += DirectoryCountLines (subdirectory);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> lineCount;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">CountLines</span> (<span class="params"><span class="keyword">string</span> file</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">string</span> line;</span><br><span class="line">        <span class="keyword">int</span> lineCount = <span class="number">0</span>;</span><br><span class="line">        FileStream stream =</span><br><span class="line">            <span class="keyword">new</span> FileStream (file, FileMode.Open);</span><br><span class="line"></span><br><span class="line">        StreamReader reader = <span class="keyword">new</span> StreamReader (stream);</span><br><span class="line">        line = reader.ReadLine ();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (line != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (line.Trim () != <span class="string">""</span>) &#123;</span><br><span class="line">                lineCount++;</span><br><span class="line">            &#125;</span><br><span class="line">            line = reader.ReadLine ();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        reader.Close (); <span class="comment">// Automatically closes the stream</span></span><br><span class="line">        <span class="keyword">return</span> lineCount;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>示例</p></blockquote><p>遍历目录中所有目录和文件，在终端中格式化输出：</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">DirectoryFileList</span> &#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span> &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span> (<span class="params"><span class="keyword">string</span>[] args</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">string</span> directory;</span><br><span class="line">            <span class="keyword">if</span> (args.Length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                directory = args[<span class="number">0</span>];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                directory = Directory.GetCurrentDirectory ();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Console.WriteLine (directory);</span><br><span class="line"></span><br><span class="line">            DirectoryFileList (directory, directory);</span><br><span class="line"></span><br><span class="line">            Console.ReadKey ();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">DirectoryFileList</span> (<span class="params"><span class="keyword">string</span> beginDirectory, <span class="keyword">string</span> currentDirectory</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> level = currentDirectory.Split (<span class="string">'\\'</span>).Length - beginDirectory.Split (<span class="string">'\\'</span>).Length;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">string</span> formatPrefix = <span class="string">"|--"</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> currentLevel = <span class="number">0</span>; currentLevel &lt; level; currentLevel++) &#123;</span><br><span class="line">                formatPrefix += <span class="string">"|--"</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">string</span> subdirectory <span class="keyword">in</span> Directory.GetDirectories (currentDirectory)) &#123;</span><br><span class="line">                Console.WriteLine (formatPrefix + subdirectory.Substring (subdirectory.LastIndexOf (<span class="string">'\\'</span>)));</span><br><span class="line"></span><br><span class="line">                DirectoryFileList (beginDirectory, subdirectory);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">string</span> file <span class="keyword">in</span> Directory.GetFiles (currentDirectory)) &#123;</span><br><span class="line">                Console.ForegroundColor = ConsoleColor.DarkGreen;</span><br><span class="line">                Console.WriteLine (formatPrefix + Path.GetFileName (file));</span><br><span class="line">                Console.ForegroundColor = ConsoleColor.White;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 输出</span></span><br><span class="line"><span class="comment">d:\WaProj\CSharpGuide</span></span><br><span class="line"><span class="comment">|--\.vscode</span></span><br><span class="line"><span class="comment">|--|--launch.json</span></span><br><span class="line"><span class="comment">|--|--tasks.json</span></span><br><span class="line"><span class="comment">|--\bin</span></span><br><span class="line"><span class="comment">|--|--\Debug</span></span><br><span class="line"><span class="comment">|--|--|--\netcoreapp2.0</span></span><br><span class="line"><span class="comment">|--|--|--|--CSharpGuide.deps.json</span></span><br><span class="line"><span class="comment">|--|--|--|--CSharpGuide.dll</span></span><br><span class="line"><span class="comment">|--|--|--|--CSharpGuide.pdb</span></span><br><span class="line"><span class="comment">|--|--|--|--CSharpGuide.runtimeconfig.dev.json</span></span><br><span class="line"><span class="comment">|--|--|--|--CSharpGuide.runtimeconfig.json</span></span><br><span class="line"><span class="comment">|--\obj</span></span><br><span class="line"><span class="comment">|--|--\Debug</span></span><br><span class="line"><span class="comment">|--|--|--\netcoreapp2.0</span></span><br><span class="line"><span class="comment">|--|--|--|--CSharpGuide.AssemblyInfo.cs</span></span><br><span class="line"><span class="comment">|--|--|--|--CSharpGuide.AssemblyInfoInputs.cache</span></span><br><span class="line"><span class="comment">|--|--|--|--CSharpGuide.csproj.CoreCompileInputs.cache</span></span><br><span class="line"><span class="comment">|--|--|--|--CSharpGuide.csproj.FileListAbsolute.txt</span></span><br><span class="line"><span class="comment">|--|--|--|--CSharpGuide.dll</span></span><br><span class="line"><span class="comment">|--|--|--|--CSharpGuide.pdb</span></span><br><span class="line"><span class="comment">|--|--CSharpGuide.csproj.nuget.cache</span></span><br><span class="line"><span class="comment">|--|--CSharpGuide.csproj.nuget.g.props</span></span><br><span class="line"><span class="comment">|--|--CSharpGuide.csproj.nuget.g.targets</span></span><br><span class="line"><span class="comment">|--|--project.assets.json</span></span><br><span class="line"><span class="comment">|--CSharpGuide.csproj</span></span><br><span class="line"><span class="comment">|--Program.cs</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><blockquote><p>递归很容易陷入无限递归调用，编码/调试时多注意。</p></blockquote><h1 id="方法重载-Mathod-Overloading"><a href="#方法重载-Mathod-Overloading" class="headerlink" title="方法重载 Mathod Overloading"></a>方法重载 Mathod Overloading</h1><p>一个类包含两个或者更多<strong>同名</strong>的方法，就会发生<strong>方法重载</strong>。以WriteLine()方法为例，可向它传递一个格式字符串和其他一些参数，也可以只传递一个整数。两者的实现肯定不同，但在逻辑上，对于调用者，这个方法就是负责输出数据，至于方法内部如恶化实现，调用者并不关心。</p><blockquote><p>使用<strong>重载</strong>统计.cs文件中的行数</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">LineCounter</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span> (<span class="params"><span class="keyword">string</span>[] args</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> totalLineCount;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (args.Length &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            totalLineCount =</span><br><span class="line">                DirectoryCountLines (args[<span class="number">0</span>], args[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (args.Length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            totalLineCount = DirectoryCountLines (args[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            totalLineCount = DirectoryCountLines ();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.Console.WriteLine (totalLineCount);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">DirectoryCountLines</span> (<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> DirectoryCountLines (</span><br><span class="line">            Directory.GetCurrentDirectory ());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">DirectoryCountLines</span> (<span class="params"><span class="keyword">string</span> directory</span>)</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> DirectoryCountLines (directory, <span class="string">"*.cs"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">DirectoryCountLines</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">string</span> directory, <span class="keyword">string</span> extension</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> lineCount = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">string</span> file <span class="keyword">in</span></span><br><span class="line">            Directory.GetFiles (directory, extension)) &#123;</span><br><span class="line">            lineCount += CountLines (file);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">string</span> subdirectory <span class="keyword">in</span></span><br><span class="line">            Directory.GetDirectories (directory)) &#123;</span><br><span class="line">            lineCount += DirectoryCountLines (subdirectory);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> lineCount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">CountLines</span> (<span class="params"><span class="keyword">string</span> file</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> lineCount = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">string</span> line;</span><br><span class="line">        FileStream stream =</span><br><span class="line">            <span class="keyword">new</span> FileStream (file, FileMode.Open);</span><br><span class="line"></span><br><span class="line">        StreamReader reader = <span class="keyword">new</span> StreamReader (stream);</span><br><span class="line">        line = reader.ReadLine ();</span><br><span class="line">        <span class="keyword">while</span> (line != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (line.Trim () != <span class="string">""</span>) &#123;</span><br><span class="line">                lineCount++;</span><br><span class="line">            &#125;</span><br><span class="line">            line = reader.ReadLine ();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        reader.Close (); <span class="comment">// Automatically closes the stream</span></span><br><span class="line">        <span class="keyword">return</span> lineCount;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="可选参数-可选实参"><a href="#可选参数-可选实参" class="headerlink" title="可选参数(可选实参)"></a>可选参数(可选实参)</h1><p>方法、构造函数、索引器或委托的定义可以指定其形参为必需还是可选。 任何调用都必须为所有必需的形参提供实参，但可以为可选的形参省略实参。</p><p>每个可选形参都有一个默认值作为其定义的一部分。 如果没有为该形参发送实参，则使用默认值。 默认值必须是以下类型的表达式之一：</p><ul><li>常量表达式；</li><li>new ValType() 形式的表达式，其中 ValType 是值类型，例如 enum 或 struct；</li><li>default(ValType) 形式的表达式，其中 ValType 是值类型。</li></ul><p>可选参数定义于参数列表的<code>末尾</code>和必需参数<code>之后</code>。 如果调用方为一系列可选形参中的任意一个形参提供了实参，则它<code>必须</code>为前面的所有可选形参提供实参。例如，在以下代码中，使用一个必选形参和两个可选形参定义实例方法 <code>ExampleMethod</code>。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ExampleMethod</span>(<span class="params"><span class="keyword">int</span> required, <span class="keyword">string</span> optionalstr = <span class="string">"default string"</span>, <span class="keyword">int</span> optionalint = <span class="number">10</span></span>)</span></span><br></pre></td></tr></table></figure><p>下面对 ExampleMethod 的调用会导致编译器错误，原因是为第三个形参而不是为第二个形参提供了实参。</p><pre><code>//anExample.ExampleMethod(3, ,4);</code></pre><p>但是，如果知道第三个形参的名称，则可以使用<code>命名实参</code>来完成此任务。</p><pre><code>anExample.ExampleMethod(3, optionalint: 4);</code></pre><h1 id="命名参数-命名实参"><a href="#命名参数-命名实参" class="headerlink" title="命名参数(命名实参)"></a>命名参数(命名实参)</h1><p><code>命名参数</code> 是 <code>C# 4.0</code> 新增的方法调用功能。有了命名实参，你将不再需要记住或查找形参在所调用方法的形参列表中的顺序。 每个实参的形参都可按形参名称进行指定。</p><p>如果你不记得参数的顺序，但知道其名称，你可以按任何顺序发送自变量。</p><pre><code>PrintOrderDetails(orderNum: 31, productName: &quot;Red Mug&quot;, sellerName: &quot;Gift Shop&quot;);PrintOrderDetails(productName: &quot;Red Mug&quot;, sellerName: &quot;Gift Shop&quot;, orderNum: 31);</code></pre><h1 id="高级主题：方法解析"><a href="#高级主题：方法解析" class="headerlink" title="高级主题：方法解析"></a>高级主题：方法解析</h1><p>当编译器必须从一系列“适用”的方法中训责一个最适合某个特定调用的方法时，会选择拥有最据提的参数类型的那个方法。</p><p>如果有多个适用的方法，但无法从中挑选出最具唯一性的，编译器就会宝座，指明调用存在的歧义。</p><blockquote><p>例如，给定以下的方法：</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Method</span>(<span class="params"><span class="keyword">object</span> thing</span>)</span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Method</span>(<span class="params"><span class="keyword">double</span> thing</span>)</span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Method</span>(<span class="params"><span class="keyword">long</span> thing</span>)</span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Method</span>(<span class="params"><span class="keyword">int</span> thing</span>)</span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>调用 <code>Method(42)</code> 会被解析成 <code>Method(int thing)</code>，因为存在着一个从实参类型到形参类型的完全匹配的方法。如果删除该方法，那么重载解析会选择 <code>long</code> 版本，因为 <code>long</code> 比 <code>double</code> 和 <code>object</code> 更具体。</p><h1 id="异常处理语句"><a href="#异常处理语句" class="headerlink" title="异常处理语句"></a>异常处理语句</h1><p>C# 提供用于处理反常情况（称为异常，可能会在执行程序的过程中发生）的内置支持。 这些异常由正常控制流之外的代码进行处理。</p><h2 id="try-catch"><a href="#try-catch" class="headerlink" title="try-catch"></a>try-catch</h2><p><code>Try</code> 块之后必须紧跟着一个或多个 <code>catch</code> 块（或/和一个 <code>Finally</code> 块），这些子句指定不同异常的处理程序。只要数据类型与异常类型匹配，对应的 catch 块就会执行。</p><blockquote><p>在前面例子“遍历目录中所有目录和文件，在终端中格式化输出”中，如果权限不够，就会引发异常，下面例子加入异常处理：</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">DirectoryFileList</span> &#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span> &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span> (<span class="params"><span class="keyword">string</span>[] args</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">string</span> directory;</span><br><span class="line">            <span class="keyword">if</span> (args.Length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                directory = args[<span class="number">0</span>];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                directory = Directory.GetCurrentDirectory ();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Console.WriteLine (directory);</span><br><span class="line">            DirectoryFileList (directory, directory);</span><br><span class="line">            Console.ReadKey ();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">DirectoryFileList</span> (<span class="params"><span class="keyword">string</span> beginDirectory, <span class="keyword">string</span> currentDirectory</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> level = currentDirectory.Split (<span class="string">'\\'</span>).Length - beginDirectory.Split (<span class="string">'\\'</span>).Length;</span><br><span class="line"></span><br><span class="line">            level = ((beginDirectory.Split (<span class="string">'\\'</span>) [<span class="number">1</span>] == <span class="string">""</span>) &amp;&amp; (currentDirectory.Split (<span class="string">'\\'</span>) [<span class="number">1</span>] != <span class="string">""</span>)) ? level + <span class="number">1</span> : level;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">string</span> formatPrefix = <span class="string">"|--"</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> currentLevel = <span class="number">0</span>; currentLevel &lt; level; currentLevel++) &#123;</span><br><span class="line">                formatPrefix += <span class="string">"|--"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">foreach</span> (<span class="keyword">string</span> subdirectory <span class="keyword">in</span> Directory.GetDirectories (currentDirectory)) &#123;</span><br><span class="line">                    Console.WriteLine (formatPrefix + subdirectory.Substring (subdirectory.LastIndexOf (<span class="string">'\\'</span>)));</span><br><span class="line"></span><br><span class="line">                    DirectoryFileList (beginDirectory, subdirectory);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">foreach</span> (<span class="keyword">string</span> file <span class="keyword">in</span> Directory.GetFiles (currentDirectory)) &#123;</span><br><span class="line">                    Console.ForegroundColor = ConsoleColor.DarkGreen;</span><br><span class="line">                    Console.WriteLine (formatPrefix + Path.GetFileName (file));</span><br><span class="line">                    Console.ForegroundColor = ConsoleColor.White;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (UnauthorizedAccessException) &#123;</span><br><span class="line">                System.Console.WriteLine (<span class="string">"发现受保护文件目录，禁止访问。"</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception exception) &#123;</span><br><span class="line">                System.Console.WriteLine (<span class="string">"程序运行异常:"</span> + exception);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="throw"><a href="#throw" class="headerlink" title="throw"></a>throw</h2><p><code>Throw</code>会抛出/传递程序执行期间出现异常的信号,通过在<code>catch</code>块里使用<code>throw</code>语句.可以改变产生的异常,比如我们可以抛出一个新的异常。</p><blockquote><p>C#允许开发人员从代码中引发异常，如下例所示：</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ThrowingExceptions</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Console.WriteLine (<span class="string">"Begin executing"</span>);</span><br><span class="line">            Console.WriteLine (<span class="string">"Throw exception"</span>);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception (<span class="string">"自定义异常"</span>);</span><br><span class="line">            Console.WriteLine (<span class="string">"End executing"</span>); <span class="comment">//永远不会执行</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (FormatException exception) &#123;</span><br><span class="line">            Console.WriteLine (</span><br><span class="line">                <span class="string">"A FormateException was thrown"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception exception) &#123;</span><br><span class="line">            Console.WriteLine (</span><br><span class="line">                <span class="string">"Unexpected error: &#123;0&#125;"</span>, exception.Message);</span><br><span class="line">        &#125; <span class="keyword">catch</span> <span class="comment">//永远不会执行</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine (<span class="string">"Unexpected error!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Console.WriteLine (</span><br><span class="line">            <span class="string">"Shutting down..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 输出</span></span><br><span class="line"><span class="comment">Begin executing</span></span><br><span class="line"><span class="comment">Throw exception</span></span><br><span class="line"><span class="comment">Unexpected error: 自定义异常</span></span><br><span class="line"><span class="comment">Shutting down...</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>有时<code>catch</code>块能捕捉到异常，但不能正确或者完整处理它。这种情况下，可以让这个<code>catch</code>块重新抛出异常，据提办法时使用一个单独的<code>throw</code>语句，不要在它后面指定任何异常。</p><blockquote><p><code>throw;</code> 和 <code>throw exception;</code>的区别：<code>throw;</code> 保持了异常中的“调用栈”信息，而<code>throw exception;</code>将那些信息替换成当前调用栈信息。如下例所示：</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            X ();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            Console.WriteLine (<span class="string">"X throw："</span> + ex.TargetSite);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Y ();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            Console.WriteLine (<span class="string">"Y throw："</span> + ex.TargetSite);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">X</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">int</span>.Parse (<span class="string">"?"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception) &#123;</span><br><span class="line">            <span class="keyword">throw</span>;  <span class="comment">// Rethrow 构造</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Y</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">int</span>.Parse (<span class="string">"?"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> ex;   <span class="comment">// Throw 捕获的ex变量</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">X throw：Void StringToNumber(System.String, System.Globalization.NumberStyles, NumberBuffer ByRef, System.Globalization.NumberFormatInfo, Boolean)</span></span><br><span class="line"><span class="comment">Y throw：Void Y()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><blockquote><p><code>throw;</code> | <code>throw exception;</code> | <code>throw new exception;</code> 区别示例：</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">hello</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        ExceptionClass ec = <span class="keyword">new</span> ExceptionClass ();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ec.ExceptionThrow1 ();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            Console.WriteLine (ex.ToString ());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ec.ExceptionThrow2 ();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            Console.WriteLine (ex.ToString ());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ec.ExceptionThrow3 ();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            Console.WriteLine (ex.ToString ());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ec.ExceptionThrow4 ();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            Console.WriteLine (ex.ToString ());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Console.ReadKey ();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ExceptionClass</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ExceptionThrow1</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 调用原始异常抛出方法来抛出异常</span></span><br><span class="line">            <span class="keyword">this</span>.ExceptionMethod ();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> ex;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ExceptionThrow2</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.ExceptionMethod ();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ExceptionThrow3</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.ExceptionMethod ();</span><br><span class="line">        &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ExceptionThrow4</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.ExceptionMethod ();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception (<span class="string">"经过进一步包装的异常"</span>, ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ExceptionMethod</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> DivideByZeroException ();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 输出</span></span><br><span class="line"><span class="comment">System.DivideByZeroException: Attempted to divide by zero.</span></span><br><span class="line"><span class="comment">   at ExceptionClass.ExceptionThrow1() in d:\WaProj\CSharpGuide\Program.cs:line 47</span></span><br><span class="line"><span class="comment">   at hello.Main() in d:\WaProj\CSharpGuide\Program.cs:line 8</span></span><br><span class="line"><span class="comment">System.DivideByZeroException: Attempted to divide by zero.</span></span><br><span class="line"><span class="comment">   at ExceptionClass.ExceptionMethod() in d:\WaProj\CSharpGuide\Program.cs:line 88</span></span><br><span class="line"><span class="comment">   at ExceptionClass.ExceptionThrow2() in d:\WaProj\CSharpGuide\Program.cs:line 58</span></span><br><span class="line"><span class="comment">   at hello.Main() in d:\WaProj\CSharpGuide\Program.cs:line 14</span></span><br><span class="line"><span class="comment">System.DivideByZeroException: Attempted to divide by zero.</span></span><br><span class="line"><span class="comment">   at ExceptionClass.ExceptionMethod() in d:\WaProj\CSharpGuide\Program.cs:line 88</span></span><br><span class="line"><span class="comment">   at ExceptionClass.ExceptionThrow3() in d:\WaProj\CSharpGuide\Program.cs:line 69</span></span><br><span class="line"><span class="comment">   at hello.Main() in d:\WaProj\CSharpGuide\Program.cs:line 20</span></span><br><span class="line"><span class="comment">System.Exception: 经过进一步包装的异常 ---&gt; System.DivideByZeroException: Attempted to divide by zero.</span></span><br><span class="line"><span class="comment">   at ExceptionClass.ExceptionMethod() in d:\WaProj\CSharpGuide\Program.cs:line 88</span></span><br><span class="line"><span class="comment">   at ExceptionClass.ExceptionThrow4() in d:\WaProj\CSharpGuide\Program.cs:line 78</span></span><br><span class="line"><span class="comment">   --- End of inner exception stack trace ---</span></span><br><span class="line"><span class="comment">   at ExceptionClass.ExceptionThrow4() in d:\WaProj\CSharpGuide\Program.cs:line 80</span></span><br><span class="line"><span class="comment">   at hello.Main() in d:\WaProj\CSharpGuide\Program.cs:line 26</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><hr><h1 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h1><iframe src="https://slowread.cn/EssentialCSharp5-Index.html" width="100%" height="300" frameborder="0" allowfullscreen></iframe>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;方法&quot;&gt;&lt;a href=&quot;#方法&quot; class=&quot;headerlink&quot; title=&quot;方法&quot;&gt;&lt;/a&gt;方法&lt;/h1&gt;&lt;p&gt;方法是包含一系列语句的代码块。 程序通过调用该方法并指定任何所需的方法参数使语句得以执行。 在 C# 中，每个执行的指令均在方法的上下文中执行。 Main 方法是每个 C# 应用程序的入口点，并在启动程序时由公共语言运行时 (CLR) 调用。&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;规范&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;要为方法名使用动词或动词短语。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight csharp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;System.Console.Write(&lt;span class=&quot;string&quot;&gt;&quot;Enter Your first name: &quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;解析&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;System&lt;/code&gt; 命名空间&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Console&lt;/code&gt; 类型名称&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Write&lt;/code&gt; 方法名称&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;Enter Your first name: &amp;quot;&lt;/code&gt; 实参&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="C#" scheme="https://at2008.github.io/tags/C/"/>
    
      <category term="C#本质论" scheme="https://at2008.github.io/tags/C-%E6%9C%AC%E8%B4%A8%E8%AE%BA/"/>
    
      <category term="Essential C#" scheme="https://at2008.github.io/tags/Essential-C/"/>
    
  </entry>
  
  <entry>
    <title>Hexo Next 使用配置</title>
    <link href="https://at2008.github.io/2017/12/18/Hexo-Next-%E4%BD%BF%E7%94%A8%E9%85%8D%E7%BD%AE/"/>
    <id>https://at2008.github.io/2017/12/18/Hexo-Next-使用配置/</id>
    <published>2017-12-18T05:53:32.000Z</published>
    <updated>2018-08-03T15:15:51.215Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Github-Pages-启用-HTTPS"><a href="#Github-Pages-启用-HTTPS" class="headerlink" title="Github Pages 启用 HTTPS"></a>Github Pages 启用 HTTPS</h1><blockquote><p>GitHub Pages 现在已经免费提供数字证书，在 Github Pages 上创建的个人站点可以免费支持 HTTPS，操作流程如下：</p></blockquote><ul><li>到 DNS 服务商网站，修改<strong>域名解析</strong>，删除原来的 A 记录，按照下面格式增加 4 条 A 记录，例如你的域名是 example.com ，效果如下表所示：</li></ul><table><thead><tr><th>类型</th><th>名称</th><th>值</th></tr></thead><tbody><tr><td>A</td><td>example.com</td><td>185.199.108.153</td></tr><tr><td>A</td><td>example.com</td><td>185.199.109.153</td></tr><tr><td>A</td><td>example.com</td><td>185.199.110.153</td></tr><tr><td>A</td><td>example.com</td><td>185.199.111.153</td></tr></tbody></table><blockquote><p>IP地址固定统一都是上面所列的4个，具体内容，参见 <a href="https://help.github.com/articles/setting-up-an-apex-domain/" target="_blank" rel="noopener">Setting up an apex domain</a></p></blockquote><ul><li>然后打开 Github ，依次打开个人站点资料库-&gt;’Setting’-&gt;’GitHub Pages’-&gt;’Enforce HTTPS ‘</li><li>如果 <strong>Enforce HTTPS</strong> 不能点选，等待，正常情况大约24小时不到，<strong>Enforce HTTPS</strong> 就可以启用了</li></ul><blockquote><blockquote><p>启用 HTTPS 后，如果之前页面中有引用非 https 协议的资源(包括图片、脚本等各种链接资源)，比如 src=”<a href="http://code.jquery.com/jquery-3.2.1.min.js&quot;" target="_blank" rel="noopener">http://code.jquery.com/jquery-3.2.1.min.js&quot;</a> 这样 http 协议的资源，需要修改为 https 协议 src=”<a href="https://code.jquery.com/jquery-3.2.1.min.js&quot;" target="_blank" rel="noopener">https://code.jquery.com/jquery-3.2.1.min.js&quot;</a> 就可以正常运行，不会提示不安全。</p></blockquote></blockquote><h1 id="npm-安装-hexo-卡住问题解决"><a href="#npm-安装-hexo-卡住问题解决" class="headerlink" title="npm 安装 hexo 卡住问题解决"></a>npm 安装 hexo 卡住问题解决</h1><p>用 npm 安装话经常出现卡住而导致无法正常安装，解决办法就是修改 npm 的安装源，这里选择淘宝 NPM 镜像，这是一个完整 npmjs.org 镜像，你可以用此代替官方版本(只读)，同步频率目前为 10分钟 一次以保证尽量与官方服务同步。。</p><pre><code>npm config set registry https://registry.npm.taobao.org</code></pre><p>一次解决所有卡顿问题！</p><h1 id="Next-5-x-升级-6-x"><a href="#Next-5-x-升级-6-x" class="headerlink" title="Next 5.x 升级 6.x"></a>Next 5.x 升级 6.x</h1><ul><li>下载 <a href="https://github.com/theme-next/hexo-theme-next/releases/latest" target="_blank" rel="noopener">Next 6 主题</a>，解压缩并重命名为next6，放置于 <code>\themes\</code> 目录下，这样保留旧版本的 next 主题，可以随时切换回去。</li><li>修改<strong>站点</strong>配置文件 <code>_config.yml</code>，指定使用新主题</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">next6</span></span><br></pre></td></tr></table></figure><ul><li>修改主题语言设置</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#language: zh-Hans  # next 5.x</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span>     <span class="comment"># next 6</span></span><br></pre></td></tr></table></figure><ul><li>修改<strong>主题</strong>配置文件<code>\themes\next6\_config.yml</code>，比较旧版本主题配置文件<code>_config.yml</code>中改动的地方，一一修改到新版本中。</li><li>旧版本主题个性化定制的文件复制到新版本主题对应目录下:<ul><li>next/source/css/_custom/*</li><li>next/source/css/_variables/*</li><li>next/layout/_custom/*</li></ul></li><li><p>执行命令:</p><pre><code>hexo clean  # 清理旧文件hexo d -g   # 重新编译/发布</code></pre></li></ul><h1 id="博客文章评论之-Valine"><a href="#博客文章评论之-Valine" class="headerlink" title="博客文章评论之 Valine"></a>博客文章评论之 Valine</h1><ul><li>注册Leancloud，Valine评论系统其实是放在Leancloud上的，因此首先需要去注册一个账号，<a href="https://leancloud.cn/" target="_blank" rel="noopener">Leancloud官网，点我注册</a>。</li><li>注册完以后需要创建一个应用，名字可以随便起，然后 进入应用-&gt;设置-&gt;应用key</li><li>拿到你的appid和appkey之后，打开主题配置文件 搜索 valine，填入appid 和 appkey</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Valine.</span></span><br><span class="line"><span class="comment"># You can get your appid and appkey from https://leancloud.cn</span></span><br><span class="line"><span class="comment"># more info please open https://valine.js.org</span></span><br><span class="line"><span class="attr">valine:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span> <span class="comment"># When enable is set to be true, leancloud_visitors is recommended to be closed for the re-initialization problem within different leancloud adk version.</span></span><br><span class="line"><span class="attr">  appid:</span> <span class="string">xxxxx-xxxx</span> <span class="comment"># your leancloud application appid</span></span><br><span class="line"><span class="attr">  appkey:</span> <span class="string">xxxxxxx</span> <span class="comment"># your leancloud application appkey</span></span><br><span class="line"><span class="attr">  notify:</span> <span class="literal">false</span> <span class="comment"># mail notifier , https://github.com/xCss/Valine/wiki</span></span><br><span class="line"><span class="attr">  verify:</span> <span class="literal">false</span> <span class="comment"># Verification code</span></span><br><span class="line"><span class="attr">  placeholder:</span> <span class="string">Just</span> <span class="string">go</span> <span class="string">go</span> <span class="comment"># comment box placeholder</span></span><br><span class="line"><span class="attr">  avatar:</span> <span class="string">mm</span> <span class="comment"># gravatar style</span></span><br><span class="line"><span class="attr">  guest_info:</span> <span class="string">nick,mail,link</span> <span class="comment"># custom comment header</span></span><br><span class="line"><span class="attr">  pageSize:</span> <span class="number">10</span> <span class="comment"># pagination size</span></span><br><span class="line"><span class="attr">  visitor:</span> <span class="literal">false</span> <span class="comment"># leancloud-counter-security is not supported for now.</span></span><br></pre></td></tr></table></figure><ul><li>最后！记得在Leancloud -&gt; 设置 -&gt; 安全中心 -&gt; Web 安全域名 把你的域名加进去，带 http 或者 https 前缀。</li></ul><h1 id="5-x版本-Pisces-主题页面留白太多问题"><a href="#5-x版本-Pisces-主题页面留白太多问题" class="headerlink" title="5.x版本 Pisces 主题页面留白太多问题"></a>5.x版本 Pisces 主题页面留白太多问题</h1><p>修改 <code>\themes\next\source\css\_schemes\Pisces\_layout.styl</code> 文件中下面的字段内容：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.header</span>&#123; <span class="attribute">width</span>: <span class="number">80%</span>; &#125; <span class="comment">/* 80% */</span></span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-class">.main-inner</span> &#123; <span class="attribute">width</span>: <span class="number">80%</span>; &#125; <span class="comment">/* 80% */</span></span><br><span class="line"><span class="selector-class">.content-wrap</span> &#123; <span class="attribute">width</span>: <span class="built_in">calc</span>(100% - 260px); &#125;</span><br></pre></td></tr></table></figure><p>完整文件参见 <a href="https://github.com/xiao-fang/xiao-fang.github.io/blob/3a95f3919a90bf56738016f9eb8a59e5bfab4a22/themes/next/source/css/_schemes/Pisces/_layout.styl" target="_blank" rel="noopener">这个地址</a>。</p><a id="more"></a><h1 id="首页文章增加阴影分割效果"><a href="#首页文章增加阴影分割效果" class="headerlink" title="首页文章增加阴影分割效果"></a>首页文章增加阴影分割效果</h1><p>1.修改文件 <code>\themes\next\source\css\_custom\custom.styl</code>，增加以下内容：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 主页文章添加阴影效果</span><br><span class="line"><span class="selector-class">.post</span> &#123;</span><br><span class="line"><span class="attribute">margin-top</span>: <span class="number">20px</span>;</span><br><span class="line"><span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span><br><span class="line"><span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line"><span class="attribute">-webkit-box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="built_in">rgba</span>(202, 203, 203, .5);</span><br><span class="line"><span class="attribute">-moz-box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="built_in">rgba</span>(202, 203, 204, .5);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.修改文件 <code>\themes\next\source\css\_common\components\post\post-eof.styl</code>，注释掉以下内容</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.posts-expand</span> &#123;</span><br><span class="line">  .post-eof &#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    display: block;</span></span><br><span class="line"><span class="comment">    margin: $post-eof-margin-top auto $post-eof-margin-bottom;</span></span><br><span class="line"><span class="comment">    width: 8%;</span></span><br><span class="line"><span class="comment">    height: 1px;</span></span><br><span class="line"><span class="comment">    background: $grey-light;</span></span><br><span class="line"><span class="comment">    text-align: center;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="首页文章阅读全文按钮样式修改"><a href="#首页文章阅读全文按钮样式修改" class="headerlink" title="首页文章阅读全文按钮样式修改"></a>首页文章阅读全文按钮样式修改</h1><p>修改文件 <code>\themes\next\source\css\_custom\custom.styl</code>，增加以下内容：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">//首页文章阅读全文按钮样式</span><br><span class="line"><span class="selector-class">.post-button</span> &#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.post-button</span> <span class="selector-class">.btn</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#686868</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">2</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">4px</span> <span class="number">8px</span> <span class="number">4px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">border</span>:none;</span><br><span class="line">    <span class="attribute">-webkit-box-shadow</span>: <span class="number">0px</span> <span class="number">5px</span> <span class="number">30px</span> -<span class="number">3px</span> <span class="built_in">rgba</span>(0,0,0,0.75);</span><br><span class="line">    <span class="attribute">-moz-box-shadow</span>: <span class="number">0px</span> <span class="number">5px</span> <span class="number">30px</span> -<span class="number">3px</span> <span class="built_in">rgba</span>(0,0,0,0.75);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.post-button</span> <span class="selector-class">.btn</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#000000</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#ffffff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="文章中嵌入html页面"><a href="#文章中嵌入html页面" class="headerlink" title="文章中嵌入html页面"></a>文章中嵌入html页面</h1><p>在文章中插入 iframe。</p><ul><li>直接使用 Hexo 标签插件</li></ul><p>在 <code>Markdown</code> 文件中，可以直接使用 <code>Hexo</code> 标签插件来实现，在文章中插入 iframe。</p><pre><code>{% iframe url [width] [height] %}</code></pre><ul><li>直接使用 HTML 语句</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">"http://example.com"</span> <span class="attr">width</span>=<span class="string">"700px"</span> <span class="attr">height</span>=<span class="string">"500px"</span> <span class="attr">frameborder</span>=<span class="string">"0"</span> <span class="attr">scrolling</span>=<span class="string">"no"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="指定在新窗口打开文章中的链接"><a href="#指定在新窗口打开文章中的链接" class="headerlink" title="指定在新窗口打开文章中的链接"></a>指定在新窗口打开文章中的链接</h1><ul><li>使用 Hexo 标签插件</li></ul><p>在 <code>Markdown</code> 文件中，可以直接使用 <code>Hexo</code> 标签插件来实现，在文章中插入链接，并自动给外部链接添加 <code>target=&quot;_blank&quot;</code> 属性。方法如下：</p><pre><code>{% link text url [external] [title] %}</code></pre><ul><li>使用 HTML 语句</li></ul><p>可以在 <code>Markdown</code> 文件或者 <code>HTML</code> 文件中采用下面的写法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://example.com/"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="让-Hexo-忽略编译指定文件或目录"><a href="#让-Hexo-忽略编译指定文件或目录" class="headerlink" title="让 Hexo 忽略编译指定文件或目录"></a>让 Hexo 忽略编译指定文件或目录</h1><blockquote><blockquote><p>写在前面</p></blockquote><p>编辑保存后，一定要执行 <code>Hexo clean</code> 命令，然后再执行 <code>hexo g -d</code> 命令，否则不生效，这个有点坑。😥</p></blockquote><p>Hexo 编译 <code>站点目录</code> 下的 <code>source</code> 目录下的文件。<code>skip_render</code> 参数设置的路径是相对于 <code>source</code> 目录的路径。</p><p>编辑 <code>站点配置文件</code> <code>\blog\_config.yml</code> 的 <code>skip_render:</code> 位置，比如 GitHub 的 reaadme.md、404文件、搜索引擎验证文件等，都不需要 Hexo 进行编译，示例如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">skip_render:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">readme.md</span>     <span class="string">//排除</span> <span class="string">readme.md</span></span><br><span class="line"><span class="bullet">-</span> <span class="number">404.</span><span class="string">html</span>      <span class="string">//排除</span> <span class="number">404.</span><span class="string">html</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">demo/**</span>       <span class="string">//排除</span> <span class="string">/source/demo目录中所有文件</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">demo/*.html</span>   <span class="string">//排除</span> <span class="string">/source/demo目录中所有后缀为</span> <span class="string">html</span> <span class="string">的文件</span></span><br></pre></td></tr></table></figure><h1 id="修改文章内链接文本样式"><a href="#修改文章内链接文本样式" class="headerlink" title="修改文章内链接文本样式"></a>修改文章内链接文本样式</h1><p>将链接文本设置为 <code>蓝色</code>，鼠标划过时文字 <code>颜色加亮</code>，并显示下划线。</p><p>修改文件 <code>themes\next\source\css\_common\components\post\post.styl</code>，添加如下 <code>css</code> 样式：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">// 文章内链接文本样式</span><br><span class="line"><span class="selector-class">.post-body</span> <span class="selector-tag">p</span> <span class="selector-tag">a</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#0593d3</span>;</span><br><span class="line">  <span class="attribute">border-bottom</span>: none;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#0593d3</span>;</span><br><span class="line">  &amp;:hover &#123;</span><br><span class="line">    <span class="selector-tag">color</span>: <span class="selector-id">#fc6423</span>;</span><br><span class="line">    <span class="selector-tag">border-bottom</span>: <span class="selector-tag">none</span>;</span><br><span class="line">    <span class="selector-tag">border-bottom</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#fc6423</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.post-body</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#0593d3</span>;</span><br><span class="line">  <span class="attribute">border-bottom</span>: none;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#0593d3</span>;</span><br><span class="line">  &amp;:hover &#123;</span><br><span class="line">    <span class="selector-tag">color</span>: <span class="selector-id">#fc6423</span>;</span><br><span class="line">    <span class="selector-tag">border-bottom</span>: <span class="selector-tag">none</span>;</span><br><span class="line">    <span class="selector-tag">border-bottom</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#fc6423</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="修改字体"><a href="#修改字体" class="headerlink" title="修改字体"></a>修改字体</h1><p>编辑主题文件 <code>themes\next\source\css\_variables\custom.styl</code>，增加以下内容：</p><pre><code>// 标题，修改成你期望的字体族$font-family-headings = Georgia, sans// 修改成你期望的字体族$font-family-base = &quot;Microsoft YaHei&quot;, Verdana, sans-serif// 代码字体$code-font-family = &quot;Input Mono&quot;, &quot;PT Mono&quot;, Consolas, Georgia, Monaco, Menlo, monospace// 正文字体的大小$font-size-base = 16px// 代码字体的大小$code-font-size = 14px</code></pre><h1 id="修改代码块自定义样式"><a href="#修改代码块自定义样式" class="headerlink" title="修改代码块自定义样式"></a>修改代码块自定义样式</h1><blockquote><p>修改 CSS 样式文件后，基本都要执行 hexo clean 再编译/发布，才能生效。</p></blockquote><p>打开自定义CSS： <code>\themes\next\source\css\_custom\custom.styl</code> 加入以下内容，可根据自己的情况进行调整：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 代码块自定义样式``内的</span><br><span class="line"><span class="selector-tag">code</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fc6423</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#fbf7f8</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">2px</span>;</span><br><span class="line">&#125;</span><br><span class="line">// 大代码块的自定义样式</span><br><span class="line"><span class="selector-class">.highlight</span>, <span class="selector-tag">pre</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">2px</span> <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">2px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="侧边栏嵌入网易云音乐"><a href="#侧边栏嵌入网易云音乐" class="headerlink" title="侧边栏嵌入网易云音乐"></a>侧边栏嵌入网易云音乐</h1><p>修改 \themes\next\layout_custom\sidebar.swig，加入下面代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">frameborder</span>=<span class="string">"no"</span> <span class="attr">border</span>=<span class="string">"0"</span> <span class="attr">marginwidth</span>=<span class="string">"0"</span> <span class="attr">marginheight</span>=<span class="string">"0"</span> <span class="attr">width</span>=<span class="string">330</span> <span class="attr">height</span>=<span class="string">110</span> <span class="attr">src</span>=<span class="string">"//music.163.com/outchain/player?type=0&amp;id=网易云音乐歌单ID&amp;auto=0&amp;height=90"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面的<code>网易云音乐歌单ID</code>改成网易云音乐某个歌单的ID，不是用户ID，<a href="http://music.163.com/#/outchain/0/733122887/" target="_blank" rel="noopener">参考链接</a>。另外，专辑中一定不要有存在版权问题的歌曲，否则不能播放，也即是说，允许用户无条件下载的歌曲才可以。</p><blockquote><blockquote><p>部分内容参考以下博客：</p><ul><li><a href="http://shenzekun.cn/" target="_blank" rel="noopener">Moorez</a></li><li><a href="https://www.maoxuner.cn/" target="_blank" rel="noopener">二次元の技术宅</a></li></ul></blockquote></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Github-Pages-启用-HTTPS&quot;&gt;&lt;a href=&quot;#Github-Pages-启用-HTTPS&quot; class=&quot;headerlink&quot; title=&quot;Github Pages 启用 HTTPS&quot;&gt;&lt;/a&gt;Github Pages 启用 HTTPS&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;GitHub Pages 现在已经免费提供数字证书，在 Github Pages 上创建的个人站点可以免费支持 HTTPS，操作流程如下：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;到 DNS 服务商网站，修改&lt;strong&gt;域名解析&lt;/strong&gt;，删除原来的 A 记录，按照下面格式增加 4 条 A 记录，例如你的域名是 example.com ，效果如下表所示：&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;名称&lt;/th&gt;
&lt;th&gt;值&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;td&gt;example.com&lt;/td&gt;
&lt;td&gt;185.199.108.153&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;td&gt;example.com&lt;/td&gt;
&lt;td&gt;185.199.109.153&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;td&gt;example.com&lt;/td&gt;
&lt;td&gt;185.199.110.153&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;td&gt;example.com&lt;/td&gt;
&lt;td&gt;185.199.111.153&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;blockquote&gt;
&lt;p&gt;IP地址固定统一都是上面所列的4个，具体内容，参见 &lt;a href=&quot;https://help.github.com/articles/setting-up-an-apex-domain/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Setting up an apex domain&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;然后打开 Github ，依次打开个人站点资料库-&amp;gt;’Setting’-&amp;gt;’GitHub Pages’-&amp;gt;’Enforce HTTPS ‘&lt;/li&gt;
&lt;li&gt;如果 &lt;strong&gt;Enforce HTTPS&lt;/strong&gt; 不能点选，等待，正常情况大约24小时不到，&lt;strong&gt;Enforce HTTPS&lt;/strong&gt; 就可以启用了&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;启用 HTTPS 后，如果之前页面中有引用非 https 协议的资源(包括图片、脚本等各种链接资源)，比如 src=”&lt;a href=&quot;http://code.jquery.com/jquery-3.2.1.min.js&amp;quot;&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://code.jquery.com/jquery-3.2.1.min.js&amp;quot;&lt;/a&gt; 这样 http 协议的资源，需要修改为 https 协议 src=”&lt;a href=&quot;https://code.jquery.com/jquery-3.2.1.min.js&amp;quot;&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://code.jquery.com/jquery-3.2.1.min.js&amp;quot;&lt;/a&gt; 就可以正常运行，不会提示不安全。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;npm-安装-hexo-卡住问题解决&quot;&gt;&lt;a href=&quot;#npm-安装-hexo-卡住问题解决&quot; class=&quot;headerlink&quot; title=&quot;npm 安装 hexo 卡住问题解决&quot;&gt;&lt;/a&gt;npm 安装 hexo 卡住问题解决&lt;/h1&gt;&lt;p&gt;用 npm 安装话经常出现卡住而导致无法正常安装，解决办法就是修改 npm 的安装源，这里选择淘宝 NPM 镜像，这是一个完整 npmjs.org 镜像，你可以用此代替官方版本(只读)，同步频率目前为 10分钟 一次以保证尽量与官方服务同步。。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm config set registry https://registry.npm.taobao.org
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;一次解决所有卡顿问题！&lt;/p&gt;
&lt;h1 id=&quot;Next-5-x-升级-6-x&quot;&gt;&lt;a href=&quot;#Next-5-x-升级-6-x&quot; class=&quot;headerlink&quot; title=&quot;Next 5.x 升级 6.x&quot;&gt;&lt;/a&gt;Next 5.x 升级 6.x&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;下载 &lt;a href=&quot;https://github.com/theme-next/hexo-theme-next/releases/latest&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Next 6 主题&lt;/a&gt;，解压缩并重命名为next6，放置于 &lt;code&gt;\themes\&lt;/code&gt; 目录下，这样保留旧版本的 next 主题，可以随时切换回去。&lt;/li&gt;
&lt;li&gt;修改&lt;strong&gt;站点&lt;/strong&gt;配置文件 &lt;code&gt;_config.yml&lt;/code&gt;，指定使用新主题&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Extensions&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;## Plugins: https://hexo.io/plugins/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;## Themes: https://hexo.io/themes/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;theme:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;next6&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;修改主题语言设置&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#language: zh-Hans  # next 5.x&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;language:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;zh-CN&lt;/span&gt;     &lt;span class=&quot;comment&quot;&gt;# next 6&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;修改&lt;strong&gt;主题&lt;/strong&gt;配置文件&lt;code&gt;\themes\next6\_config.yml&lt;/code&gt;，比较旧版本主题配置文件&lt;code&gt;_config.yml&lt;/code&gt;中改动的地方，一一修改到新版本中。&lt;/li&gt;
&lt;li&gt;旧版本主题个性化定制的文件复制到新版本主题对应目录下:&lt;ul&gt;
&lt;li&gt;next/source/css/_custom/*&lt;/li&gt;
&lt;li&gt;next/source/css/_variables/*&lt;/li&gt;
&lt;li&gt;next/layout/_custom/*&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;执行命令:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;hexo clean  # 清理旧文件
hexo d -g   # 重新编译/发布
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;博客文章评论之-Valine&quot;&gt;&lt;a href=&quot;#博客文章评论之-Valine&quot; class=&quot;headerlink&quot; title=&quot;博客文章评论之 Valine&quot;&gt;&lt;/a&gt;博客文章评论之 Valine&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;注册Leancloud，Valine评论系统其实是放在Leancloud上的，因此首先需要去注册一个账号，&lt;a href=&quot;https://leancloud.cn/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Leancloud官网，点我注册&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;注册完以后需要创建一个应用，名字可以随便起，然后 进入应用-&amp;gt;设置-&amp;gt;应用key&lt;/li&gt;
&lt;li&gt;拿到你的appid和appkey之后，打开主题配置文件 搜索 valine，填入appid 和 appkey&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Valine.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# You can get your appid and appkey from https://leancloud.cn&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# more info please open https://valine.js.org&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;valine:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  enable:&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;# When enable is set to be true, leancloud_visitors is recommended to be closed for the re-initialization problem within different leancloud adk version.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  appid:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;xxxxx-xxxx&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;# your leancloud application appid&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  appkey:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;xxxxxxx&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;# your leancloud application appkey&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  notify:&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;# mail notifier , https://github.com/xCss/Valine/wiki&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  verify:&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;# Verification code&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  placeholder:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;Just&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;# comment box placeholder&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  avatar:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;mm&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;# gravatar style&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  guest_info:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;nick,mail,link&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;# custom comment header&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  pageSize:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;# pagination size&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  visitor:&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;# leancloud-counter-security is not supported for now.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;最后！记得在Leancloud -&amp;gt; 设置 -&amp;gt; 安全中心 -&amp;gt; Web 安全域名 把你的域名加进去，带 http 或者 https 前缀。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;5-x版本-Pisces-主题页面留白太多问题&quot;&gt;&lt;a href=&quot;#5-x版本-Pisces-主题页面留白太多问题&quot; class=&quot;headerlink&quot; title=&quot;5.x版本 Pisces 主题页面留白太多问题&quot;&gt;&lt;/a&gt;5.x版本 Pisces 主题页面留白太多问题&lt;/h1&gt;&lt;p&gt;修改 &lt;code&gt;\themes\next\source\css\_schemes\Pisces\_layout.styl&lt;/code&gt; 文件中下面的字段内容：&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.header&lt;/span&gt;&amp;#123; &lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;80%&lt;/span&gt;; &amp;#125; &lt;span class=&quot;comment&quot;&gt;/* 80% */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.container&lt;/span&gt; &lt;span class=&quot;selector-class&quot;&gt;.main-inner&lt;/span&gt; &amp;#123; &lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;80%&lt;/span&gt;; &amp;#125; &lt;span class=&quot;comment&quot;&gt;/* 80% */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.content-wrap&lt;/span&gt; &amp;#123; &lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;calc&lt;/span&gt;(100% - 260px); &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;完整文件参见 &lt;a href=&quot;https://github.com/xiao-fang/xiao-fang.github.io/blob/3a95f3919a90bf56738016f9eb8a59e5bfab4a22/themes/next/source/css/_schemes/Pisces/_layout.styl&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;这个地址&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Hexo" scheme="https://at2008.github.io/tags/Hexo/"/>
    
      <category term="Next 主题" scheme="https://at2008.github.io/tags/Next-%E4%B8%BB%E9%A2%98/"/>
    
      <category term="Next 升级" scheme="https://at2008.github.io/tags/Next-%E5%8D%87%E7%BA%A7/"/>
    
      <category term="Github Pages" scheme="https://at2008.github.io/tags/Github-Pages/"/>
    
      <category term="HTTPS" scheme="https://at2008.github.io/tags/HTTPS/"/>
    
      <category term="npm" scheme="https://at2008.github.io/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>C#本质论笔记 第3章 操作符和控制流</title>
    <link href="https://at2008.github.io/2017/12/17/CSharp%E6%9C%AC%E8%B4%A8%E8%AE%BA%E7%AC%94%E8%AE%B0-%E7%AC%AC3%E7%AB%A0-%E6%93%8D%E4%BD%9C%E7%AC%A6%E5%92%8C%E6%8E%A7%E5%88%B6%E6%B5%81/"/>
    <id>https://at2008.github.io/2017/12/17/CSharp本质论笔记-第3章-操作符和控制流/</id>
    <published>2017-12-16T17:05:16.000Z</published>
    <updated>2018-08-03T13:46:10.788Z</updated>
    
    <content type="html"><![CDATA[<h1 id="操作符-Operators"><a href="#操作符-Operators" class="headerlink" title="操作符 Operators"></a>操作符 Operators</h1><p>操作符，也叫<strong>运算符</strong>，英文：<strong>Operrators</strong>，见 Microsoft Docs <a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/operators/index/" target="_blank" rel="noopener">C# 运算符</a>。</p><table><thead><tr><th>名称</th><th>含义</th><th>例子</th></tr></thead><tbody><tr><td>一元运算符</td><td>接受一个操作数的运算符</td><td>++ 或 new</td></tr><tr><td>二元运算符</td><td>接受两个操作数的运算符</td><td>+ - * /</td></tr><tr><td>三元运算符</td><td>接受三个操作数，C#中唯一的条件运算符</td><td>?:</td></tr></tbody></table><a id="more"></a><h2 id="一元操作符"><a href="#一元操作符" class="headerlink" title="一元操作符"></a>一元操作符</h2><table><thead><tr><th>表达式</th><th>描述</th><th>说明</th></tr></thead><tbody><tr><td>+x</td><td>标识</td><td>+5 ，正号，无意义，出于对 <code>-</code> 操作符的对称才加进来的</td></tr><tr><td>-x</td><td>求反</td><td>-5 ，负号，等价于从零减去操作数</td></tr><tr><td>!</td><td>逻辑求反</td><td>它针对 bool 定义，当且仅当其操作数为 false 时返回 true。</td></tr><tr><td>~x</td><td>按位求反</td><td>影响操作数的每一个位(bit)</td></tr><tr><td>++x</td><td>前递增</td><td>操作的结果是操作数递增<code>后</code>的值。</td></tr><tr><td>x++</td><td>后递增</td><td>操作的结果是操作数递增<code>前</code>的值。</td></tr><tr><td><code>--x</code></td><td>前递减</td><td>操作的结果是操作数递减<code>后</code>的值。</td></tr><tr><td><code>x--</code></td><td>后递减</td><td>操作的结果是操作数递减<code>前</code>的值。</td></tr><tr><td>(T)x</td><td>将 x 显式转换为类型 T</td><td>指定强制转换或类型转换。</td></tr></tbody></table><h2 id="递增和递减操作符"><a href="#递增和递减操作符" class="headerlink" title="递增和递减操作符 ++ --"></a>递增和递减操作符 <code>++</code> <code>--</code></h2><p><strong>递增运算符</strong>（Post-Increment）<code>++</code> 按 1 递增其操作数。 递增运算符可以在其操作数之前或之后出现： ++variable 和 variable++。第一种形式是前缀递增操作。 操作的结果是操作数递增<strong>后</strong>的值。 第二种形式是后缀递增操作。 操作的结果是操作数递增<strong>前</strong>的值。</p><p><strong>递减运算符</strong> (Post-Decrement） <code>--</code> 按 1 递减其操作数。 减量运算符可以在其操作数之前或之后出现：–variable 和 variable–。  第一种形式是前缀递减操作。 操作的结果是操作数递减<strong>后</strong>的值。 第二种形式是后缀递减操作。 操作的结果是操作数递减<strong>前</strong>的值。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> x = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">int</span> y = <span class="number">123</span>;</span><br><span class="line"><span class="comment">// 输出 123,124,125</span></span><br><span class="line">System.Console.WriteLine (<span class="string">"&#123;0&#125;,&#123;1&#125;,&#123;2&#125;"</span>, x++, x++, x);</span><br><span class="line"><span class="comment">// 输出 124,125,125</span></span><br><span class="line">System.Console.WriteLine (<span class="string">"&#123;0&#125;,&#123;1&#125;,&#123;2&#125;"</span>, ++y, ++y, y);</span><br></pre></td></tr></table></figure><h1 id="选择语句"><a href="#选择语句" class="headerlink" title="选择语句"></a>选择语句</h1><h2 id="if-else"><a href="#if-else" class="headerlink" title="if-else"></a>if-else</h2><blockquote><p>下列中，如果 m &gt; 10 不成立，后面代码全部不执行</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Try with m = 12 and then with m = 8.</span></span><br><span class="line"><span class="keyword">int</span> m = <span class="number">12</span>;</span><br><span class="line"><span class="keyword">int</span> n = <span class="number">18</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (m &gt; <span class="number">10</span>)</span><br><span class="line">    <span class="keyword">if</span> (n &gt; <span class="number">20</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">"Result1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">"Result2"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>下列中，如果 m &gt; 10 不成立，则执行 else 部分代码</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Try with m = 12 and then with m = 8.</span></span><br><span class="line"><span class="keyword">int</span> m = <span class="number">12</span>;</span><br><span class="line"><span class="keyword">int</span> n = <span class="number">18</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Try with m = 12 and then with m = 8.</span></span><br><span class="line"><span class="keyword">if</span> (m &gt; <span class="number">10</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &gt; <span class="number">20</span>)</span><br><span class="line">        Console.WriteLine(<span class="string">"Result1"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">"Result2"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>可以将 if 语句嵌套到 else 块中，如以下部分代码所示。</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Change the values of these variables to test the results.</span></span><br><span class="line"><span class="keyword">bool</span> Condition1 = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">bool</span> Condition2 = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">bool</span> Condition3 = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">bool</span> Condition4 = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (Condition1)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Condition1 is true.</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (Condition2)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Condition1 is false and Condition2 is true.</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (Condition3)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (Condition4)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Condition1 and Condition2 are false. Condition3 and Condition4 are true.</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Condition1, Condition2, and Condition4 are false. Condition3 is true.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Condition1, Condition2, and Condition3 are false.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h2><p>针对 3 个或更多条件测试单个表达式，switch 语句通常用作 if-else 结构的替代项。</p><blockquote><blockquote><p>示例</p></blockquote></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Example</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      <span class="keyword">int</span> caseSwitch = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">switch</span> (caseSwitch)</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">              Console.WriteLine(<span class="string">"Case 1"</span>);</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">              Console.WriteLine(<span class="string">"Case 2"</span>);</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">default</span>:</span><br><span class="line">              Console.WriteLine(<span class="string">"Default case"</span>);</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// The example displays the following output:</span></span><br><span class="line"><span class="comment">//       Case 1</span></span><br></pre></td></tr></table></figure><h3 id="开关部分"><a href="#开关部分" class="headerlink" title="开关部分"></a>开关部分</h3><p>C# 不允许从一个开关部分继续执行到下一个开关部分。 因此，以下代码将生成编译器错误。</p><blockquote><p>error CS0163: 控制不能从一个 case 标签(“case 1:”)贯穿到另一个 case 标<br>签</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (caseSwitch)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// The following switch section causes an error.</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        Console.WriteLine(<span class="string">"Case 1..."</span>);</span><br><span class="line">        <span class="comment">// Add a break or other jump statement here.</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        Console.WriteLine(<span class="string">"... and/or Case 2"</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="default-case"><a href="#default-case" class="headerlink" title="default case"></a>default case</h3><p>default case 可以在 switch 语句中<strong>以任何顺序显示</strong>。 无论其在源代码中的顺序如何，都将在对所有 case 标签进行计算之后，<strong>最后对其进行计算</strong>。</p><h3 id="匹配表达式"><a href="#匹配表达式" class="headerlink" title="匹配表达式"></a>匹配表达式</h3><p>匹配表达式提供与 case 标签中的模式相匹配的值。 语法为：</p><pre><code>switch (expr)</code></pre><p>在 C# 6 中，匹配表达式必须是返回以下类型值的表达式：</p><ul><li><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/char/" target="_blank" rel="noopener">字符型</a>。</li><li><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/string/" target="_blank" rel="noopener">字符串</a>。</li><li><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/bool/" target="_blank" rel="noopener">bool</a>。</li><li>整数值，例如 int 或 long。</li><li><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/enum/" target="_blank" rel="noopener">枚举</a>值。</li></ul><p>从 <strong>C# 7</strong> 开始，匹配表达式可以是任何非 null 表达式。</p><h3 id="switch-语句的-模式匹配"><a href="#switch-语句的-模式匹配" class="headerlink" title="switch 语句的 模式匹配"></a>switch 语句的 模式匹配</h3><p>每个 case 语句定义一个模式，如果它与匹配表达式相匹配，则会导致执行其包含的开关部分。 所有版本的 C# 都支持<strong>常量模式</strong>。 其余模式从 <strong>C# 7</strong> 开始支持。</p><h4 id="常量模式"><a href="#常量模式" class="headerlink" title="常量模式"></a>常量模式</h4><p>常量模式测试匹配表达式是否等于指定常量。 语法为：</p><pre><code>case constant:</code></pre><p>其中 constant 是要测试的值。 constant 可以是以下任何常数表达式：</p><ul><li>bool 文本，为 true 或 false。</li><li>任何整数常量，例如 int、long 或字节。</li><li>已声明 const 变量的名称。</li><li>一个枚举常量。</li><li><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/char/" target="_blank" rel="noopener">字符型</a>文本。</li><li><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/string/" target="_blank" rel="noopener">字符串</a>文本。</li></ul><blockquote><blockquote><p>示例</p></blockquote><p>使用常量模式来确定特定日期是否为周末、工作周的第一天、工作周的最后一天或工作周的中间日期。 它根据 DayOfWeek 枚举的成员计算当前日期的 DateTime.DayOfWeek 属性。</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (DateTime.Now.DayOfWeek)</span><br><span class="line">        &#123;</span><br><span class="line">           <span class="keyword">case</span> DayOfWeek.Sunday:</span><br><span class="line">           <span class="keyword">case</span> DayOfWeek.Saturday:</span><br><span class="line">              Console.WriteLine(<span class="string">"The weekend"</span>);</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">           <span class="keyword">case</span> DayOfWeek.Monday:</span><br><span class="line">              Console.WriteLine(<span class="string">"The first day of the work week."</span>);</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">           <span class="keyword">case</span> DayOfWeek.Friday:</span><br><span class="line">              Console.WriteLine(<span class="string">"The last day of the work week."</span>);</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">           <span class="keyword">default</span>:</span><br><span class="line">              Console.WriteLine(<span class="string">"The middle of the work week."</span>);</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// The example displays output like the following:</span></span><br><span class="line"><span class="comment">//       The middle of the work week.</span></span><br></pre></td></tr></table></figure><h4 id="类型模式"><a href="#类型模式" class="headerlink" title="类型模式"></a>类型模式</h4><p>类型模式可启用简洁类型计算和转换。 使用 switch 语句执行模式匹配时，会测试表达式是否可转换为指定类型，如果可以，则将其转换为该类型的一个变量。 语法为：</p><pre><code>case type varname</code></pre><blockquote><blockquote><p>示例</p></blockquote><p>使用类型模式来提供有关各种集合类型的信息。</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Example</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] values = &#123; <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span> &#125;;</span><br><span class="line">        ShowCollectionInformation(values);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> names = <span class="keyword">new</span> List&lt;<span class="keyword">string</span>&gt;();</span><br><span class="line">        names.AddRange( <span class="keyword">new</span> <span class="keyword">string</span>[] &#123; <span class="string">"Adam"</span>, <span class="string">"Abigail"</span>, <span class="string">"Bertrand"</span>, <span class="string">"Bridgette"</span> &#125; );</span><br><span class="line">        ShowCollectionInformation(names);</span><br><span class="line"></span><br><span class="line">        List&lt;<span class="keyword">int</span>&gt; numbers = <span class="literal">null</span>;</span><br><span class="line">        ShowCollectionInformation(numbers);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ShowCollectionInformation</span>(<span class="params"><span class="keyword">object</span> coll</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (coll)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> Array arr:</span><br><span class="line">               Console.WriteLine(<span class="string">$"An array with <span class="subst">&#123;arr.Length&#125;</span> elements."</span>);</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> IEnumerable&lt;<span class="keyword">int</span>&gt; ieInt:</span><br><span class="line">               Console.WriteLine(<span class="string">$"Average: <span class="subst">&#123;ieInt.Average(s =&gt; s)&#125;</span>"</span>);</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> IList list:</span><br><span class="line">               Console.WriteLine(<span class="string">$"<span class="subst">&#123;list.Count&#125;</span> items"</span>);</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> IEnumerable ie:</span><br><span class="line">               <span class="keyword">string</span> result = <span class="string">""</span>;</span><br><span class="line">               <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> ie)</span><br><span class="line">                  result += <span class="string">"$&#123;e&#125; "</span>;</span><br><span class="line">               Console.WriteLine(result);</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="literal">null</span>:</span><br><span class="line">               <span class="comment">// Do nothing for a null.</span></span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">               Console.WriteLine(<span class="string">$"A instance of type <span class="subst">&#123;coll.GetType().Name&#125;</span>"</span>);</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// The example displays the following output:</span></span><br><span class="line"><span class="comment">//     An array with 5 elements.</span></span><br><span class="line"><span class="comment">//     4 items</span></span><br></pre></td></tr></table></figure><h3 id="case-语句和-when-子句"><a href="#case-语句和-when-子句" class="headerlink" title="case 语句和 when 子句"></a>case 语句和 when 子句</h3><p>从 C# 7 开始，因为 case 语句不需要互相排斥，因此可以添加 when 子句来指定必须满足的附加条件使 case 语句计算为 true。 when 子句可以是返回布尔值的任何表达式。 when 子句的更常见用法之一是防止在匹配表达式的值为 null 时执行开关部分。</p><p>据提参见 Microsoft Docs : <a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/switch#the-case-statement-and-the-when-clause" target="_blank" rel="noopener">swittch 关键字 -&gt; case 语句和 when 子句</a></p><h3 id="高级主题：switch-case-和-枚举值"><a href="#高级主题：switch-case-和-枚举值" class="headerlink" title="高级主题：switch case 和 枚举值"></a>高级主题：switch case 和 枚举值</h3><blockquote><p>直接利用枚举值例子</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">EnumSwitchCase</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">enum</span> Days &#123; Sunday = <span class="number">6</span>, Monday = <span class="number">3</span>, Tuesday, Wednesday, Thursday, Friday, Saturday &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Days Day = Days.Tuesday;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (Day)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> Days.Sunday:</span><br><span class="line">                Console.WriteLine(Days.Sunday);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> Days.Monday:</span><br><span class="line">                Console.WriteLine(Days.Monday);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> Days.Tuesday:</span><br><span class="line">                Console.WriteLine(Days.Tuesday);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Console.ReadKey();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 输出</span></span><br><span class="line"><span class="comment">Tuesday</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><blockquote><p>枚举值显式显式转换例子</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">EnumTest</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">enum</span> Day &#123; Sunday = <span class="number">6</span>, Monday = <span class="number">3</span>, Tuesday, Wednesday, Thursday, Friday, Saturday &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> ienum = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (ienum)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> (<span class="keyword">int</span>)Day.Sunday:</span><br><span class="line">                Console.WriteLine(Day.Sunday);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> (<span class="keyword">int</span>)Day.Monday:</span><br><span class="line">                Console.WriteLine(Day.Monday);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> (<span class="keyword">int</span>)Day.Tuesday:</span><br><span class="line">                Console.WriteLine(Day.Tuesday);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Console.ReadKey();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 输出</span></span><br><span class="line"><span class="comment">Tuesday</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h1 id="迭代语句"><a href="#迭代语句" class="headerlink" title="迭代语句"></a>迭代语句</h1><h2 id="do"><a href="#do" class="headerlink" title="do"></a>do</h2><p>do 语句重复执行一个语句或语句块，直到指定的表达式计算为 false 值。 循环体必须括在大括号 {} 内，除非它由单个语句组成。 在这种情况下，大括号是可选的。</p><blockquote><p>在下面的示例中，只要变量 x 小于 5，do-while 循环语句就开始执行。</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TestDoWhile</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span> (<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(x);</span><br><span class="line">            x++;</span><br><span class="line">        &#125; <span class="keyword">while</span> (x &lt; <span class="number">5</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    Output:</span></span><br><span class="line"><span class="comment">    0</span></span><br><span class="line"><span class="comment">    1</span></span><br><span class="line"><span class="comment">    2</span></span><br><span class="line"><span class="comment">    3</span></span><br><span class="line"><span class="comment">    4</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><blockquote><p>与 while 语句不同的是，do-while 循环会在计算条件表达式之前执行一次。</p><p>在 do-while 块中的任何点，都可使用 ==break== 语句跳出循环。 可通过使用 ==continue== 语句直接步入 while 表达式计算语句。 如果 while 表达式计算结果为 true，则继续执行循环中的第一个语句。 如果表达式的计算结果为 false，则继续执行 do-while 循环后的第一个语句。</p><p>do-while 循环还可以通过 goto、return 或 throw 语句退出。</p></blockquote><h2 id="while"><a href="#while" class="headerlink" title="while"></a>while</h2><p>while 语句执行一条语句或一个语句块，直到指定的表达式的计算结果为 false 为止。</p><blockquote><p>示例</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">WhileTest</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (n &lt; <span class="number">6</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">"Current value of n is &#123;0&#125;"</span>, n);</span><br><span class="line">            n++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    Output:</span></span><br><span class="line"><span class="comment">    Current value of n is 1</span></span><br><span class="line"><span class="comment">    Current value of n is 2</span></span><br><span class="line"><span class="comment">    Current value of n is 3</span></span><br><span class="line"><span class="comment">    Current value of n is 4</span></span><br><span class="line"><span class="comment">    Current value of n is 5</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><blockquote><p>因为 while 表达式的测试在每次执行循环之前开始，所以 while 循环执行零次或多次。 这不同于 do 循环，该循环执行一次或多次。</p><p>break、goto、return 或 throw 语句将控制转移到循环外时，while 循环可能终止。 若要将控制传递到下一个迭代，而不退出循环，则使用 continue 语句。</p></blockquote><h2 id="for"><a href="#for" class="headerlink" title="for"></a>for</h2><p>使用 for 循环，可以重复运行一个语句或语句块，直到指定的表达式的计算结果为 false 为止。 这种类型的循环可用于循环==访问数组==，以及==事先知道==循环要在其中进行==循环访问的次数==的其他应用程序。</p><blockquote><p>在下面的示例中，i 的值被写入控制台，并在循环的每次迭代过程中递增 1。</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">ForLoopTest</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Output:</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">4</span></span><br><span class="line"><span class="comment">5</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><blockquote><p>因为 while 表达式的测试在每次执行循环之前开始，所以 while 循环执行零次或多次。 这不同于 do 循环，该循环执行一次或多次。</p><p>break、goto、return 或 throw 语句将控制转移到循环外时，while 循环可能终止。 若要将控制传递到下一个迭代，而不退出循环，则使用 continue 语句。</p><p>下面的示例阐释了几种不太常见的选择：为初始化表达式部分中的外部循环变量赋值、同时在初始化表达式部分和迭代器部分中调用 Console.WriteLine 方法，以及更改迭代器部分中的两个变量的值。</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line">     <span class="keyword">int</span> i;</span><br><span class="line">     <span class="keyword">int</span> j = <span class="number">10</span>;</span><br><span class="line">     <span class="keyword">for</span> (i = <span class="number">0</span>, Console.WriteLine(<span class="string">"Start: &#123;0&#125;"</span>,i); i &lt; j; i++, j--, Console.WriteLine(<span class="string">"i=&#123;0&#125;, j=&#123;1&#125;"</span>, i, j))</span><br><span class="line">     &#123;</span><br><span class="line">         <span class="comment">// Body of the loop.</span></span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">// Output:</span></span><br><span class="line"> <span class="comment">// Start: 0</span></span><br><span class="line"> <span class="comment">// i=1, j=9</span></span><br><span class="line"> <span class="comment">// i=2, j=8</span></span><br><span class="line"> <span class="comment">// i=3, j=7</span></span><br><span class="line"> <span class="comment">// i=4, j=6</span></span><br><span class="line"> <span class="comment">// i=5, j=5</span></span><br></pre></td></tr></table></figure><blockquote><p>定义 for 语句的所有表达式都是可选的。 例如，以下语句创建一个无限循环。</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (; ; )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="foreach-in"><a href="#foreach-in" class="headerlink" title="foreach in"></a>foreach in</h2><p>foreach 语句针对实现 System.Collections.IEnumerable 或 System.Collections.Generic.IEnumerable<t> 接口的数组或集合中的每个元素重复一组嵌入语句。</t></p><p>在 foreach 块中的任何点上，可以使用 break 中断关键字中断该循环，或者可以使用 continue 继续关键字单步执行到循环中的下一次迭代。</p><ul><li>显示整数数组内容的典型 foreach 循环</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] fibarray = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">13</span> &#125;;</span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">int</span> element <span class="keyword">in</span> fibarray)</span><br><span class="line">&#123;</span><br><span class="line">    System.Console.WriteLine(element);</span><br><span class="line">&#125;</span><br><span class="line">System.Console.WriteLine();</span><br><span class="line"><span class="comment">// Output:</span></span><br><span class="line"><span class="comment">// 0</span></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"><span class="comment">// 5</span></span><br><span class="line"><span class="comment">// 8</span></span><br><span class="line"><span class="comment">// 13</span></span><br></pre></td></tr></table></figure><ul><li>执行相同操作的 for 循环</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] fibarray = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">13</span> &#125;;</span><br><span class="line"><span class="comment">// Compare the previous loop to a similar for loop.</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; fibarray.Length; i++)</span><br><span class="line">&#123;</span><br><span class="line">    System.Console.WriteLine(fibarray[i]);</span><br><span class="line">&#125;</span><br><span class="line">System.Console.WriteLine();</span><br><span class="line"><span class="comment">// Output:</span></span><br><span class="line"><span class="comment">// 0</span></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"><span class="comment">// 5</span></span><br><span class="line"><span class="comment">// 8</span></span><br><span class="line"><span class="comment">// 13</span></span><br></pre></td></tr></table></figure><ul><li>维护数组中元素数计数的 foreach 循环</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] fibarray = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">13</span> &#125;;</span><br><span class="line"><span class="comment">// You can maintain a count of the elements in the collection.</span></span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">int</span> element <span class="keyword">in</span> fibarray)</span><br><span class="line">&#123;</span><br><span class="line">    count += <span class="number">1</span>;</span><br><span class="line">    System.Console.WriteLine(<span class="string">"Element #&#123;0&#125;: &#123;1&#125;"</span>, count, element);</span><br><span class="line">&#125;</span><br><span class="line">System.Console.WriteLine(<span class="string">"Number of elements in the array: &#123;0&#125;"</span>, count);</span><br><span class="line"><span class="comment">// Output:</span></span><br><span class="line"><span class="comment">// Element #1: 0</span></span><br><span class="line"><span class="comment">// Element #2: 1</span></span><br><span class="line"><span class="comment">// Element #3: 1</span></span><br><span class="line"><span class="comment">// Element #4: 2</span></span><br><span class="line"><span class="comment">// Element #5: 3</span></span><br><span class="line"><span class="comment">// Element #6: 5</span></span><br><span class="line"><span class="comment">// Element #7: 8</span></span><br><span class="line"><span class="comment">// Element #8: 13</span></span><br><span class="line"><span class="comment">// Number of elements in the array: 8</span></span><br></pre></td></tr></table></figure><blockquote><p>因为 while 表达式的测试在每次执行循环之前开始，所以 while 循环执行零次或多次。 这不同于 do 循环，该循环执行一次或多次。</p></blockquote><h1 id="跳转语句"><a href="#跳转语句" class="headerlink" title="跳转语句"></a>跳转语句</h1><p>使用跳转语句执行分支，这将立即转移程序控制。 事实上，可以用跳转语句退出循环，或者跳过以此循环的剩余部分并开始下一次循环–即使当前循环条件仍然为true。跳转语句中使用下列关键字：</p><ul><li>break</li><li>continue</li><li>goto</li><li>return</li></ul><h2 id="break"><a href="#break" class="headerlink" title="break"></a>break</h2><p>C#使用brek语句退出循环或者switch语句。任何时候遇到break语句，控制都会立即离开循环或者switch。</p><p>break 语句将终止其所在位置的最接近封闭循环或 switch 语句。 控制权将传递给已终止语句后面的语句（若有）。</p><blockquote><blockquote><p>示例</p></blockquote><p>在此示例中，条件语句包含一个应从 1 计数到 100 的计数器；但 break 语句在计数器计数到 4 后终止了循环。</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">BreakTest</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">5</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            Console.WriteLine(i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Keep the console open in debug mode.</span></span><br><span class="line">        Console.WriteLine(<span class="string">"Press any key to exit."</span>);</span><br><span class="line">        Console.ReadKey();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> Output:</span></span><br><span class="line"><span class="comment">    1</span></span><br><span class="line"><span class="comment">    2</span></span><br><span class="line"><span class="comment">    3</span></span><br><span class="line"><span class="comment">    4</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><blockquote><blockquote><p>示例</p></blockquote><p>在此示例中，break 语句用于中断内层嵌套循环，并将控制权返回给外层循环。</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">BreakInNestedLoops</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] numbers = &#123; <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span> &#125;;</span><br><span class="line">        <span class="keyword">char</span>[] letters = &#123; <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>, <span class="string">'g'</span>, <span class="string">'h'</span>, <span class="string">'i'</span>, <span class="string">'j'</span> &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Outer loop</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; numbers.Length; x++)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">"num = &#123;0&#125;"</span>, numbers[x]);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Inner loop</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; letters.Length; y++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (y == x)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// Return control to outer loop</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                Console.Write(<span class="string">" &#123;0&#125; "</span>, letters[y]);</span><br><span class="line">            &#125;</span><br><span class="line">            Console.WriteLine();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Keep the console open in debug mode.</span></span><br><span class="line">        Console.WriteLine(<span class="string">"Press any key to exit."</span>);</span><br><span class="line">        Console.ReadKey();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Output:</span></span><br><span class="line"><span class="comment">    num = 0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    num = 1</span></span><br><span class="line"><span class="comment">     a</span></span><br><span class="line"><span class="comment">    num = 2</span></span><br><span class="line"><span class="comment">     a  b</span></span><br><span class="line"><span class="comment">    num = 3</span></span><br><span class="line"><span class="comment">     a  b  c</span></span><br><span class="line"><span class="comment">    num = 4</span></span><br><span class="line"><span class="comment">     a  b  c  d</span></span><br><span class="line"><span class="comment">    num = 5</span></span><br><span class="line"><span class="comment">     a  b  c  d  e</span></span><br><span class="line"><span class="comment">    num = 6</span></span><br><span class="line"><span class="comment">     a  b  c  d  e  f</span></span><br><span class="line"><span class="comment">    num = 7</span></span><br><span class="line"><span class="comment">     a  b  c  d  e  f  g</span></span><br><span class="line"><span class="comment">    num = 8</span></span><br><span class="line"><span class="comment">     a  b  c  d  e  f  g  h</span></span><br><span class="line"><span class="comment">    num = 9</span></span><br><span class="line"><span class="comment">     a  b  c  d  e  f  g  h  i</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h2 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h2><p>continue 语句将控制传递到其中出现的封闭 while、do、for 或 foreach 语句的下一次迭代。如果循环条件仍然为 true，循环将继续执行。</p><blockquote><blockquote><p>示例</p></blockquote><p>在本示例中，计数器最初是从 1 到 10 进行计数。 通过结合使用 continue 语句和表达式 (i &lt; 9)，跳过 continue 和 for 主体末尾之间的语句。</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">ContinueTest</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &lt; <span class="number">9</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            Console.WriteLine(i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Keep the console open in debug mode.</span></span><br><span class="line">        Console.WriteLine(<span class="string">"Press any key to exit."</span>);</span><br><span class="line">        Console.ReadKey();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Output:</span></span><br><span class="line"><span class="comment">9</span></span><br><span class="line"><span class="comment">10</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="goto"><a href="#goto" class="headerlink" title="goto"></a>goto</h2><p>C# 确实支持 goto ，并且，<strong>不仅仅</strong>可以用在 switch 语句中。</p><ul><li>goto 语句将程序控制直接传递给标记语句。</li><li>goto 的一个通常用法是将控制传递给特定的 switch-case 标签或 switch 语句中的默认标签。</li><li>goto 语句还用于跳出深嵌套循环。</li></ul><blockquote><blockquote><p>示例</p></blockquote><p>下面的示例演示了 goto 在 switch 语句中的使用。</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">SwitchTest</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Console.WriteLine(<span class="string">"Coffee sizes: 1=Small 2=Medium 3=Large"</span>);</span><br><span class="line">        Console.Write(<span class="string">"Please enter your selection: "</span>);</span><br><span class="line">        <span class="keyword">string</span> s = Console.ReadLine();</span><br><span class="line">        <span class="keyword">int</span> n = <span class="keyword">int</span>.Parse(s);</span><br><span class="line">        <span class="keyword">int</span> cost = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">switch</span> (n)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                cost += <span class="number">25</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                cost += <span class="number">25</span>;</span><br><span class="line">                <span class="keyword">goto</span> <span class="keyword">case</span> <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                cost += <span class="number">50</span>;</span><br><span class="line">                <span class="keyword">goto</span> <span class="keyword">case</span> <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                Console.WriteLine(<span class="string">"Invalid selection."</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (cost != <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">"Please insert &#123;0&#125; cents."</span>, cost);</span><br><span class="line">        &#125;</span><br><span class="line">        Console.WriteLine(<span class="string">"Thank you for your business."</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Keep the console open in debug mode.</span></span><br><span class="line">        Console.WriteLine(<span class="string">"Press any key to exit."</span>);</span><br><span class="line">        Console.ReadKey();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Sample Input:  2</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Sample Output:</span></span><br><span class="line"><span class="comment">Coffee sizes: 1=Small 2=Medium 3=Large</span></span><br><span class="line"><span class="comment">Please enter your selection: 2</span></span><br><span class="line"><span class="comment">Please insert 50 cents.</span></span><br><span class="line"><span class="comment">Thank you for your business.</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><blockquote><blockquote><p>示例</p></blockquote><p>下面的示例演示了使用 goto 跳出嵌套循环。</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">GotoTest1</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">200</span>, y = <span class="number">4</span>;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">string</span>[,] array = <span class="keyword">new</span> <span class="keyword">string</span>[x, y];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Initialize the array:</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; x; i++)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; y; j++)</span><br><span class="line">                array[i, j] = (++count).ToString();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Read input:</span></span><br><span class="line">        Console.Write(<span class="string">"Enter the number to search for: "</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Input a string:</span></span><br><span class="line">        <span class="keyword">string</span> myNumber = Console.ReadLine();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Search:</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; x; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; y; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (array[i, j].Equals(myNumber))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">goto</span> Found;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Console.WriteLine(<span class="string">"The number &#123;0&#125; was not found."</span>, myNumber);</span><br><span class="line">        <span class="keyword">goto</span> Finish;</span><br><span class="line"></span><br><span class="line">    Found:</span><br><span class="line">        Console.WriteLine(<span class="string">"The number &#123;0&#125; is found."</span>, myNumber);</span><br><span class="line"></span><br><span class="line">    Finish:</span><br><span class="line">        Console.WriteLine(<span class="string">"End of search."</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Keep the console open in debug mode.</span></span><br><span class="line">        Console.WriteLine(<span class="string">"Press any key to exit."</span>);</span><br><span class="line">        Console.ReadKey();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Sample Input: 44</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Sample Output</span></span><br><span class="line"><span class="comment">Enter the number to search for: 44</span></span><br><span class="line"><span class="comment">The number 44 is found.</span></span><br><span class="line"><span class="comment">End of search.</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="return"><a href="#return" class="headerlink" title="return"></a>return</h2><p>return 语句可终止它所在的方法的执行，并将控制权返回给调用方法。 它还可以返回可选值。 如果方法是 <strong>void</strong> 类型，则 return 语句可以<strong>省略</strong>。</p><blockquote><blockquote><p>示例</p></blockquote><p>在下面的示例中，该方法CalculateArea()返回局部变量area作为double值</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">ReturnTest</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">double</span> <span class="title">CalculateArea</span>(<span class="params"><span class="keyword">int</span> r</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> area = r * r * Math.PI;</span><br><span class="line">        <span class="keyword">return</span> area;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> radius = <span class="number">5</span>;</span><br><span class="line">        <span class="keyword">double</span> result = CalculateArea(radius);</span><br><span class="line">        Console.WriteLine(<span class="string">"The area is &#123;0:0.00&#125;"</span>, result);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Keep the console open in debug mode.</span></span><br><span class="line">        Console.WriteLine(<span class="string">"Press any key to exit."</span>);</span><br><span class="line">        Console.ReadKey();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Output: The area is 78.54</span></span><br></pre></td></tr></table></figure><h1 id="C-预处理指令"><a href="#C-预处理指令" class="headerlink" title="C# 预处理指令"></a>C# 预处理指令</h1><p>控制流语句中的表达式是在运行时求值。相反，C#预处理器在编译时调用。</p><h2 id="define-和-undef"><a href="#define-和-undef" class="headerlink" title="#define 和 #undef"></a>#define 和 #undef</h2><p>使用 #define 来定义符号。 将符号用作传递给 #if 指令的表达式时，该表达式的计算结果为 <strong>true</strong>，如以下示例所示：</p><pre><code>#define DEBUG</code></pre><p>还可以通过 /define 编译器选项来定义符号。 可以通过 #undef 取消定义符号。</p><ul><li>#undef 允许你定义一个符号，这样一来，通过将该符号用作 #if 指令中的表达式，表达式将计算为 <strong>false</strong>。</li></ul><h2 id="if-elif-else-和-endif"><a href="#if-elif-else-和-endif" class="headerlink" title="#if, #elif, #else, 和 #endif"></a>#if, #elif, #else, 和 #endif</h2><p>以 #if 指令开头的条件指令必须以 #endif 指令显式终止</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// preprocessor_if.cs</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DEBUG</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MYTEST</span></span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyClass</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> (DEBUG &amp;&amp; !MYTEST)</span></span><br><span class="line">        Console.WriteLine(<span class="string">"DEBUG is defined"</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">elif</span> (!DEBUG &amp;&amp; MYTEST)</span></span><br><span class="line">        Console.WriteLine(<span class="string">"MYTEST is defined"</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">elif</span> (DEBUG &amp;&amp; MYTEST)</span></span><br><span class="line">        Console.WriteLine(<span class="string">"DEBUG and MYTEST are defined"</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">        Console.WriteLine(<span class="string">"DEBUG and MYTEST are not defined"</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="warning-和-error"><a href="#warning-和-error" class="headerlink" title="#warning 和 #error"></a>#warning 和 #error</h2><ul><li>#warning 可从代码中的特定位置生成一个级别的警告。</li><li>#error 可从代码中的特定位置生成错误。</li><li>编译器遇到 #warning 指令，会显示 #warning 指令后面的文本，然后<strong>继续编译</strong>。</li><li>编译器遇到 #error 指令，会显示后面的文本，然后<strong>立即退出编译</strong>，不会生成IL代码。</li></ul><h2 id="region-和-endregion"><a href="#region-和-endregion" class="headerlink" title="#region 和 #endregion"></a>#region 和 #endregion</h2><p>利用 #region 和 #endregion，可以指定在使用 Visual Studio 编辑器的大纲功能时可展开或折叠的代码块。</p><ul><li>#region 块必须通过 #endregion 指令终止。</li><li>#region 块不能与 #if 块重叠。 但是，可以将 #region 块嵌套在 #if 块内，或将 #if 块嵌套在 #region 块内。</li></ul><h2 id="line"><a href="#line" class="headerlink" title="#line"></a>#line</h2><ul><li>#line 可修改编译器的行号及（可选）用于错误和警告的文件名输出。</li></ul><p>此示例演示如何报告与行号相关联的两个警告。 #line 200 指令将行号强制设为 200（尽管默认值为 #7），直到下一个 #line 指令前，文件名都将报告为“特殊”。 #line 默认指令将行号返回至其默认行号，默认行号对由上个指令重新编号的行进行计数。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">MainClass</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">line</span> 200 "Special"</span></span><br><span class="line">        <span class="keyword">int</span> i;    <span class="comment">// CS0168 on line 200</span></span><br><span class="line">        <span class="keyword">int</span> j;    <span class="comment">// CS0168 on line 201</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">line</span> default</span></span><br><span class="line">        <span class="keyword">char</span> c;   <span class="comment">// CS0168 on line 9</span></span><br><span class="line">        <span class="keyword">float</span> f;  <span class="comment">// CS0168 on line 10</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">line</span> hidden // numbering not affected</span></span><br><span class="line">        <span class="keyword">string</span> s;</span><br><span class="line">        <span class="keyword">double</span> d; <span class="comment">// CS0168 on line 13</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>#line hidden 指令能对调试程序隐藏连续行，当开发者逐行执行代码时，介于 #line hidden 和下一 #line 指令（假设它不是其他 #line hidden 指令）间的任何行都将被跳过。</li></ul><p>意思是，调试器会执行 #hidden 后面代码，只是不会在 #hidden 后面代码调试停留。即便设置了断点，也会被调试器忽略。</p><blockquote><blockquote><p>示例</p></blockquote><p>下列示例演示调试程序如何忽略代码中的隐藏行。 运行示例时，它将显示三行文本。 但是，如果按照示例所示设置断点、并按 F10 逐行执行代码，可观察到调试程序忽略隐藏行。 另请注意，即使在隐藏行设置断点，调试程序仍将忽略它。<br>C#</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// preprocessor_linehidden.cs</span></span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">class</span> <span class="title">MainClass</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Console.WriteLine(<span class="string">"Normal line #1."</span>); <span class="comment">// Set break point here.</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">line</span> hidden</span></span><br><span class="line">        Console.WriteLine(<span class="string">"Hidden line."</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">line</span> default</span></span><br><span class="line">        Console.WriteLine(<span class="string">"Normal line #2."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行时输出结果：</p><pre><code>Normal line #1.Hidden line.Normal line #2.</code></pre><h2 id="pragam"><a href="#pragam" class="headerlink" title="#pragam"></a>#pragam</h2><ul><li>#pragma 指令可以启用或者禁用特定的编译警告。</li></ul><p>下面例子禁止“字段未使用”警告，然后在编译MyClass类后还原该警告。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> <span class="meta-keyword">warning</span> disable 169</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyClass</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> neverUsedField;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> <span class="meta-keyword">warning</span> restore 169</span></span><br></pre></td></tr></table></figure><blockquote><p>若要查找警告编号，请在 Visual Studio 中生成项目，然后在“输出”窗口中查找警告编号。这是要干嘛？😥</p></blockquote><h1 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h1><iframe src="https://slowread.cn/EssentialCSharp5-Index.html" width="100%" height="300" frameborder="0" allowfullscreen></iframe>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;操作符-Operators&quot;&gt;&lt;a href=&quot;#操作符-Operators&quot; class=&quot;headerlink&quot; title=&quot;操作符 Operators&quot;&gt;&lt;/a&gt;操作符 Operators&lt;/h1&gt;&lt;p&gt;操作符，也叫&lt;strong&gt;运算符&lt;/strong&gt;，英文：&lt;strong&gt;Operrators&lt;/strong&gt;，见 Microsoft Docs &lt;a href=&quot;https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/operators/index/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;C# 运算符&lt;/a&gt;。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名称&lt;/th&gt;
&lt;th&gt;含义&lt;/th&gt;
&lt;th&gt;例子&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;一元运算符&lt;/td&gt;
&lt;td&gt;接受一个操作数的运算符&lt;/td&gt;
&lt;td&gt;++ 或 new&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;二元运算符&lt;/td&gt;
&lt;td&gt;接受两个操作数的运算符&lt;/td&gt;
&lt;td&gt;+ - * /&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;三元运算符&lt;/td&gt;
&lt;td&gt;接受三个操作数，C#中唯一的条件运算符&lt;/td&gt;
&lt;td&gt;?:&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
    
    </summary>
    
    
      <category term="C#" scheme="https://at2008.github.io/tags/C/"/>
    
      <category term="C#本质论" scheme="https://at2008.github.io/tags/C-%E6%9C%AC%E8%B4%A8%E8%AE%BA/"/>
    
      <category term="Essential C#" scheme="https://at2008.github.io/tags/Essential-C/"/>
    
  </entry>
  
  <entry>
    <title>Visual Studio Code VSCode 常用 插件 扩展</title>
    <link href="https://at2008.github.io/2017/12/14/Visual-Studio-Code-%E5%B8%B8%E7%94%A8%E6%8F%92%E4%BB%B6/"/>
    <id>https://at2008.github.io/2017/12/14/Visual-Studio-Code-常用插件/</id>
    <published>2017-12-14T04:56:48.000Z</published>
    <updated>2018-08-02T15:27:41.062Z</updated>
    
    <content type="html"><![CDATA[<h1 id="界面主题"><a href="#界面主题" class="headerlink" title="界面主题"></a>界面主题</h1><ul><li>Monokai : VSCcode 内置主题</li><li>Agila : 包含多个主题</li><li>Dark-Dracula Theme : Dracula 风格主题里面比较好的</li><li>Nosferatu : Dracula 风格主题</li><li>monokai light : 白色，背景色类色默认的vs亮色主题背景</li><li>FlatUI : 包含多个主题</li><li>Flatland Monokai Theme : monokai 风格主题 暗</li><li>theme-dark-monokai : monokai 风格主题 暗</li><li>Monokai Dark Soda : monokai 风格主题 暗</li><li>Monokai Light : monokai 风格主题 亮</li></ul><a id="more"></a><h1 id="图标主题"><a href="#图标主题" class="headerlink" title="图标主题"></a>图标主题</h1><ul><li>vscode-icons：Icons : 主要推荐</li><li>material icon theme : 备选</li></ul><h1 id="功能插件"><a href="#功能插件" class="headerlink" title="功能插件"></a>功能插件</h1><h2 id="通用常用"><a href="#通用常用" class="headerlink" title="通用常用"></a>通用常用</h2><ul><li>Setting Sync: 同步备份VSCode的设置和插件到GitHUB，换电脑时可一键恢复；</li><li>Bracket Pair Colorizer ：对括号对进行着色，再也不会眼晕了；</li><li>Output Colorizer : 可以终端日志输出着色，实用；</li><li>XML Tools  ：作者 Josh Johnson - XML 格式化/Tree View</li><li>XML Tools （备选） : 作者 Qub -  格式化XML文档 Alt+Shift+F</li><li>vscode-fileheader: 添加头header comment</li><li>Align : 代码对齐插件</li></ul><h2 id="Markdown"><a href="#Markdown" class="headerlink" title="Markdown"></a>Markdown</h2><ul><li>Markdown All in One : All in One，提供多种快捷操作，非常好用；</li><li>Markdown Preview Enhanced : 强大的 Markdown 预览/导出插件，具体说明见<a href="https://shd101wyy.github.io/markdown-preview-enhanced/#/zh-cn/" target="_blank" rel="noopener">这里</a></li><li>markdownlint : 编写 Markdown 文件时智能提示，有助于养成好习惯。</li><li>Markdown Table Prettifier : Markdown 文件中，对表格进行强制格式化，看起来更整齐，舒服。（备注：Makdwon All In One 已经具备此功能。）</li></ul><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><ul><li>Python : Python extension for Visual Studio Code ,微软出品</li><li>Python Extension Pack ： 包含多个插件，snippets 提示比微软的要更全面</li></ul><h2 id="C＃"><a href="#C＃" class="headerlink" title="C＃"></a>C＃</h2><ul><li>C# : VSCode 开发 C# 必备</li><li>C# FixFormat : 格式化代码，好用;This extension helps to format C# code. When OmniSharp will support all features - will be deprecated.</li><li>C# Extensions : 提高开发效率的扩展工具</li></ul><h2 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h2><ul><li>Auto Rename Tag : sublime和webstorm也有这个内置功能，改变标签的时候同时改动开闭合标签；【HTML/XML】</li><li>Beautify ：格式化代码，支持 javascript, JSON, CSS, Sass, and HTML；</li><li>Document this : js 的注释模板 （注意：新版的vscode已经原生支持,在function上输入/** 弹出注释选择）</li><li>ESlint : 添加对 ESLint 的支持</li><li>HTMLHint ： HTML 代码检查</li><li>Icon Fonts ： 个能够在项目中添加图标字体的插件。该插件支持超过 20 个热门的图标集，包括了 Font Awesome、Ionicons、Glyphicons 和 Material Design Icons。</li><li>IntelliSense for CSS class names ： A Visual Studio Code extension that provides CSS class name completion for the HTML class attribute based on the CSS class definitions that can be found in your workspace or external files referenced through the link element.</li><li>Open-In-Browser ：此插件在快捷菜单中添加了在默认浏览器查看文件,快捷键<code>Ctrl + K D</code>可能会有冲突，可以改为<code>Ctrl + K B</code>;不在工作区的文件没有快捷菜单。</li><li>CSS Peek ：当你在 HTML 文件中右键单击选择器时，选择“ Go to Definition 和 Peek definition ”选项，它便会给你发送样式设置的 CSS 代码。</li><li>Path Autocomplete : 路径智能补全</li><li>Path Intellisense ： 路径智能提示</li><li>stylelint : 比内置的要全，更智能</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;界面主题&quot;&gt;&lt;a href=&quot;#界面主题&quot; class=&quot;headerlink&quot; title=&quot;界面主题&quot;&gt;&lt;/a&gt;界面主题&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Monokai : VSCcode 内置主题&lt;/li&gt;
&lt;li&gt;Agila : 包含多个主题&lt;/li&gt;
&lt;li&gt;Dark-Dracula Theme : Dracula 风格主题里面比较好的&lt;/li&gt;
&lt;li&gt;Nosferatu : Dracula 风格主题&lt;/li&gt;
&lt;li&gt;monokai light : 白色，背景色类色默认的vs亮色主题背景&lt;/li&gt;
&lt;li&gt;FlatUI : 包含多个主题&lt;/li&gt;
&lt;li&gt;Flatland Monokai Theme : monokai 风格主题 暗&lt;/li&gt;
&lt;li&gt;theme-dark-monokai : monokai 风格主题 暗&lt;/li&gt;
&lt;li&gt;Monokai Dark Soda : monokai 风格主题 暗&lt;/li&gt;
&lt;li&gt;Monokai Light : monokai 风格主题 亮&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="VSCode" scheme="https://at2008.github.io/tags/VSCode/"/>
    
      <category term="插件" scheme="https://at2008.github.io/tags/%E6%8F%92%E4%BB%B6/"/>
    
      <category term="Visual Studio" scheme="https://at2008.github.io/tags/Visual-Studio/"/>
    
      <category term="Visual Studio Code" scheme="https://at2008.github.io/tags/Visual-Studio-Code/"/>
    
  </entry>
  
  <entry>
    <title>推荐2个好看的linux发行版本</title>
    <link href="https://at2008.github.io/2017/12/14/%E6%8E%A8%E8%8D%902%E4%B8%AA%E5%A5%BD%E7%9C%8B%E7%9A%84linux%E5%8F%91%E8%A1%8C%E7%89%88%E6%9C%AC/"/>
    <id>https://at2008.github.io/2017/12/14/推荐2个好看的linux发行版本/</id>
    <published>2017-12-13T17:21:31.000Z</published>
    <updated>2018-08-03T13:42:17.425Z</updated>
    
    <content type="html"><![CDATA[<h1 id="feren-OS"><a href="#feren-OS" class="headerlink" title="feren OS"></a>feren OS</h1><p>官网地址：<a href="https://ferenos.weebly.com/" target="_blank" rel="noopener">https://ferenos.weebly.com/</a></p><p>界面截图</p><p><img src="https://slowread.cn/images/material/feren-OS-x64-0.jpg" alt="image"></p><a id="more"></a><p><img src="https://slowread.cn/images/material/feren-OS-x64-1.jpg" alt="image"></p><p><img src="https://slowread.cn/images/material/feren-OS-x64-2.jpg" alt="image"></p><p><img src="https://slowread.cn/images/material/feren-OS-x64-3.png" alt="image"></p><h1 id="elementary-OS"><a href="#elementary-OS" class="headerlink" title="elementary OS"></a>elementary OS</h1><p>官网地址：<a href="https://www.elementary.io/" target="_blank" rel="noopener">https://www.elementary.io/</a></p><p>界面截图</p><p><img src="https://slowread.cn/images/material/elementary-OS-0.jpg" alt="image"></p><p><img src="https://slowread.cn/images/material/elementary-OS-1.jpg" alt="image"></p><p><img src="https://slowread.cn/images/material/elementary-OS-2.jpg" alt="image"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;feren-OS&quot;&gt;&lt;a href=&quot;#feren-OS&quot; class=&quot;headerlink&quot; title=&quot;feren OS&quot;&gt;&lt;/a&gt;feren OS&lt;/h1&gt;&lt;p&gt;官网地址：&lt;a href=&quot;https://ferenos.weebly.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://ferenos.weebly.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;界面截图&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://slowread.cn/images/material/feren-OS-x64-0.jpg&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://at2008.github.io/tags/Linux/"/>
    
      <category term="elementary OS" scheme="https://at2008.github.io/tags/elementary-OS/"/>
    
      <category term="feren OS" scheme="https://at2008.github.io/tags/feren-OS/"/>
    
  </entry>
  
  <entry>
    <title>NumLock灯在多个linux版本中的不同设置方法</title>
    <link href="https://at2008.github.io/2017/12/14/NumLock%E7%81%AF%E5%9C%A8%E5%A4%9A%E4%B8%AAlinux%E7%89%88%E6%9C%AC%E4%B8%AD%E7%9A%84%E4%B8%8D%E5%90%8C%E8%AE%BE%E7%BD%AE%E6%96%B9%E6%B3%95/"/>
    <id>https://at2008.github.io/2017/12/14/NumLock灯在多个linux版本中的不同设置方法/</id>
    <published>2017-12-13T16:27:18.000Z</published>
    <updated>2018-08-02T15:27:41.058Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vim-编辑工具使用提示"><a href="#vim-编辑工具使用提示" class="headerlink" title="vim 编辑工具使用提示"></a>vim 编辑工具使用提示</h1><blockquote><p><code>vi</code> 或者 <code>vim</code>，视Linux发行版本而定</p></blockquote><ul><li>键入 i 切换到插入模式</li><li>键入 d 删除模式，然后，d 删除字符，dd删除整行</li><li>方向键调整光标到插入位置，复制粘贴代码</li><li>Esc键退出插入模式，回到默认的命令模式</li><li>按Esc后，键入 :wq 表示保存并退出</li><li>按Esc后，键入 :q! 强制不保存退出</li></ul><h1 id="elementary-OS"><a href="#elementary-OS" class="headerlink" title="elementary OS"></a>elementary OS</h1><p>第一步：安装numlockx，输入命令</p><pre><code>sudo apt-get install numlockx</code></pre><p>第二步：用 vim 打开 /etc/lightdm/pantheon-greeter.conf 文件</p><pre><code>sudo vi /etc/lightdm/pantheon-greeter.conf</code></pre><p>第三步：取消numlock行前面的 #</p><pre><code># activate-numlock=true</code></pre><a id="more"></a><p>结果如下图：</p><p><img src="http://slowread.cn/images/material/linux-numlock-eos.png" alt="image"></p><p>最后：重启或者注销后。小键盘就可以自动启动了</p><h1 id="ferenOS，Linux-Mint"><a href="#ferenOS，Linux-Mint" class="headerlink" title="ferenOS，Linux Mint"></a>ferenOS，Linux Mint</h1><p>第一步：安装numlockx，输入命令：</p><pre><code>sudo apt-get install numlockx</code></pre><p>第二步：用 vim 打开 <code>/etc/lightdm/lightdm.conf</code>文件，如果文件不存在，打开 <code>/etc/lightdm/lightdm.conf.d/70-linuxmint.conf</code>文件，。</p><pre><code>sudo vi /etc/lightdm/lightdm.conf</code></pre><p>或者</p><pre><code>sudo vi /etc/lightdm/lightdm.conf.d/70-linuxmint.conf</code></pre><p>第三步：在打开的文件中添加一行下面命令：</p><pre><code>greeter-setup-script=/usr/bin/numlockx on</code></pre><p>结果如下图：</p><p><img src="http://slowread.cn/images/material/linux-numlock-mint-ferenos.png" alt="image"></p><p>同样的，重启或者注销后，生效。</p><h1 id="CentOS-，Scientific-Linux，Fedora-and-other-rpm-based"><a href="#CentOS-，Scientific-Linux，Fedora-and-other-rpm-based" class="headerlink" title="CentOS ，Scientific Linux，Fedora and other rpm based"></a>CentOS ，Scientific Linux，Fedora and other rpm based</h1><ul><li>先安装numlockx,可以去opensuse的软件中心里找rpm包进行安装</li><li>下载地址：<a href="https://pkgs.org/download/numlockx/" target="_blank" rel="noopener">https://pkgs.org/download/numlockx/</a></li><li>安装命令： sudo rpm -i numlockx-1.2-6.el7.nux.x86_64.rpm<ul><li>或者：sudo yum install numlockx</li></ul></li><li>先备份 cp /etc/gdm/Init/Default /etc/gdm/Init/Default_backup</li><li>再修改 vim /etc/gdm/Init/Default</li><li>在exit 0之前加上/usr/bin/numlockx on,重启就会发现小键盘已经打开了！</li></ul><h1 id="Ubuntu-and-other-debian-based"><a href="#Ubuntu-and-other-debian-based" class="headerlink" title="Ubuntu and other debian based"></a>Ubuntu and other debian based</h1><h2 id="基于-gdm"><a href="#基于-gdm" class="headerlink" title="基于 gdm"></a>基于 gdm</h2><p>安装 numlockx ,在终端中输入命令：</p><pre><code>sudo apt-get install numlockx</code></pre><p>配置 numlockx</p><pre><code>sudo gedit /etc/gdm/Init/Default</code></pre><p>在 exit 0 之前，添加如下内容：</p><pre><code>#set numlock onif [ -x /usr/bin/numlockx ]; then/usr/bin/numlockx onfi</code></pre><p>结果如下图：</p><p><img src="http://slowread.cn/images/material/linux-numlock-ubuntu.jpg" alt="image"></p><h2 id="基于-lightdm"><a href="#基于-lightdm" class="headerlink" title="基于 lightdm"></a>基于 lightdm</h2><pre><code>sudo gedit /etc/lightdm/lightdm.conf</code></pre><p>最后一行添加下面语句：</p><pre><code>greeter-setup-script=/usr/bin/numlockx on</code></pre><p>结果如下图：</p><p><img src="http://slowread.cn/images/material/linux-numlock-ubuntu-other.png" alt="image"></p><p>重启或者注销后，生效。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;vim-编辑工具使用提示&quot;&gt;&lt;a href=&quot;#vim-编辑工具使用提示&quot; class=&quot;headerlink&quot; title=&quot;vim 编辑工具使用提示&quot;&gt;&lt;/a&gt;vim 编辑工具使用提示&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;vi&lt;/code&gt; 或者 &lt;code&gt;vim&lt;/code&gt;，视Linux发行版本而定&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;键入 i 切换到插入模式&lt;/li&gt;
&lt;li&gt;键入 d 删除模式，然后，d 删除字符，dd删除整行&lt;/li&gt;
&lt;li&gt;方向键调整光标到插入位置，复制粘贴代码&lt;/li&gt;
&lt;li&gt;Esc键退出插入模式，回到默认的命令模式&lt;/li&gt;
&lt;li&gt;按Esc后，键入 :wq 表示保存并退出&lt;/li&gt;
&lt;li&gt;按Esc后，键入 :q! 强制不保存退出&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;elementary-OS&quot;&gt;&lt;a href=&quot;#elementary-OS&quot; class=&quot;headerlink&quot; title=&quot;elementary OS&quot;&gt;&lt;/a&gt;elementary OS&lt;/h1&gt;&lt;p&gt;第一步：安装numlockx，输入命令&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo apt-get install numlockx
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;第二步：用 vim 打开 /etc/lightdm/pantheon-greeter.conf 文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo vi /etc/lightdm/pantheon-greeter.conf
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;第三步：取消numlock行前面的 #&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# activate-numlock=true
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://at2008.github.io/tags/Linux/"/>
    
      <category term="NumLock" scheme="https://at2008.github.io/tags/NumLock/"/>
    
  </entry>
  
  <entry>
    <title>C#本质论笔记 第2章 数据类型</title>
    <link href="https://at2008.github.io/2017/12/13/CSharp%E6%9C%AC%E8%B4%A8%E8%AE%BA%E7%AC%94%E8%AE%B0-%E7%AC%AC2%E7%AB%A0-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <id>https://at2008.github.io/2017/12/13/CSharp本质论笔记-第2章-数据类型/</id>
    <published>2017-12-13T08:27:35.000Z</published>
    <updated>2018-08-03T13:46:20.113Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><p>预定义类型(predefined type)/基元类型(primitive type)，也翻译为基本类型、基础类型或者原始类型。</p><a id="more"></a><table><thead><tr><th>类型</th><th>Size</th><th>Range</th><th>BCL name</th><th>Signed</th><th>精度</th><th>后缀</th><th>例子</th></tr></thead><tbody><tr><td>sbyte</td><td>8 bits</td><td>-128 to 127</td><td>System.SByte</td><td>是</td><td></td><td></td><td></td></tr><tr><td>byte</td><td>8 bits</td><td>0 to 255</td><td>System.Byte</td><td>否</td><td></td><td></td><td></td></tr><tr><td>short</td><td>16 bits</td><td>-32,768 to 32,767</td><td>System.Int16</td><td>是</td><td></td><td></td><td></td></tr><tr><td>ushort</td><td>16 bits</td><td>0 to 65,535</td><td>System.UInt16</td><td>否</td><td></td><td></td><td></td></tr><tr><td>int</td><td>32 bits</td><td>-2,147,483,648 to 2,147,483,647</td><td>System.Int32</td><td>是</td><td></td><td></td><td></td></tr><tr><td>uint</td><td>32 bits</td><td>0 到 4,294,967,295</td><td>System.UInt32</td><td>否</td><td></td><td>U或u</td><td></td></tr><tr><td>long</td><td>64 bits</td><td>-9,223,372,036,854,775,808 <br> to <br> 9,223,372,036,854,775,807</td><td>System.Int64</td><td>是</td><td></td><td>L或l</td><td></td></tr><tr><td>ulong</td><td>64 bits</td><td>-9,223,372,036,854,775,808 <br> to <br> 9,223,372,036,854,775,807</td><td>System.UInt64</td><td>否</td><td></td><td>UL或ul</td><td></td></tr><tr><td>float</td><td>32 bits</td><td>±1.5e−45 到 ±3.4e38</td><td>System.Single</td><td></td><td>7</td><td>F或f</td><td></td></tr><tr><td>double</td><td>64 bits</td><td>±5.0e−324 到 ±1.7e308</td><td>System.Double</td><td></td><td>15-16</td><td>D或d</td><td></td></tr><tr><td>decimal</td><td>128 bits</td><td>±1.0e−28 到 ±7.9e28</td><td>System.Decimal</td><td></td><td>28-29</td><td>M或m</td><td></td></tr><tr><td>bool</td><td>bits</td><td></td><td>System.Boolean</td><td></td><td></td><td></td><td></td></tr><tr><td>char</td><td>16 bits <br> Unicode 字符</td><td>U+0000 到 U+ffff</td><td>System.Char</td><td></td><td></td><td></td><td>char test; <br> test = ‘A’</td></tr><tr><td>string</td><td></td><td></td><td>System.String</td><td></td><td></td><td></td><td>string test; <br> test = “A”</td></tr><tr><td>object</td><td></td><td></td><td>System.Object</td><td></td><td></td><td></td><td></td></tr><tr><td>dynamic</td><td></td><td></td><td>无相应.NET类型</td><td></td><td></td><td></td><td>dynamic dyn = 1;</td></tr></tbody></table><blockquote><p>类型关键字和BCL name效果相同，规范建议指定数据类型时使用C#关键字，而不是BCL名称（例如，使用==string==而不是System.String或者==String==）。</p><p>后缀不区分大小写，一般建议采用大写。但对于long ，强烈建议使用大写字母Ｌ，因为小写字母ｌ和数字１不好区分。</p><p>关于指数记数法，需要使用 e 或者 E 中缀，在中缀字母后添加正整数或者负整数，并在字面量的最后添加恰当的数据类型后缀。例如将阿伏加德罗常熟作为float输出，代码如下：</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.Console.WriteLine(<span class="number">6.023E23</span>F);</span><br></pre></td></tr></table></figure><blockquote><p>输出结果</p></blockquote><pre><code>6.023E+23</code></pre><h1 id="经常用到的数字格式化输出例子"><a href="#经常用到的数字格式化输出例子" class="headerlink" title="经常用到的数字格式化输出例子"></a>经常用到的数字格式化输出例子</h1><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">hello</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> dValue = <span class="number">12345.6789</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//几种格式转换输出方式</span></span><br><span class="line">        System.Console.WriteLine (dValue); <span class="comment">//原值输出    输出  12345.6789</span></span><br><span class="line">        System.Console.WriteLine (<span class="string">"&#123;0&#125;"</span>, dValue);</span><br><span class="line">        System.Console.WriteLine (<span class="keyword">string</span>.Format (<span class="string">"&#123;0&#125;"</span>, dValue));</span><br><span class="line">        System.Console.WriteLine (dValue.ToString ());</span><br><span class="line"></span><br><span class="line">        System.Console.WriteLine (<span class="string">"以下几种方法在数据有效范围内效果相同："</span>);</span><br><span class="line">        System.Console.WriteLine (<span class="string">"WriteLine (dValue);"</span>);</span><br><span class="line">        System.Console.WriteLine (<span class="string">"WriteLine (\"&#123;0&#125;\", dValue);"</span>);</span><br><span class="line">        System.Console.WriteLine (<span class="string">"WriteLine (string.Format (\"&#123;0&#125;\", dValue));"</span>);</span><br><span class="line">        System.Console.WriteLine (<span class="string">"WriteLine (dValue.ToString ());"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>输出结果</p></blockquote><pre><code>12345.678912345.678912345.678912345.6789以下几种方法在数据有效范围内效果相同：WriteLine (dValue);WriteLine (&quot;{0}&quot;, dValue);WriteLine (string.Format (&quot;{0}&quot;, dValue));WriteLine (dValue.ToString ());</code></pre><h1 id="基本数值类型"><a href="#基本数值类型" class="headerlink" title="基本数值类型"></a>基本数值类型</h1><p>C#基本数值类型包括整数类型、浮点类型以及decimal类型。</p><blockquote><p>浮点数的精度是可变的。例如浮点数 0.1，可以表示成 0.0999999999 或者 0.100000001（或者任何非常接近0.1的数）。</p><p>decimal是一种特殊的浮点类型，是128位精度的10进制浮点类型，能够存书大数字而无表示错误，适合大而精确的计算。</p><ul><li>与==二进制==浮点数不同，decimal类型保证范围内所有的==十进制==数都是精确的，0.1就是0.1。</li></ul><p>==<strong>关于浮点精度理解</strong>==，目前计算机是2进制（只有0，1状态）的运算机器，所有小于1的数，只能用除法计算得到结果，计算机中的除法就是移位。</p><ul><li>例如0.1，表示成分数是1/10，分母10不是2的整数次幂，因此1/10不能用有限的二进制小数表示。</li></ul></blockquote><h2 id="字面值或字面量-literal-value"><a href="#字面值或字面量-literal-value" class="headerlink" title="字面值或字面量(literal value)"></a>字面值或字面量(literal value)</h2><blockquote><p>literal value 表示源代码中的固定值，就是数据值本身。Microsoft Docs 将 <code>literal</code> 翻译作 <code>文本</code>。</p><ul><li>个人理解，字面量可以叫做常数，常数值，固定值等等，可以是用户自己定义的或者系统定义的常数、符号等（例如：==123==、==’A’==、==\n== 等）。</li></ul><p>例如，下面代码中的数字值：</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.Console.WriteLine(<span class="number">42</span>);</span><br><span class="line">System.Console.WriteLine(<span class="number">1.618034</span>);</span><br></pre></td></tr></table></figure><blockquote><p>输出结果</p></blockquote><pre><code>421.618034</code></pre><blockquote><p>用变量定义来实现上面的效果，定义int 类型变量 x 并赋值 42 ，定义 double 类型变量 y 并赋值 1.618034 。</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> x = <span class="number">42</span>;</span><br><span class="line"><span class="keyword">double</span> y = <span class="number">1.618034</span>;</span><br><span class="line">System.Console.WriteLine(x);</span><br><span class="line">System.Console.WriteLine(y);</span><br></pre></td></tr></table></figure><blockquote><p>输出结果</p></blockquote><pre><code>421.618034</code></pre><h2 id="初学者主题-使用硬编码要慎重"><a href="#初学者主题-使用硬编码要慎重" class="headerlink" title="初学者主题:使用硬编码要慎重"></a>初学者主题:使用<code>硬编码</code>要慎重</h2><p>直接将值放到源代码中成为硬编码（==hardcoding==），如果以后需要更改值，就必须重新编译代码。给予方便维护考虑，可以考虑从外部获取值，比如从一个配置文件中，这样以后修改值的时候，不需要重新编译代码。</p><blockquote><p>带小数点的字面值，编译器自动解释成 double 类型。</p><p>整数值（没有小数点）通常默认为 int，前提是值在 int 类型存储范围内。如果值太大，编译器会把它解释成 long 。</p><p>C# 允许想非 int 类型赋值，前提是字面值对于目标数据类型来说是合法的。例如，short s = 42和byte b = 77都是允许的。但值一点进队字面值成立。如果不使用额外语法，b = s就是非法的。</p></blockquote><h2 id="数据精度相关代码示例"><a href="#数据精度相关代码示例" class="headerlink" title="数据精度相关代码示例"></a>数据精度相关代码示例</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.Console.WriteLine(<span class="number">1.234567890123456</span>);</span><br><span class="line">System.Console.WriteLine(<span class="number">1.012345678901234</span>);</span><br></pre></td></tr></table></figure><blockquote><p>输出结果</p></blockquote><pre><code>1.234567890123461.01234567890123</code></pre><p>受限于 double 类型的精度，超过精度的遵循==四舍五入==原则截取。</p><blockquote><p>要显示具有完整精度的数字，必须将字面值显示生命为 decimal 类型，知识通过追加一个M（或者m）后缀来实现的。</p><p>下面代码指定一个 decimal 字面值</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.Console.WriteLine(<span class="number">1.234567890123456</span>M);</span><br><span class="line">System.Console.WriteLine(<span class="number">1.012345678901234</span>m);</span><br></pre></td></tr></table></figure><blockquote><p>输出结果</p></blockquote><pre><code>1.2345678901234561.012345678901234</code></pre><h2 id="初学者主题-十六进制表示法-Hexadecimal-Notation"><a href="#初学者主题-十六进制表示法-Hexadecimal-Notation" class="headerlink" title="初学者主题:十六进制表示法 Hexadecimal Notation"></a>初学者主题:十六进制表示法 Hexadecimal Notation</h2><p>C#允许指定十六进制值，需要附加 0x 或者 0X 前缀（效果一样），如下示例：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用16进制字面量显示数值10</span></span><br><span class="line">System.Console.WriteLine(<span class="number">0x000A</span>);</span><br><span class="line">System.Console.WriteLine(<span class="number">0x000a</span>);</span><br><span class="line">System.Console.WriteLine(<span class="number">0X000A</span>);</span><br><span class="line">System.Console.WriteLine(<span class="number">0X000a</span>);</span><br></pre></td></tr></table></figure><blockquote><p>输出结果</p></blockquote><pre><code>10101010</code></pre><p>注意，代码输出结果是10，而不是0x000A 或者 0x000a 。</p><h2 id="高级主题-将数格式化成十六进制"><a href="#高级主题-将数格式化成十六进制" class="headerlink" title="高级主题:将数格式化成十六进制"></a>高级主题:将数格式化成十六进制</h2><p>要以十六进制形式格式化输出一个数值，必须使用==x==或者==X==数值格式说明符。==大小写==决定了十六进制字母的大小写，数值字面量可采用十进制或者十六进制形式，结果一样。如下示例：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//显示数值 "0xA" 或者 “0xa”</span></span><br><span class="line"><span class="comment">//字面量为十进制数值，格式化为十六进制，大写</span></span><br><span class="line">System.Console.WriteLine(<span class="string">"0x&#123;0:X&#125;"</span>, <span class="number">10</span>);</span><br><span class="line"><span class="comment">//字面量为十进制数值，格式化为十六进制，小写</span></span><br><span class="line">System.Console.WriteLine(<span class="string">"0x&#123;0:x&#125;"</span>, <span class="number">10</span>);</span><br><span class="line"><span class="comment">//字面量为十六进制大写数值，格式化为十六进制，小写</span></span><br><span class="line">System.Console.WriteLine(<span class="string">"0x&#123;0:x&#125;"</span>, <span class="number">0X000A</span>);</span><br><span class="line"><span class="comment">//字面量为十六进制小写数值，格式化为十六进制，大写</span></span><br><span class="line">System.Console.WriteLine(<span class="string">"0x&#123;0:X&#125;"</span>, <span class="number">0X000a</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> <span class="keyword">value</span>;</span><br><span class="line"><span class="keyword">value</span> = <span class="number">0X000a</span>;</span><br><span class="line">System.Console.WriteLine(<span class="keyword">value</span>.ToString(<span class="string">"X"</span>));</span><br><span class="line">System.Console.WriteLine(<span class="string">"0x&#123;0&#125;"</span>, <span class="keyword">value</span>.ToString(<span class="string">"X"</span>));</span><br></pre></td></tr></table></figure><blockquote><p>输出结果</p></blockquote><pre><code>0xA0xa0xa0xAA0xA</code></pre><h2 id="高级主题-round-trip-（往返过程）格式化"><a href="#高级主题-round-trip-（往返过程）格式化" class="headerlink" title="高级主题:round-trip （往返过程）格式化"></a>高级主题:round-trip （往返过程）格式化</h2><p>在格式化字符串时，使用round-trip格式说明符(R 或者 r)，用于确保转换为字符串的数值将再次分析为相同的数值。只有 Single、 Double 和 BigInteger 类型支持此格式。</p><blockquote><p>例如，string.Format(“{0}”,0.1234567890123125) 结果是 0.123456789012313</p><p>而， string.Format(“{0:R}”,0.1234567890123125) 结果是 0.1234567890123125 。</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">double</span> number = <span class="number">0.1234567890123125</span>;</span><br><span class="line">        <span class="keyword">double</span> result;</span><br><span class="line">        <span class="keyword">string</span> text;</span><br><span class="line"></span><br><span class="line">        text = <span class="keyword">string</span>.Format(<span class="string">"&#123;0&#125;"</span>,number);</span><br><span class="line">        <span class="comment">//double.Parase 将数字的字符串表示形式转换为它的等效双精度浮点数。</span></span><br><span class="line">        result = <span class="keyword">double</span>.Parse(text);</span><br><span class="line"></span><br><span class="line">        System.Console.WriteLine(number);</span><br><span class="line">        System.Console.WriteLine(<span class="string">"text = &#123;0&#125;"</span> , text);</span><br><span class="line">        System.Console.WriteLine(result);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//double.ToSring() 将此实例的数值转换为其等效的字符串表示形式。</span></span><br><span class="line">        System.Console.WriteLine(number.ToString());</span><br><span class="line">        System.Console.WriteLine(<span class="string">"&#123;0&#125;: text = number"</span>, text == number.ToString());</span><br><span class="line"></span><br><span class="line">        System.Console.WriteLine(<span class="string">"&#123;0&#125;: result = number"</span>, result != number);</span><br><span class="line"></span><br><span class="line">        text = <span class="keyword">string</span>.Format(<span class="string">"&#123;0:R&#125;"</span>,number);</span><br><span class="line">        System.Console.WriteLine(<span class="string">"text = &#123;0&#125;"</span> , text);</span><br><span class="line">        result = <span class="keyword">double</span>.Parse(text);</span><br><span class="line">        System.Console.WriteLine(<span class="string">"&#123;0&#125;: result = number"</span>, result == number);</span><br><span class="line"></span><br><span class="line">        System.Console.ReadKey();        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>输出结果</p></blockquote><pre><code>0.123456789012313text = 0.1234567890123130.1234567890123130.123456789012313True: text = numberTrue: result = numbertext = 0.1234567890123125True: result = number</code></pre><h2 id="标准数字格式字符串-Numeric-Format-Strings"><a href="#标准数字格式字符串-Numeric-Format-Strings" class="headerlink" title="标准数字格式字符串(Numeric Format Strings)"></a>标准数字格式字符串(Numeric Format Strings)</h2><blockquote><p>标准数字格式字符串用于格式化通用数值类型。 标准数字格式字符串采用 Axx 的形式，其中：</p><ul><li>A 是称为格式说明符的单个字母字符。任何包含一个以上字母字符（包括空白）的数字格式字符串都被解释为自定义数字格式字符串。</li><li>xx 是称为精度说明符的可选整数。 精度说明符的范围从 0 到 99，并且影响结果中的位数。请注意，精度说明符控制数字的字符串表示形式中的数字个数。 它不舍入该数字。若要执行舍入运算，请使用 Math.Ceiling、 Math.Floor 或 Math.Round 方法。</li><li>当精度说明符控制结果字符串中的小数位数时，结果字符串反映远离零的一侧舍入的数字（即，使用 MidpointRounding.AwayFromZero）。</li><li>所有数字类型的 ToString 方法的某些重载支持标准数字格式字符串。 例如，可将数字格式字符串提供给 ToString(String) 类型的 ToString(String, IFormatProvider) 方法和 Int32 方法。 .NET Framework 复合格式化功能也支持标准数字格式字符串，该功能由 Write 和 WriteLine 类的某些 Console 和 StreamWriter 方法、 String.Format 方法以及 StringBuilder.AppendFormat 方法使用。复合格式功能允许你将多个数据项的字符串表示形式包含在单个字符串中，以指定字段宽度，并在字段中对齐数字。</li></ul><p>下表描述标准的数字格式说明符并显示由每个格式说明符产生的示例输出。</p></blockquote><table><thead><tr><th>格式说明符</th><th>名称</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td>“C”或“c”</td><td>货币</td><td>结果：货币值。<br>受以下类型支持：所有数值类型。<br>精度说明符：小数位数。<br>默认值精度说明符：<br>由 NumberFormatInfo.CurrencyDecimalDigits 定义。<br>更多信息： 货币（“C”）格式说明符。</td><td>123.456 (“C”, en-US) -&gt; $123.46 <br> 123.456 (“C”, fr-FR) -&gt; 123,46 € <br>123.456 (“C”, ja-JP) -&gt; ¥123 <br> -123.456 (“C3”, en-US) -&gt; ($123.456)<br>-123.456 (“C3”, fr-FR) -&gt; -123,456 €<br>-123.456 (“C3”, ja-JP) -&gt; -¥123.456</td></tr><tr><td>“D”或“d”</td><td>Decimal</td><td>结果：整型数字，负号可选。<br>受以下类型支持：==仅整型==。<br>精度说明符：最小位数。<br>默认值精度说明符：所需的最小位数。<br>更多信息： 十进制（“D”）格式说明符。</td><td>1234 (“D”) -&gt; 1234 <br> -1234 (“D6”) -&gt; -001234</td></tr><tr><td>“E”或“e”</td><td>指数<br>(科学型)</td><td>结果：指数记数法。<br>受以下类型支持：所有数值类型。<br>精度说明符：小数位数。<br>默认值精度说明符：6。<br>更多信息： 指数（“E”）格式说明符。</td><td>1052.0329112756 (“E”, en-US) -&gt; 1.052033E+003<br>1052.0329112756 (“e”, fr-FR) -&gt; 1,052033e+003<br>-1052.0329112756 (“e2”, en-US) -&gt; -1.05e+003<br>-1052.0329112756 (“E2”, fr_FR) -&gt; -1,05E+003</td></tr><tr><td>“F”或“f”</td><td>定点</td><td>结果：整数和小数，负号可选。<br>受以下类型支持：所有数值类型。<br>精度说明符：小数位数。<br>默认值精度说明符：<br>由 NumberFormatInfo.NumberDecimalDigits 定义。<br>更多信息： 定点（“F”）格式说明符。</td><td>1234.567 (“F”, en-US) -&gt; 1234.57<br>1234.567 (“F”, de-DE) -&gt; 1234,57<br>1234 (“F1”, en-US) -&gt; 1234.0<br>1234 (“F1”, de-DE) -&gt; 1234,0<br>-1234.56 (“F4”, en-US) -&gt; -1234.5600<br>-1234.56 (“F4”, de-DE) -&gt; -1234,5600</td></tr><tr><td>“G”或“g”</td><td>常规</td><td>结果：最紧凑的定点表示法或科学记数法。<br>受以下类型支持：所有数值类型。<br>精度说明符：有效位数。<br>默认值精度说明符：取决于数值类型。<br>更多信息：常规（“G”）格式说明符。</td><td>-123.456 (“G”, en-US) -&gt; -123.456<br>-123.456 (“G”, sv-SE) -&gt; -123,456<br>123.4546 (“G4”, en-US) -&gt; 123.5<br>123.4546 (“G4”, sv-SE) -&gt; 123,5<br>-1.234567890e-25 (“G”, en-US) -&gt; -1.23456789E-25<br>-1.234567890e-25 (“G”, sv-SE) -&gt; -1,23456789E-25</td></tr><tr><td>“N”或“n”</td><td>数字</td><td>结果：整数和小数、组分隔符和小数分隔符，负号可选。<br>受以下类型支持：所有数值类型。<br>精度说明符：所需的小数位数。<br>默认值精度说明符：<br>由 NumberFormatInfo.NumberDecimalDigits 定义。<br>更多信息： 数字（“N”）格式说明符。</td><td>1234.567 (“N”, en-US) -&gt; 1,234.57<br>1234.567 (“N”, ru-RU) -&gt; 1 234,57<br>1234 (“N1”, en-US) -&gt; 1,234.0<br>1234 (“N1”, ru-RU) -&gt; 1 234,0<br>-1234.56 (“N3”, en-US) -&gt; -1,234.560<br>-1234.56 (“N3”, ru-RU) -&gt; -1 234,560</td></tr><tr><td>“P”或“p”</td><td>百分比</td><td>结果：乘以 100 并显示百分比符号的数字。<br>受以下类型支持：所有数值类型。<br> 精度说明符：所需的小数位数。<br>默认值精度说明符：<br>由 NumberFormatInfo.PercentDecimalDigits 定义。<br>更多信息： 百分比（“P”）格式说明符。</td><td>1 (“P”, en-US) -&gt; 100.00 %<br>1 (“P”, fr-FR) -&gt; 100,00 %<br>-0.39678 (“P1”, en-US) -&gt; -39.7 %<br>-0.39678 (“P1”, fr-FR) -&gt; -39,7 %</td></tr><tr><td>“R”或“r”</td><td>往返过程</td><td>结果：可以往返至相同数字的字符串。<br>受以下类型支持： Single、 Double 和 BigInteger。<br>精度说明符：忽略。<br>更多信息： 往返过程（“R”）格式说明符。</td><td>123456789.12345678 (“R”) -&gt; 123456789.12345678<br>-1234567890.12345678 (“R”) -&gt; -1234567890.1234567</td></tr><tr><td>“X”或“x”</td><td>十六进制</td><td>结果：十六进制字符串。<br>受以下类型支持：仅整型。<br>精度说明符：结果字符串中的位数。<br>更多信息： 十六进制（“X”）格式说明符。</td><td>255 (“X”) -&gt; FF<br>-1 (“x”) -&gt; ff<br>255 (“x4”) -&gt; 00ff<br>-1 (“X4”) -&gt; 00FF</td></tr><tr><td>任何<br>其他单个字符</td><td>未知说明符</td><td>结果：在运行时引发 FormatException。</td><td>其他</td></tr></tbody></table><h2 id="自定义数字格式字符串"><a href="#自定义数字格式字符串" class="headerlink" title="自定义数字格式字符串"></a>自定义数字格式字符串</h2><blockquote><p>你可以创建自定义数字格式字符串，这种字符串由一个或多个自定义数字说明符组成，用于定义设置数值数据格式的方式。 自定义数字格式字符串是任何不属于 ==标准数字格式字符串== 的格式字符串。</p><p>所有数字类型的 <strong>ToString</strong> 方法的某些重载支持自定义数字格式字符串。 例如，可将数字格式字符串提供给 Int32 类型的 ToString(String) 方法和 ToString(String, IFormatProvider) 方法。 .NET Framework 复合格式化功能也支持自定义数字格式字符串，该功能由 Console 和 StreamWriter 类的某些 <strong>Write</strong> 和 <strong>WriteLine</strong> 方法、 String.Format 方法以及 StringBuilder.AppendFormat 方法所使用。</p><p>下表描述自定义数字格式说明符并显示由每个格式说明符产生的示例输出。</p></blockquote><table><thead><tr><th>格式说明符</th><th>名称</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td>“0”</td><td>零占位符</td><td>用对应的数字（如果存在）替换零；否则，将在结果字符串中显示零。</td><td>1234.5678 (“00000”) -&gt;01235<br>0.45678 (“0.00”, en-US) -&gt; 0.46<br>0.45678 (“0.00”, fr-FR) -&gt; 0,46</td></tr><tr><td>“#”</td><td>数字占位符</td><td>用对应的数字（如果存在）替换“#”符号；<br>否则，不会在结果字符串中显示任何数字。</td><td>1234.5678 (“#####”) -&gt; 1235<br>0.45678 (“#.##”, en-US) -&gt; .46<br>0.45678 (“#.##”, fr-FR) -&gt; ,46</td></tr><tr><td>“.”</td><td>小数点</td><td>确定小数点分隔符在结果字符串中的位置。</td><td>0.45678 (“0.00”, en-US) -&gt; 0.46<br>0.45678 (“0.00”, fr-FR) -&gt; 0,46</td></tr><tr><td>“,”</td><td>组分隔符和数字比例换算</td><td>用作组分隔符和数字比例换算说明符。<br>作为组分隔符时，它在各个组之间插入本地化的组分隔符字符。<br>作为数字比例换算说明符，对于每个指定的逗号，它将数字除以1000。</td><td>组分隔符说明符：<br>2147483647 (“##,#”, en-US) -&gt; 2,147,483,647<br>2147483647 (“##,#”, es-ES) -&gt; 2.147.483.647<br>比例换算说明符：<br>2147483647 (“#,#,,”, en-US) -&gt; 2,147<br>2147483647 (“#,#,,”, es-ES) -&gt; 2.147</td></tr><tr><td>“%”</td><td>百分比占位符</td><td>将数字乘以 100，并在结果字符串中插入本地化的百分比符号。</td><td>0.3697 (“%#0.00”, en-US) -&gt; %36.97<br>0.3697 (“%#0.00”, el-GR) -&gt; %36,97<br>0.3697 (“##.0 %”, en-US) -&gt; 37.0 %<br>0.3697 (“##.0 %”, el-GR) -&gt; 37,0 %</td></tr><tr><td>“‰”</td><td>千分比占位符</td><td>将数字乘以 1000，并在结果字符串中插入本地化的千分比符号。</td><td>0.03697 (“#0.00‰”, en-US) -&gt; 36.97‰<br>0.03697 (“#0.00‰”, ru-RU) -&gt; 36,97‰</td></tr><tr><td>“E0”<br>“E+0”<br>“E-0”<br>“e0”<br>“e+0”<br>“e-0”</td><td>指数表示法</td><td>如果后跟至少一个0（零），则使用指数表示法设置结果格式。<br>“E”或“e”指示指数符号在结果字符串中是大写还是小写。<br>跟在“E”或“e”字符后面的零的数目确定指数中的最小位数。 <br>加号 (+)指示符号字符总是置于指数前面。<br>减号(-)指示符号字符仅置于负指数前面。</td><td>987654 (“#0.0e0”) -&gt; 98.8e4<br>1503.92311 (“0.0##e+00”) -&gt; 1.504e+03<br>1.8901385E-16 (“0.0e+00”) -&gt; 1.9e-16</td></tr><tr><td>\</td><td>转义符</td><td>使下一个字符被解释为文本而不是自定义格式说明符。</td><td>987654 (“###00#“) -&gt; #987654#</td></tr><tr><td>‘string’<br>“string”</td><td>文本字符串分隔符</td><td>指示应复制到未更改的结果字符串的封闭字符。</td><td>68 (“# ‘ degrees’”) -&gt; 68 degrees<br>68 (“# ‘ degrees’”) -&gt; 68 degrees</td></tr><tr><td>;</td><td>部分分隔符</td><td>通过分隔格式字符串定义正数、负数和零各部分。</td><td>12.345 (“#0.0#;(#0.0#);-\0-“) -&gt; 12.35<br>0 (“#0.0#;(#0.0#);-\0-“) -&gt; -0-<br>-12.345 (“#0.0#;(#0.0#);-\0-“) -&gt; (12.35)<br>12.345 (“#0.0#;(#0.0#)”) -&gt; 12.35<br>0 (“#0.0#;(#0.0#)”) -&gt; 0.0<br>-12.345 (“#0.0#;(#0.0#)”) -&gt; (12.35)</td></tr><tr><td>其他</td><td>所有其他字符</td><td>字符将复制到未更改的结果字符串。</td><td>68 (“# °”) -&gt; 68 °</td></tr></tbody></table><h2 id="标准数字格式化字符串-简单例子"><a href="#标准数字格式化字符串-简单例子" class="headerlink" title="标准数字格式化字符串 简单例子"></a>标准数字格式化字符串 简单例子</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Globalization;</span><br><span class="line"><span class="keyword">using</span> System.Threading;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">NumericFormats</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// Display string representations of numbers for en-us culture</span></span><br><span class="line">        CultureInfo ci = <span class="keyword">new</span> CultureInfo (<span class="string">"en-us"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Output floating point values</span></span><br><span class="line">        <span class="keyword">double</span> floating = <span class="number">10761.937554</span>;</span><br><span class="line">        Console.WriteLine (<span class="string">"原始数字：10761.937554"</span>);</span><br><span class="line">        Console.WriteLine (<span class="string">"C: &#123;0&#125;"</span>,</span><br><span class="line">            floating.ToString (<span class="string">"C"</span>, ci)); <span class="comment">// Displays "C: $10,761.94"</span></span><br><span class="line">        Console.WriteLine (<span class="string">"E: &#123;0&#125;"</span>,</span><br><span class="line">            floating.ToString (<span class="string">"E03"</span>, ci)); <span class="comment">// Displays "E: 1.076E+004"</span></span><br><span class="line">        Console.WriteLine (<span class="string">"F: &#123;0&#125;"</span>,</span><br><span class="line">            floating.ToString (<span class="string">"F04"</span>, ci)); <span class="comment">// Displays "F: 10761.9376"         </span></span><br><span class="line">        Console.WriteLine (<span class="string">"G: &#123;0&#125;"</span>,</span><br><span class="line">            floating.ToString (<span class="string">"G"</span>, ci)); <span class="comment">// Displays "G: 10761.937554"</span></span><br><span class="line">        Console.WriteLine (<span class="string">"N: &#123;0&#125;"</span>,</span><br><span class="line">            floating.ToString (<span class="string">"N03"</span>, ci)); <span class="comment">// Displays "N: 10,761.938"</span></span><br><span class="line">        Console.WriteLine (<span class="string">"P: &#123;0&#125;"</span>,</span><br><span class="line">            (floating / <span class="number">10000</span>).ToString (<span class="string">"P02"</span>, ci)); <span class="comment">// Displays "P: 107.62 %"</span></span><br><span class="line">        Console.WriteLine (<span class="string">"R: &#123;0&#125;"</span>,</span><br><span class="line">            floating.ToString (<span class="string">"R"</span>, ci)); <span class="comment">// Displays "R: 10761.937554"            </span></span><br><span class="line">        Console.WriteLine ();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Output integral values</span></span><br><span class="line">        <span class="keyword">int</span> integral = <span class="number">8395</span>;</span><br><span class="line">        Console.WriteLine (<span class="string">"原始数字：8395"</span>);</span><br><span class="line">        Console.WriteLine (<span class="string">"C: &#123;0&#125;"</span>,</span><br><span class="line">            integral.ToString (<span class="string">"C"</span>, ci)); <span class="comment">// Displays "C: $8,395.00"</span></span><br><span class="line">        Console.WriteLine (<span class="string">"D: &#123;0&#125;"</span>,</span><br><span class="line">            integral.ToString (<span class="string">"D6"</span>, ci)); <span class="comment">// Displays "D: 008395" </span></span><br><span class="line">        Console.WriteLine (<span class="string">"E: &#123;0&#125;"</span>,</span><br><span class="line">            integral.ToString (<span class="string">"E03"</span>, ci)); <span class="comment">// Displays "E: 8.395E+003"</span></span><br><span class="line">        Console.WriteLine (<span class="string">"F: &#123;0&#125;"</span>,</span><br><span class="line">            integral.ToString (<span class="string">"F01"</span>, ci)); <span class="comment">// Displays "F: 8395.0"    </span></span><br><span class="line">        Console.WriteLine (<span class="string">"G: &#123;0&#125;"</span>,</span><br><span class="line">            integral.ToString (<span class="string">"G"</span>, ci)); <span class="comment">// Displays "G: 8395"</span></span><br><span class="line">        Console.WriteLine (<span class="string">"N: &#123;0&#125;"</span>,</span><br><span class="line">            integral.ToString (<span class="string">"N01"</span>, ci)); <span class="comment">// Displays "N: 8,395.0"</span></span><br><span class="line">        Console.WriteLine (<span class="string">"P: &#123;0&#125;"</span>,</span><br><span class="line">            (integral / <span class="number">10000.0</span>).ToString (<span class="string">"P02"</span>, ci)); <span class="comment">// Displays "P: 83.95 %"</span></span><br><span class="line">        Console.WriteLine (<span class="string">"X: 0x&#123;0&#125;"</span>,</span><br><span class="line">            integral.ToString (<span class="string">"X"</span>, ci)); <span class="comment">// Displays "X: 0x20CB"</span></span><br><span class="line">        Console.WriteLine ();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>输出结果</p></blockquote><pre><code>原始数字：10761.937554C: $10,761.94E: 1.076E+004F: 10761.9376G: 10761.937554N: 10,761.938P: 107.62%R: 10761.937554原始数字：8395C: $8,395.00D: 008395E: 8.395E+003F: 8395.0G: 8395N: 8,395.0P: 83.95%X: 0x20CB</code></pre><h2 id="标准数字格式化字符串-详细例子"><a href="#标准数字格式化字符串-详细例子" class="headerlink" title="标准数字格式化字符串 详细例子"></a>标准数字格式化字符串 详细例子</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Globalization;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">hello</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> dValue = <span class="number">12345.6789</span>;</span><br><span class="line">        <span class="keyword">int</span> iValue = <span class="number">12345</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//几种格式转换输出方式</span></span><br><span class="line">        System.Console.WriteLine (dValue); <span class="comment">//原值输出输出  12345.6789</span></span><br><span class="line">        System.Console.WriteLine (<span class="string">"&#123;0&#125;"</span>, dValue);</span><br><span class="line">        System.Console.WriteLine (<span class="keyword">string</span>.Format (<span class="string">"&#123;0&#125;"</span>, dValue));</span><br><span class="line">        System.Console.WriteLine (dValue.ToString ());</span><br><span class="line"></span><br><span class="line">        System.Console.WriteLine (<span class="string">"以下几种方法在数据有效范围内效果相同："</span>);</span><br><span class="line">        System.Console.WriteLine (<span class="string">"WriteLine (dValue);"</span>);</span><br><span class="line">        System.Console.WriteLine (<span class="string">"WriteLine (\"&#123;0&#125;\", dValue);"</span>);</span><br><span class="line">        System.Console.WriteLine (<span class="string">"WriteLine (string.Format (\"&#123;0&#125;\", dValue));"</span>);</span><br><span class="line">        System.Console.WriteLine (<span class="string">"WriteLine (dValue.ToString ());"</span>);</span><br><span class="line">        System.Console.WriteLine (<span class="string">"======================================"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//■■ 货币 "C" 格式说明符 ■■//</span></span><br><span class="line">        Console.WriteLine (<span class="string">"&#123;0:c&#125;"</span>, dValue); <span class="comment">//货币格式  默认两位小数  输出 ￥12,345.68</span></span><br><span class="line">        Console.WriteLine (<span class="string">"&#123;0:c2&#125;"</span>, dValue); <span class="comment">//货币格式 输出 指定两位小数  ￥12,345.68</span></span><br><span class="line">        Console.WriteLine (dValue.ToString (<span class="string">"C"</span>)); <span class="comment">//货币格式  输出  ￥12,345.68KT</span></span><br><span class="line">        Console.WriteLine (dValue.ToString (<span class="string">"C2"</span>)); <span class="comment">//货币格式  输出  ￥12,345.68</span></span><br><span class="line">        Console.WriteLine (dValue.ToString (<span class="string">"C3"</span>)); <span class="comment">//货币格式  指定三位小数  输出  ￥12,345.679</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//货币格式 当前国家 默认位小数 输出 ￥12,345.68</span></span><br><span class="line">        <span class="comment">//System.Globalization. CultureInfo.CurrentCulture</span></span><br><span class="line">        Console.WriteLine (dValue.ToString (<span class="string">"C"</span>, CultureInfo.CurrentCulture));</span><br><span class="line">        <span class="comment">//货币格式 当前国家 指定两位小数 输出 ￥12,345.68</span></span><br><span class="line">        Console.WriteLine (dValue.ToString (<span class="string">"C2"</span>, CultureInfo.CurrentCulture));</span><br><span class="line">        <span class="comment">//货币格式 中国货币 指定三位小数 输出 ￥12,345.679</span></span><br><span class="line">        Console.WriteLine (dValue.ToString (<span class="string">"C3"</span>,</span><br><span class="line">            CultureInfo.CreateSpecificCulture (<span class="string">"zh-CN"</span>)));</span><br><span class="line">        <span class="comment">//货币格式 丹麦货币 指定三位小数 输出 12.345,679 kr.</span></span><br><span class="line">        Console.WriteLine (dValue.ToString (<span class="string">"C3"</span>,</span><br><span class="line">            CultureInfo.CreateSpecificCulture (<span class="string">"da-DK"</span>)));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//■■ 十进制 "D" 格式例子 ■■//</span></span><br><span class="line">        Console.WriteLine (iValue.ToString (<span class="string">"D"</span>)); <span class="comment">//输出 12345</span></span><br><span class="line">        Console.WriteLine (iValue.ToString (<span class="string">"D8"</span>)); <span class="comment">//输出 00012345</span></span><br><span class="line">        iValue = <span class="number">-12345</span>;</span><br><span class="line">        Console.WriteLine (iValue.ToString (<span class="string">"D"</span>)); <span class="comment">//输出 -12345</span></span><br><span class="line">        Console.WriteLine (iValue.ToString (<span class="string">"D8"</span>)); <span class="comment">//输出 -00012345</span></span><br><span class="line">        <span class="comment">//错误示例 “D”只接受整型 其他编译不通过</span></span><br><span class="line">        <span class="comment">//Console.WriteLine(dValue.ToString("D8"));</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//■■ 指数 "E" 格式说明符 ■■//</span></span><br><span class="line">        Console.WriteLine (dValue.ToString (<span class="string">"E"</span>)); <span class="comment">//输出 1.234568E+004</span></span><br><span class="line">        Console.WriteLine (dValue.ToString (<span class="string">"E10"</span>)); <span class="comment">//输出 1.2345678900E+004</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//■■ 定点 “F” 格式说明符 ■■//</span></span><br><span class="line">        iValue = <span class="number">12345</span>;</span><br><span class="line">        Console.WriteLine (iValue.ToString (<span class="string">"F"</span>)); <span class="comment">//输出 12345.00</span></span><br><span class="line"></span><br><span class="line">        iValue = <span class="number">-12345</span>;</span><br><span class="line">        Console.WriteLine (iValue.ToString (<span class="string">"F3"</span>)); <span class="comment">//输出 12345.000</span></span><br><span class="line"></span><br><span class="line">        dValue = <span class="number">12345.6789</span>;</span><br><span class="line">        Console.WriteLine (dValue.ToString (<span class="string">"F"</span>)); <span class="comment">//输出 12345.68</span></span><br><span class="line">        Console.WriteLine (dValue.ToString (<span class="string">"F0"</span>)); <span class="comment">//输出 12345</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//■■ 常规 “G” 格式说明符 ■■//</span></span><br><span class="line">        dValue = <span class="number">12345.6789</span>;</span><br><span class="line">        Console.WriteLine (dValue.ToString (<span class="string">"G"</span>)); <span class="comment">// Displays  12345.6789</span></span><br><span class="line">        Console.WriteLine (dValue.ToString (<span class="string">"G"</span>,</span><br><span class="line">            CultureInfo.CreateSpecificCulture (<span class="string">"fr-FR"</span>))); <span class="comment">// Displays 12345,6789</span></span><br><span class="line"></span><br><span class="line">        Console.WriteLine (dValue.ToString (<span class="string">"G7"</span>)); <span class="comment">// Displays 12345.68</span></span><br><span class="line"></span><br><span class="line">        dValue = <span class="number">.0000023</span>;</span><br><span class="line">        Console.WriteLine (dValue.ToString (<span class="string">"G"</span>)); <span class="comment">// Displays 2.3E-06  </span></span><br><span class="line">        Console.WriteLine (dValue.ToString (<span class="string">"G"</span>,</span><br><span class="line">            CultureInfo.CreateSpecificCulture (<span class="string">"fr-FR"</span>))); <span class="comment">// Displays 2,3E-06</span></span><br><span class="line"></span><br><span class="line">        dValue = <span class="number">.0023</span>;</span><br><span class="line">        Console.WriteLine (dValue.ToString (<span class="string">"G"</span>)); <span class="comment">// Displays 0.0023</span></span><br><span class="line"></span><br><span class="line">        dValue = <span class="number">1234</span>;</span><br><span class="line">        Console.WriteLine (dValue.ToString (<span class="string">"G2"</span>)); <span class="comment">// Displays 1.2E+03</span></span><br><span class="line"></span><br><span class="line">        dValue = Math.PI;</span><br><span class="line">        Console.WriteLine (dValue.ToString (<span class="string">"G5"</span>)); <span class="comment">// Displays 3.1416</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//■■ 数字 “N” 格式说明符 ■■//</span></span><br><span class="line">        dValue = <span class="number">-12345.6789</span>;</span><br><span class="line">        Console.WriteLine (dValue.ToString (<span class="string">"G"</span>)); <span class="comment">// Displays  12345.6789N</span></span><br><span class="line"></span><br><span class="line">        Console.WriteLine (dValue.ToString (<span class="string">"N1"</span>,</span><br><span class="line">            CultureInfo.CreateSpecificCulture (<span class="string">"sv-SE"</span>))); <span class="comment">// Displays -12 445,7</span></span><br><span class="line"></span><br><span class="line">        iValue = <span class="number">123456789</span>;</span><br><span class="line">        Console.WriteLine (iValue.ToString (<span class="string">"N1"</span>,</span><br><span class="line">            CultureInfo.InvariantCulture)); <span class="comment">// Displays 123,456,789.0</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//■■ 数字 “N” 格式说明符 ■■//</span></span><br><span class="line">        dValue = <span class="number">-.2468013</span>;</span><br><span class="line">        Console.WriteLine (dValue.ToString (<span class="string">"P"</span>)); <span class="comment">// Displays -24.68 %</span></span><br><span class="line"></span><br><span class="line">        Console.WriteLine (dValue.ToString (<span class="string">"P1"</span>,</span><br><span class="line">            CultureInfo.CreateSpecificCulture (<span class="string">"sv-SE"</span>))); <span class="comment">// Displays  -24,68%  </span></span><br><span class="line"></span><br><span class="line">        Console.WriteLine (dValue.ToString (<span class="string">"P1"</span>,</span><br><span class="line">            CultureInfo.InvariantCulture)); <span class="comment">// Displays -24.7 %</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//■■ 数字 “R” 格式说明符 ■■//</span></span><br><span class="line">        dValue = Math.PI;</span><br><span class="line">        Console.WriteLine (dValue.ToString (<span class="string">"r"</span>)); <span class="comment">// Displays 3.1415926535897931</span></span><br><span class="line">        Console.WriteLine (dValue.ToString (<span class="string">"r"</span>,</span><br><span class="line">            CultureInfo.CreateSpecificCulture (<span class="string">"fr-FR"</span>))); <span class="comment">// Displays 3,1415926535897931</span></span><br><span class="line">        dValue = <span class="number">1.623e-21</span>;</span><br><span class="line">        Console.WriteLine (dValue.ToString (<span class="string">"r"</span>)); <span class="comment">// Displays 1.623E-21</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//■■ 十六进制 “X” 格式说明符 ■■//</span></span><br><span class="line">        iValue = <span class="number">0x2045e</span>;</span><br><span class="line">        Console.WriteLine (iValue.ToString (<span class="string">"x"</span>)); <span class="comment">// Displays 2045e</span></span><br><span class="line">        Console.WriteLine (iValue.ToString (<span class="string">"X"</span>)); <span class="comment">// Displays 2045E</span></span><br><span class="line">        Console.WriteLine (iValue.ToString (<span class="string">"X8"</span>)); <span class="comment">// Displays 0002045E</span></span><br><span class="line"></span><br><span class="line">        iValue = <span class="number">123456789</span>;</span><br><span class="line">        Console.WriteLine (iValue.ToString (<span class="string">"X"</span>)); <span class="comment">// Displays 75BCD15</span></span><br><span class="line">        Console.WriteLine (iValue.ToString (<span class="string">"X2"</span>)); <span class="comment">// Displays 75BCD15</span></span><br><span class="line"></span><br><span class="line">        Console.ReadKey ();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自定义数字格式化字符串例子"><a href="#自定义数字格式化字符串例子" class="headerlink" title="自定义数字格式化字符串例子"></a>自定义数字格式化字符串例子</h2><blockquote><p>下面的示例演示两个自定义数字格式字符串。 在这两个示例中，数字占位符 (#) 显示数值数据，且所有其他字符被复制到结果字符串。</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Globalization;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Example</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> number1 = <span class="number">1234567890</span>;</span><br><span class="line">        <span class="keyword">string</span> value1 = number1.ToString (<span class="string">"(###) ###-####"</span>);</span><br><span class="line">        Console.WriteLine (value1);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> number2 = <span class="number">42</span>;</span><br><span class="line">        <span class="keyword">string</span> value2 = number2.ToString (<span class="string">"My Number = #"</span>);</span><br><span class="line">        Console.WriteLine (value2);</span><br><span class="line">        <span class="comment">// The example displays the following output:</span></span><br><span class="line">        <span class="comment">//       (123) 456-7890</span></span><br><span class="line">        <span class="comment">//       My Number = 42</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="更多基本类型"><a href="#更多基本类型" class="headerlink" title="更多基本类型"></a>更多基本类型</h1><h2 id="char-（字符）类型"><a href="#char-（字符）类型" class="headerlink" title="char （字符）类型"></a>char （字符）类型</h2><blockquote><p><code>char</code> 关键字用于声明 <code>System.Char</code> 结构的实例，.NET Framework 使用该结构来表示 Unicode 字符。 <code>Char</code> 对象的值为 16 位的==数字（序号）值==（见Microsoft Docs C# 参考 <a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/char" target="_blank" rel="noopener">char</a>）。</p><ul><li>Unicode 字符用于表示世界各地大多数的书面语言。</li></ul></blockquote><table><thead><tr><th>类型</th><th>范围</th><th>大小</th><th>.NET Framwork</th></tr></thead><tbody><tr><td>char</td><td>U+0000 到 U+FFFF</td><td>Unicode 16 位字符</td><td>System.char</td></tr></tbody></table><blockquote><ul><li>后面经常用到的 \uxxxx 转义序列，XXXX是代表某个Unicode字符的16进制编码值。通过System.Text.Encoding.UTF8.GetBytes(char[])和System.Text.UnicodeEncoding.GetBytes(String)这些方法得到的值是10进制的，需要（通过 ==标准数字格式字符串== 中的 ==X2== ）转换成16进制，就是相应的Unicode编码了。</li></ul><p>char 可以隐式转换为 ushort、 int、 uint、 long、 ulong、 float、 double 或 decimal。 但是，不存在从其他类型到 char 类型的隐式转换。</p><p>char 类型的常数可以写成==字符==（例如 ‘x’）、==十六进制换码序列==（例如 ‘\t’）或 ==Unicode== （例如 ‘\u02C0’）表示形式。 您也可以显式转换整数字符代码。 在下面的示例中，几个 char 变量使用同一字符 X 初始化：</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">class</span> <span class="title">charType</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">char</span>[] chars = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">7</span>];</span><br><span class="line"></span><br><span class="line">        chars[<span class="number">0</span>] = <span class="string">'X'</span>; <span class="comment">// Character literal</span></span><br><span class="line">        chars[<span class="number">1</span>] = <span class="string">'\x0058'</span>; <span class="comment">// Hexadecimal</span></span><br><span class="line">        chars[<span class="number">2</span>] = <span class="string">'\u0058'</span>; <span class="comment">// Unicode</span></span><br><span class="line">        chars[<span class="number">3</span>] = (<span class="keyword">char</span>)<span class="number">88</span>; <span class="comment">// Cast from integral type</span></span><br><span class="line">        chars[<span class="number">4</span>] = (<span class="keyword">char</span>)<span class="number">0x0058</span>; <span class="comment">//  转换自16进制整型</span></span><br><span class="line">        chars[<span class="number">5</span>] = <span class="string">'\x5927'</span>; <span class="comment">//汉字 大 的Unicode编码</span></span><br><span class="line">        chars[<span class="number">6</span>] = <span class="string">'大'</span>; <span class="comment">//汉字 大</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">char</span> c <span class="keyword">in</span> chars)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.Write(c + <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Console.WriteLine();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取汉字“大”的编码。保存为一个字节序列</span></span><br><span class="line">        <span class="keyword">byte</span>[] bytes = Encoding.Unicode.GetBytes(<span class="string">"大"</span>);</span><br><span class="line">        <span class="comment">//得到编码的10进制字节数据 [39][89]</span></span><br><span class="line">        Console.WriteLine(<span class="string">"[&#123;0&#125;][&#123;1&#125;]"</span>, bytes[<span class="number">0</span>], bytes[<span class="number">1</span>]);</span><br><span class="line">        <span class="comment">//得到编码的16进制字节数据 [27][59] ,显示是litte-Endian方式</span></span><br><span class="line">        Console.WriteLine(<span class="string">"[&#123;0:X2&#125;][&#123;1:X2&#125;]"</span>, bytes[<span class="number">0</span>], bytes[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断 大端 Big-Endian 小端 Little-Endian</span></span><br><span class="line">        <span class="keyword">if</span> (BitConverter.IsLittleEndian)</span><br><span class="line">            Array.Reverse(bytes); <span class="comment">// 转换为 大端模式 结果为 [59][27]</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//输出 [59][27]</span></span><br><span class="line">        Console.WriteLine(<span class="string">"[&#123;0:X2&#125;][&#123;1:X2&#125;]"</span>, bytes[<span class="number">0</span>], bytes[<span class="number">1</span>]);  </span><br><span class="line"></span><br><span class="line">        Console.ReadKey();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//得到字符串中个字符(char)的Unicode编码</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">string</span> <span class="title">GetUnicode</span>(<span class="params"><span class="keyword">string</span> text</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">string</span> result = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; text.Length; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> ((<span class="keyword">int</span>)text[i] &gt; <span class="number">32</span> &amp;&amp; (<span class="keyword">int</span>)text[i] &lt; <span class="number">127</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                result += text[i].ToString();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                result += <span class="keyword">string</span>.Format(<span class="string">"\\u&#123;0:x4&#125;"</span>, (<span class="keyword">int</span>)text[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>输出结果</p></blockquote><pre><code>X X X X X 大 大[39][89][27][59][59][27]</code></pre><h3 id="高级主题：解析字符串中字符的16进制编码（Unicode）"><a href="#高级主题：解析字符串中字符的16进制编码（Unicode）" class="headerlink" title="高级主题：解析字符串中字符的16进制编码（Unicode）"></a>高级主题：解析字符串中字符的16进制编码（Unicode）</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span> (<span class="params"><span class="keyword">string</span>[] args</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">string</span> input = <span class="string">"你好 大世界！Hello World!"</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; input.Length; i++) &#123;</span><br><span class="line">            <span class="comment">// 占位符 方式</span></span><br><span class="line">            Console.Write (<span class="string">"&#123;0&#125; &#123;1&#125; "</span>, input[i], ((<span class="keyword">int</span>) input[i]).ToString (<span class="string">"X"</span>));</span><br><span class="line">            <span class="comment">// 字符串内插 $ 方式</span></span><br><span class="line">            Console.Write (<span class="string">$"<span class="subst">&#123;input[i]&#125;</span> <span class="subst">&#123;((<span class="keyword">int</span>)input[i]).ToString(<span class="string">"X"</span>)&#125;</span> "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.Console.WriteLine ();</span><br><span class="line">        Console.ReadKey ();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>输出结果</p></blockquote><pre><code>你 4F60 好 597D   20 大 5927 世 4E16 界 754C ！ FF01 H 48 e 65 l 6C l 6C o 6F   20 W 57 o 6F r 72 l 6C d 64 ! 21</code></pre><h3 id="高级主题：大端-Big-Endian-小端-Little-Endian"><a href="#高级主题：大端-Big-Endian-小端-Little-Endian" class="headerlink" title="高级主题：大端 Big-Endian 小端 Little-Endian"></a>高级主题：大端 Big-Endian 小端 Little-Endian</h3><p>不同的计算机结构采用不同的字节顺序存储数据。” Big-endian”表示最大的有效字节位于单词的左端。” Little-endian”表示最大的有效字节位于单词的右端。</p><blockquote><p>另以一种解释</p><ul><li>Little-Endian 就是低位字节排放在内存的低地址端，高位字节排放在内存的高地址端。</li><li>Big-Endian 就是高位字节排放在内存的低地址端，低位字节排放在内存的高地址端。</li></ul><p>例子，比如数字0x12 34 56 78在内存中的表示形式为：</p><ul><li>大端模式：</li></ul></blockquote><pre><code>低地址 -----------------&gt; 高地址0x12  |  0x34  |  0x56  |  0x78</code></pre><blockquote><ul><li>小端模式：</li></ul></blockquote><pre><code>低地址 ------------------&gt; 高地址0x78  |  0x56  |  0x34  |  0x12</code></pre><blockquote><p>可见，大端模式和字符串的存储模式类似。</p><ul><li>具体例子：汉字“大”（\u5927）的Unicode编码在 Little-endian 模式（以及 Big-endian 模式）CPU内存中的存放方式（假设从地址0x4000开始存放）为：</li></ul></blockquote><table><thead><tr><th>内存地址</th><th>小端模式存放内容</th><th>大端模式存放内容</th></tr></thead><tbody><tr><td>0x4000</td><td>0x27</td><td>0x59</td></tr><tr><td>0x4001</td><td>0x59</td><td>0x27</td></tr></tbody></table><h3 id="转义序列-escape-sequence"><a href="#转义序列-escape-sequence" class="headerlink" title="转义序列 escape sequence"></a>转义序列 escape sequence</h3><blockquote><p>由反斜杠 ( \ ) 后接字母或数字组合构成的字符组合称为“转义序列”。要在字符常量中表示换行符，单引号或某些其他字符，你必须使用转义序列。 转义序列被视为单个字符，因此，它是有效的字符常量。</p><p>转义序列通常用于指定操作，例如终端和打印机上的回车和制表符移动。它们还用于提供非打印字符的文本表现形式和通常具有特殊意义的字符，例如双引号 ( “ )。 下表列出 ANSI 转义序列以及它们所表示的内容。</p><p>请注意，在字符序列将被错误解释为三元组的情况下，前接反斜杠的问号 ( \?) 指定文本问号。</p></blockquote><table><thead><tr><th>转义序列</th><th>含义（字符名称）</th><th>Unicode Encoding（Unicode 编码）</th></tr></thead><tbody><tr><td>\’</td><td>单引号</td><td>0x0027</td></tr><tr><td>\”</td><td>双引号</td><td>0x0022</td></tr><tr><td>\\</td><td>反斜杠</td><td>0x005C</td></tr><tr><td>\?</td><td>文本问号</td></tr><tr><td>\0</td><td>Null</td><td>0x0000</td></tr><tr><td>\a</td><td>Alert 或 Bell 铃声(提醒)</td><td>0x0007</td></tr><tr><td>\b</td><td>Backspace 退格</td><td>0x0008</td></tr><tr><td>\f</td><td>换页</td><td>0x000C</td></tr><tr><td>\n</td><td>换行</td><td>0x000A</td></tr><tr><td>\r</td><td>回车</td><td>0x000D</td></tr><tr><td>\t</td><td>水平制表符</td><td>0x0009</td></tr><tr><td>\v</td><td>垂直制表符</td><td>0x000B</td></tr><tr><td>\ ooo</td><td>在八进制表示法的 ASCII 字符</td></tr><tr><td>\uxxxx</td><td>16进制Unicode字符，Unicode 转义序列</td><td>\u0041 = “A”</td></tr><tr><td>\x [h][h][h]h</td><td>16进制Unicode字符，（前三个占位符可选），\uxxxx的长度可变版本。<br><br>除长度可变外，Unicode 转义序列与“\u”类似。</td><td>\u3A</td></tr><tr><td>\x hh</td><td>以十六进制表示法的 ASCII 字符</td></tr><tr><td>\x hhhh</td><td>十六进制表示法的 Unicode 字符<br><br>（如果此转义序列用于宽字符常量或 Unicode 字符串文本）。<br><br>以十六进制表示法，则此转义序列用于常量宽字符或 Unicode 字符串的 Unicode 字符。<br><br>例如，WCHAR f = L’\x4e00’ <br><br>或 WCHAR b[] = L”The Chinese character for one is \x4e00”。</td><td>\x0041 = “A”</td></tr><tr><td>\Unnnnnnnn</td><td>U代理项对的 Unicode 转义序列。</td><td>\Unnnnnnnn</td></tr></tbody></table><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><h3 id="常规字符串-regular"><a href="#常规字符串-regular" class="headerlink" title="常规字符串 regular"></a>常规字符串 regular</h3><blockquote><p>常规字符串</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">string</span> columns = <span class="string">"Column 1\tColumn 2\tColumn 3"</span>;</span><br><span class="line"><span class="comment">//Output: Column 1        Column 2        Column 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">string</span> rows = <span class="string">"Row 1\r\nRow 2\r\nRow 3"</span>;</span><br><span class="line"><span class="comment">/* Output:</span></span><br><span class="line"><span class="comment">  Row 1</span></span><br><span class="line"><span class="comment">  Row 2</span></span><br><span class="line"><span class="comment">  Row 3</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">string</span> title = <span class="string">"\"The \u00C6olean Harp\", by Samuel Taylor Coleridge"</span>;</span><br><span class="line"><span class="comment">//Output: "The Æolean Harp", by Samuel Taylor Coleridge</span></span><br></pre></td></tr></table></figure><h3 id="逐字字符串"><a href="#逐字字符串" class="headerlink" title="@ 逐字字符串"></a>@ 逐字字符串</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">string</span> filePath = <span class="string">@"C:\Users\scoleridge\Documents\"</span>;</span><br><span class="line"><span class="comment">//Output: C:\Users\scoleridge\Documents\</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">string</span> text = <span class="string">@"My pensive SARA ! thy soft cheek reclined</span></span><br><span class="line"><span class="string">    Thus on mine arm, most soothing sweet it is</span></span><br><span class="line"><span class="string">    To sit beside our Cot,..."</span>;</span><br><span class="line"><span class="comment">/* Output:</span></span><br><span class="line"><span class="comment">My pensive SARA ! thy soft cheek reclined</span></span><br><span class="line"><span class="comment">   Thus on mine arm, most soothing sweet it is</span></span><br><span class="line"><span class="comment">   To sit beside our Cot,... </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">System.Console.Write (<span class="string">@"begin</span></span><br><span class="line"><span class="string">             /\</span></span><br><span class="line"><span class="string">            /  \</span></span><br><span class="line"><span class="string">           /    \</span></span><br><span class="line"><span class="string">          /      \</span></span><br><span class="line"><span class="string">         /________\</span></span><br><span class="line"><span class="string">end"</span>);</span><br><span class="line"><span class="comment">/*输出</span></span><br><span class="line"><span class="comment">begin</span></span><br><span class="line"><span class="comment">             /\</span></span><br><span class="line"><span class="comment">            /  \</span></span><br><span class="line"><span class="comment">           /    \</span></span><br><span class="line"><span class="comment">          /      \</span></span><br><span class="line"><span class="comment">         /________\</span></span><br><span class="line"><span class="comment">end</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">string</span> quote = <span class="string">@"Her name was ""Sara."""</span>;</span><br><span class="line"><span class="comment">//Output: Her name was "Sara."</span></span><br></pre></td></tr></table></figure><h3 id="字符串内插"><a href="#字符串内插" class="headerlink" title="$ 字符串内插"></a>$ 字符串内插</h3><blockquote><p>借助==字符串内插==，可以将字符串中的占位符替换成字符串变量的值。 在 C# 6 中，我们最终实现了这种样式的字符串内插。 可以在字符串前面使用 $，以指明应使用变量/表达式替换相应的值。</p><ul><li>在低于 C# 6 的版本中，使用 System.String.Format 实现字符串内插。 虽然这样做是可行的，但由于要用到编号占位符，因此加大了读取难度且过程更为冗长。</li></ul></blockquote><h4 id="先决条件"><a href="#先决条件" class="headerlink" title="先决条件"></a>先决条件</h4><blockquote><p>使用==字符串内插==，必须将计算机设置为运行 ==.Net Core==。</p></blockquote><h4 id="字符串内插简介"><a href="#字符串内插简介" class="headerlink" title="字符串内插简介"></a>字符串内插简介</h4><blockquote><p>使用 System.String.Format在字符串中指定要被字符串后面的参数替换的“==占位符==”。 例如：</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> firstName = <span class="string">"Matt"</span>;</span><br><span class="line"><span class="keyword">var</span> lastName = <span class="string">"Groves"</span>;</span><br><span class="line"><span class="keyword">var</span> str = String.Format(<span class="string">"My name is &#123;0&#125; &#123;1&#125;"</span>, firstName, lastName);</span><br><span class="line">Console.WriteLine(str);</span><br></pre></td></tr></table></figure><blockquote><p>输出结果</p></blockquote><pre><code>“My name is Matt Groves”</code></pre><blockquote><p>在 C# 6 中，定义内插字符串的方式为，在内插字符串前面添加 ==$== 符号，然后直接在字符串中使用变量，而不使用 String.Format。 例如：</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> firstName = <span class="string">"Matt"</span>;</span><br><span class="line"><span class="keyword">var</span> lastName = <span class="string">"Groves"</span>;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">$"My name is <span class="subst">&#123;firstName&#125;</span> <span class="subst">&#123;lastName&#125;</span>"</span>;</span><br><span class="line">Console.WriteLine(str);</span><br></pre></td></tr></table></figure><blockquote><p>输出结果</p></blockquote><pre><code>“My name is Matt Groves”</code></pre><blockquote><p>不必局限于变量。 ==可以在括号内使用任意表达式==。 例如：</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">    Console.WriteLine(<span class="string">$"This is line number <span class="subst">&#123;i + <span class="number">1</span>&#125;</span>"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>输出结果</p></blockquote><pre><code>This is line number 1This is line number 2This is line number 3This is line number 4This is line number 5</code></pre><h4 id="字符串内插的工作方式"><a href="#字符串内插的工作方式" class="headerlink" title="字符串内插的工作方式"></a>字符串内插的工作方式</h4><blockquote><p>在后台，编译器将此类字符串内插语法转换成 String.Format。 因此，可以执行之前使用 String.Format 执行的相同操作。</p><p>例如，可以添加填充和数值格式：</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> rand = <span class="keyword">new</span> Random();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">998</span>; i &lt; <span class="number">1005</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> randomDecimal = rand.NextDouble() * <span class="number">10000</span>;</span><br><span class="line">    Console.WriteLine(<span class="string">$"<span class="subst">&#123;i, <span class="number">-10</span>&#125;</span> <span class="subst">&#123;randomDecimal, <span class="number">6</span>:N2&#125;</span>"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>输出结果</p></blockquote><pre><code>998        5,177.67999        6,719.301000       9,910.611001       529.341002       1,349.861003       2,660.821004       6,227.77</code></pre><h3 id="字符串转字符数组"><a href="#字符串转字符数组" class="headerlink" title="字符串转字符数组"></a>字符串转<code>字符</code>数组</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">class</span> <span class="title">TestRef</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">string</span> a = <span class="string">"Hello World! 你好 大世界"</span>;</span><br><span class="line">        <span class="keyword">char</span>[] b = a.ToCharArray ();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; b.Length; i++) &#123;</span><br><span class="line">            Console.Write (b[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 输出 Hello World! 你好 大世界</span></span><br><span class="line"></span><br><span class="line">        Console.WriteLine ();</span><br><span class="line"></span><br><span class="line">        Array.Reverse (b);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; b.Length; i++) &#123;</span><br><span class="line">            Console.Write (b[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 输出 界世大 好你 !dlroW olleH</span></span><br><span class="line"></span><br><span class="line">        System.Console.ReadKey ();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字符串数组"><a href="#字符串数组" class="headerlink" title="字符串数组"></a>字符串数组</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//只有在使用字符串数组初始化字符串时，才能使用 new 运算符串讲字符串对象</span></span><br><span class="line"><span class="keyword">string</span>[] xx = <span class="keyword">new</span> <span class="keyword">string</span>[<span class="number">8</span>];</span><br><span class="line">xx[<span class="number">0</span>] = <span class="string">"aaaa"</span>;</span><br><span class="line">xx[<span class="number">1</span>] = <span class="string">"bbbb"</span>;</span><br><span class="line">System.Console.WriteLine(xx[<span class="number">0</span>]); <span class="comment">//输出 aaaa</span></span><br><span class="line">System.Console.WriteLine(xx[<span class="number">1</span>]); <span class="comment">//输出 bbbb</span></span><br></pre></td></tr></table></figure><h3 id="字符串对象的不可变性"><a href="#字符串对象的不可变性" class="headerlink" title="字符串对象的不可变性"></a>字符串对象的不可变性</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">string</span> text;</span><br><span class="line"></span><br><span class="line">System.Console.Write (<span class="string">"Enter text: "</span>);</span><br><span class="line">text = System.Console.ReadLine ();</span><br><span class="line"></span><br><span class="line"><span class="comment">// UNEXPECTED:  Does not convert text to uppercase</span></span><br><span class="line">text.ToUpper ();</span><br><span class="line"></span><br><span class="line">System.Console.WriteLine (text);</span><br></pre></td></tr></table></figure><blockquote><p>输出结果</p></blockquote><pre><code>Enter text: This is a test of the emergency broadcast system.This is a test of the emergency broadcast system.</code></pre><blockquote><p>字符串对象是“==不可变的==”：它们在创建后无法更改。 看起来是在修改字符串的所有 String 方法和 C# 运算符实际上都是在新的字符串对象中返回结果。</p><p>因此，text.ToUpper()不会改变 text 的内容为大写，而是返回了一个新的字符串，它需要保存到变量中，或者直接传给System.Console.WriteLine()。下面代码是改进后的：</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">string</span> text, uppercase;</span><br><span class="line">System.Console.Write (<span class="string">"Enter text: "</span>);</span><br><span class="line">text = System.Console.ReadLine (); <span class="comment">// Return a new string in uppercase</span></span><br><span class="line">uppercase = text.ToUpper ();</span><br><span class="line">System.Console.WriteLine (uppercase);</span><br></pre></td></tr></table></figure><blockquote><p>输出结果</p></blockquote><pre><code>Enter text: This is a test of the emergency broadcast system.THIS IS A TEST OF THE EMERGENCY BROADCAST SYSTEM.</code></pre><h3 id="访问单个字符"><a href="#访问单个字符" class="headerlink" title="访问单个字符"></a>访问单个字符</h3><blockquote><p>可以使用包含索引值的数组表示法来获取对单个字符的只读访问权限，如下面的示例中所示：</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">string</span> s5 = <span class="string">"Printing backwards"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s5.Length; i++)</span><br><span class="line">&#123;</span><br><span class="line">    System.Console.Write(s5[s5.Length - i - <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Output: "sdrawkcab gnitnirP"</span></span><br></pre></td></tr></table></figure><blockquote><p>如果 String 方法不提供修改字符串中的各个字符所需的功能，可以使用 ==StringBuilder== 对象“就地”修改各个字符，再新建字符串来使用 StringBuilder 方法存储结果。 在下面的示例中，假定必须以特定方式修改原始字符串，然后存储结果以供未来使用：</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">string</span> question = <span class="string">"hOW DOES mICROSOFT wORD DEAL WITH THE cAPS lOCK KEY?"</span>;</span><br><span class="line">System.Text.StringBuilder sb = <span class="keyword">new</span> System.Text.StringBuilder(question);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; sb.Length; j++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (System.Char.IsLower(sb[j]) == <span class="literal">true</span>)</span><br><span class="line">        sb[j] = System.Char.ToUpper(sb[j]);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (System.Char.IsUpper(sb[j]) == <span class="literal">true</span>)</span><br><span class="line">        sb[j] = System.Char.ToLower(sb[j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Store the new string.</span></span><br><span class="line"><span class="keyword">string</span> corrected = sb.ToString();</span><br><span class="line">System.Console.WriteLine(corrected);</span><br><span class="line"><span class="comment">// Output: How does Microsoft Word deal with the Caps Lock key?</span></span><br></pre></td></tr></table></figure><h3 id="使用-StringBuilder-快速创建字符串"><a href="#使用-StringBuilder-快速创建字符串" class="headerlink" title="使用 StringBuilder 快速创建字符串"></a>使用 StringBuilder 快速创建字符串</h3><blockquote><p>.NET 中的字符串操作进行了高度的优化，在大多数情况下不会显著影响性能。 但是，在某些情况下（例如，执行数百次或数千次的紧密循环），字符串操作可能影响性能。 StringBuilder 类创建字符串缓冲区，用于在程序执行多个字符串操控时提升性能。 使用 StringBuilder 字符串，还可以重新分配各个字符，而内置字符串数据类型则不支持这样做。 例如，此代码更改字符串的内容，而无需创建新的字符串：</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">System.Text.StringBuilder sb = <span class="keyword">new</span> System.Text.StringBuilder(<span class="string">"Rat: the ideal pet"</span>);</span><br><span class="line">sb[<span class="number">0</span>] = <span class="string">'C'</span>;</span><br><span class="line">System.Console.WriteLine(sb.ToString());</span><br><span class="line">System.Console.ReadLine();</span><br><span class="line"></span><br><span class="line"><span class="comment">//Outputs Cat: the ideal pet</span></span><br></pre></td></tr></table></figure><blockquote><p>在以下示例中，StringBuilder 对象用于通过一组数字类型创建字符串：</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">TestStringBuilder</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.Text.StringBuilder sb = <span class="keyword">new</span> System.Text.StringBuilder();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Create a string composed of numbers 0 - 9</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            sb.Append(i.ToString());</span><br><span class="line">        &#125;</span><br><span class="line">        System.Console.WriteLine(sb);  <span class="comment">// displays 0123456789</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Copy one character of the string (not possible with a System.String)</span></span><br><span class="line">        sb[<span class="number">0</span>] = sb[<span class="number">9</span>];</span><br><span class="line"></span><br><span class="line">        System.Console.WriteLine(sb);  <span class="comment">// displays 9123456789</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Null-字符串和空字符串"><a href="#Null-字符串和空字符串" class="headerlink" title="Null 字符串和空字符串"></a>Null 字符串和空字符串</h3><blockquote><p>空字符串是包含零个字符的 System.String 对象实例。 空字符串常用在各种编程方案中，表示空文本字段。 可以对空字符串调用方法，因为它们是有效的 System.String 对象。 对空字符串进行了初始化，如下所示：</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">string</span> s = String.Empty;</span><br></pre></td></tr></table></figure><blockquote><p>相比较而言，null 字符串并不指 System.String 对象实例，只要尝试对 null 字符串调用方法，都会引发 NullReferenceException。 但是，可以在串联和与其他字符串的比较操作中使用 null 字符串。 以下示例说明了对 null 字符串的引用会引发和不会引发意外的某些情况：</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">string</span> str = <span class="string">"hello"</span>;</span><br><span class="line">    <span class="keyword">string</span> nullStr = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">string</span> emptyStr = String.Empty;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">string</span> tempStr = str + nullStr;</span><br><span class="line">    <span class="comment">// Output of the following line: hello</span></span><br><span class="line">    Console.WriteLine(tempStr);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> b = (emptyStr == nullStr);</span><br><span class="line">    <span class="comment">// Output of the following line: False</span></span><br><span class="line">    Console.WriteLine(b);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// The following line creates a new empty string.</span></span><br><span class="line">    <span class="keyword">string</span> newStr = emptyStr + nullStr;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Null strings and empty strings behave differently. The following</span></span><br><span class="line">    <span class="comment">// two lines display 0.</span></span><br><span class="line">    Console.WriteLine(emptyStr.Length);</span><br><span class="line">    Console.WriteLine(newStr.Length);</span><br><span class="line">    <span class="comment">// The following line raises a NullReferenceException.</span></span><br><span class="line">    <span class="comment">//Console.WriteLine(nullStr.Length);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// The null character can be displayed and counted, like other chars.</span></span><br><span class="line">    <span class="keyword">string</span> s1 = <span class="string">"\x0"</span> + <span class="string">"abc"</span>;</span><br><span class="line">    <span class="keyword">string</span> s2 = <span class="string">"abc"</span> + <span class="string">"\x0"</span>;</span><br><span class="line">    <span class="comment">// Output of the following line: * abc*</span></span><br><span class="line">    Console.WriteLine(<span class="string">"*"</span> + s1 + <span class="string">"*"</span>);</span><br><span class="line">    <span class="comment">// Output of the following line: *abc *</span></span><br><span class="line">    Console.WriteLine(<span class="string">"*"</span> + s2 + <span class="string">"*"</span>);</span><br><span class="line">    <span class="comment">// Output of the following line: 4</span></span><br><span class="line">    Console.WriteLine(s2.Length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="比较字符串"><a href="#比较字符串" class="headerlink" title="比较字符串"></a>比较字符串</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">string</span> sCompare = <span class="string">"h"</span>;</span><br><span class="line"><span class="keyword">int</span> result = <span class="keyword">string</span>.Compare (sCompare, <span class="string">"a"</span>);</span><br><span class="line">System.Console.WriteLine (result); <span class="comment">//输出  1   "h" &gt; "a" </span></span><br><span class="line">result = <span class="keyword">string</span>.Compare (sCompare, <span class="string">"h"</span>, <span class="literal">true</span>);</span><br><span class="line">System.Console.WriteLine (result); <span class="comment">//输出  0   "h" = "h" </span></span><br><span class="line">result = <span class="keyword">string</span>.Compare (sCompare, <span class="string">"x"</span>, <span class="literal">true</span>);</span><br><span class="line">System.Console.WriteLine (result); <span class="comment">//输出 -1   "h" &lt; "x"</span></span><br></pre></td></tr></table></figure><h3 id="子字符串"><a href="#子字符串" class="headerlink" title="子字符串"></a>子字符串</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">string</span> s3 = <span class="string">"Visual C# Express"</span>;</span><br><span class="line">System.Console.WriteLine (s3.Substring (<span class="number">7</span>, <span class="number">2</span>)); <span class="comment">// Output: "C#"</span></span><br><span class="line"></span><br><span class="line">System.Console.WriteLine (s3.Replace (<span class="string">"C#"</span>, <span class="string">"Basic"</span>)); </span><br><span class="line"><span class="comment">// Output: "Visual Basic Express"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Index values are zero-based</span></span><br><span class="line"><span class="keyword">int</span> index = s3.IndexOf (<span class="string">"C"</span>); <span class="comment">// index = 7</span></span><br></pre></td></tr></table></figure><h1 id="null-和-void、"><a href="#null-和-void、" class="headerlink" title="null 和 void、"></a>null 和 void、</h1><blockquote><p>null 值表明变量不引用任何有效的对象。void 表示没有类型、或者没有任何值。</p></blockquote><h2 id="null"><a href="#null" class="headerlink" title="null"></a>null</h2><blockquote><p>null 可以作为字符串类型的字面量。null 值只能赋给引用类型、指针类型和可空类型。变量设为null，会显式地设置引用，使它不指向任何位置。</p><p>null 不等于 “” 。”” 意味变量有一个叫做“空字符串”的值。null 以为这变量无任何值。</p></blockquote><h2 id="void"><a href="#void" class="headerlink" title="void"></a>void</h2><blockquote><p>指定为 void 类型就无需传递任何数据了。void 本质上并不是一个数据类型，知识用于指出没有数据类型这一事实。</p></blockquote><h3 id="高级主题：隐式类型的局部变量"><a href="#高级主题：隐式类型的局部变量" class="headerlink" title="高级主题：隐式类型的局部变量"></a>高级主题：隐式类型的局部变量</h3><blockquote><p>C# 3.0增加了上下文关键字 var 来声明隐式类型的局部变量。该变量在编译时仍然会接收一个类型，但该类型是由编译器提供的。</p><p>虽然允许使用 var 取代显示的数据类型，但是在数据类型已知的情况下，最好不要使用 var。</p><p>C# 3.0添加 var 的目的是支持匿名类型。匿名类型是在方法内部动态声明数据类型，而不是通过显式的类定义来生命的，如下例：</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SamplesString</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> patent1 =</span><br><span class="line">            <span class="keyword">new</span> &#123;</span><br><span class="line">                Title = <span class="string">"Bifocals"</span>,</span><br><span class="line">                YearOfPublication = <span class="string">"1784"</span></span><br><span class="line">            &#125;;</span><br><span class="line">        <span class="keyword">var</span> patent2 =</span><br><span class="line">            <span class="keyword">new</span> &#123;</span><br><span class="line">                Title = <span class="string">"Phonograph"</span>,</span><br><span class="line">                YearOfPublication = <span class="string">"1877"</span></span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">        System.Console.WriteLine (<span class="string">"&#123;0&#125; (&#123;1&#125;)"</span>,</span><br><span class="line">            patent1.Title, patent1.YearOfPublication);</span><br><span class="line"></span><br><span class="line">        System.Console.WriteLine (<span class="string">"&#123;0&#125; (&#123;1&#125;)"</span>,</span><br><span class="line">            patent2.Title, patent2.YearOfPublication);</span><br><span class="line"></span><br><span class="line">        Console.ReadKey ();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>输出结果</p></blockquote><pre><code>Bifocals (1784)Phonograph (1877)</code></pre><blockquote><p>var 声明局部变量的各种方式</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// i is compiled as an int</span></span><br><span class="line"><span class="keyword">var</span> i = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// s is compiled as a string</span></span><br><span class="line"><span class="keyword">var</span> s = <span class="string">"Hello"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// a is compiled as int[]</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span>[] &#123; <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// expr is compiled as IEnumerable&lt;Customer&gt;</span></span><br><span class="line"><span class="comment">// or perhaps IQueryable&lt;Customer&gt;</span></span><br><span class="line"><span class="keyword">var</span> expr =</span><br><span class="line">    <span class="keyword">from</span> c <span class="keyword">in</span> customers</span><br><span class="line">    <span class="keyword">where</span> c.City == <span class="string">"London"</span></span><br><span class="line">    <span class="keyword">select</span> c;</span><br><span class="line"></span><br><span class="line"><span class="comment">// anon is compiled as an anonymous type</span></span><br><span class="line"><span class="keyword">var</span> anon = <span class="keyword">new</span> &#123; Name = <span class="string">"Terry"</span>, Age = <span class="number">34</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// list is compiled as List&lt;int&gt;</span></span><br><span class="line"><span class="keyword">var</span> list = <span class="keyword">new</span> List&lt;<span class="keyword">int</span>&gt;();</span><br></pre></td></tr></table></figure><blockquote><p>在以下上下文中，使用 var 关键字</p><ul><li>在 for 初始化语句中。</li></ul></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> x = <span class="number">1</span>; x &lt; <span class="number">10</span>; x++)</span><br></pre></td></tr></table></figure><blockquote><ul><li>在 foreach 初始化语句中。</li></ul></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">foreach</span>(<span class="keyword">var</span> item <span class="keyword">in</span> list)&#123;...&#125;</span><br></pre></td></tr></table></figure><blockquote><ul><li>在 using 域间中。</li></ul></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> (<span class="keyword">var</span> file = <span class="keyword">new</span> StreamReader(<span class="string">"C:\\myfile.txt"</span>)) &#123;...&#125;</span><br></pre></td></tr></table></figure><h1 id="可空修饰符-可以为null的类型"><a href="#可空修饰符-可以为null的类型" class="headerlink" title="可空修饰符 可以为null的类型 ?"></a>可空修饰符 可以为null的类型 ?</h1><p>C# 2.0 开始引入的这个特性，没有值表示“未定义”的意思。</p><blockquote><p>可通过以下两种方式之一声明可为 null 的类型：</p></blockquote><pre><code>System.Nullable&lt;T&gt; variableT? variable</code></pre><blockquote><p>T 是可以为 null 的类型的基础类型。 T 可以是包括 struct 在内的任意值类型；它不能是引用类型。</p></blockquote><h2 id="可为-null-的类型示例-int"><a href="#可为-null-的类型示例-int" class="headerlink" title="可为 null 的类型示例 int?"></a>可为 null 的类型示例 int?</h2><blockquote><p>任何值类型都可用作 作为null的类型 的基础。例如：</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>? i = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">double</span>? d1 = <span class="number">3.14</span>;</span><br><span class="line"><span class="keyword">bool</span>? flag = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">char</span>? letter = <span class="string">'a'</span>;</span><br><span class="line"><span class="keyword">int</span>?[] arr = <span class="keyword">new</span> <span class="keyword">int</span>?[<span class="number">10</span>];</span><br></pre></td></tr></table></figure><h2 id="可为-null-的类型的成员"><a href="#可为-null-的类型的成员" class="headerlink" title="可为 null 的类型的成员"></a>可为 null 的类型的成员</h2><blockquote><p>可以为 null 的类型的每个实例都有两个公共只读属性：</p><ul><li>==HasValue== 类型为 bool。 如果该变量包含非 null 值，则将其设置为 true。</li><li>==Value== 与基础类型相同。 如果 HasValue 为 true，则 Value 包含有意义的值。 如果 HasValue 是 false，则访问 Value 将引发 InvalidOperationException。</li></ul><p>将 null 赋给值类型，在数据库编程中尤其有用。在数据表中，经常出现值类型的列允许为空的情况。除非允许包含 null 值，否则在C#代码中检索这些列并将他们的值赋给对应的字段会出现问题。可控修饰符妥善地解决了这个问题。</p></blockquote><h2 id="高级主题：null-合并运算符"><a href="#高级主题：null-合并运算符" class="headerlink" title="高级主题：null 合并运算符 ??"></a>高级主题：null 合并运算符 ??</h2><blockquote><p>?? 运算符定义一个默认值，若将一个可为 null 的类型赋给不可为 null 的类型，则会返回该值。</p><p>?? 运算符称作 null 合并运算符 (空接合操作符)。 如果此运算符的左操作数不为 null，则此运算符将返回左操作数；否则返回右操作数。</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>? x = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Set y to the value of x if x is NOT null; otherwise,</span></span><br><span class="line"><span class="comment">// if x == null, set y to -1.</span></span><br><span class="line"><span class="keyword">int</span> y = x ?? <span class="number">-1</span>;</span><br></pre></td></tr></table></figure><blockquote><p>空接合操作符可以“链接”。例如，对于表达式 <code>x ?? y ?? z</code> ,如果 x 不为 null 则返回 x ；否则，如果 y 不为 null 则返回 y；否则返回 z。</p></blockquote><h2 id="高级主题：NULL条件运算符"><a href="#高级主题：NULL条件运算符" class="headerlink" title="高级主题：NULL条件运算符 ?."></a>高级主题：NULL条件运算符 ?.</h2><p>用于在执行成员访问 ==(?.)== 或索引 ==(?[)== ==操作之前==，测试是否存在 NULL。 这些运算符可帮助编写更少的代码来处理 null 检查，尤其是对于下降到数据结构。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>? length = customers?.Length; <span class="comment">// null if customers is null   </span></span><br><span class="line">Customer first = customers?[<span class="number">0</span>];  <span class="comment">// null if customers is null </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// null if customers, the first customer, or Orders is null</span></span><br><span class="line"><span class="keyword">int</span>? count = customers?[<span class="number">0</span>]?.Orders?.Count();  </span><br><span class="line"></span><br><span class="line"><span class="comment">// ?. 结合 ??</span></span><br><span class="line"><span class="keyword">int</span>? len = customers?.Length ?? <span class="number">0</span>;</span><br></pre></td></tr></table></figure><h2 id="高级主题：条件运算符"><a href="#高级主题：条件运算符" class="headerlink" title="高级主题：条件运算符 ?:"></a>高级主题：条件运算符 <code>?:</code></h2><p>条件运算符 <code>?:</code> 根据 Boolean 表达式的值返回两个值之一。下面是条件运算符的语法。</p><pre><code>condition ? first_expression : second_expression;</code></pre><p><code>condition</code> 的计算结果必须为 <code>true</code> 或 <code>false</code>。 如果 <code>condition</code> 为 <code>true</code>，则将计算 <code>first_expression</code> 并使其成为结果。 如果 <code>condition</code> 为 <code>false</code>，则将计算 <code>second_expression</code> 并使其成为结果。 只计算两个表达式之一。<br><code>first_expression</code> 和 <code>second_expression</code> 的类型必须相同，或者必须存在从一种类型到另一种类型的隐式转换。</p><p>你可通过使用条件运算符表达可能更确切地要求 <code>if-else</code> 构造的计算。 例如，以下代码首先使用 <code>if</code> 语句，然后使用条件运算符将整数分类为正整数或负整数。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> input = Convert.ToInt32(Console.ReadLine());</span><br><span class="line"><span class="keyword">string</span> classify;</span><br><span class="line"></span><br><span class="line"><span class="comment">// if-else construction.</span></span><br><span class="line"><span class="keyword">if</span> (input &gt; <span class="number">0</span>)</span><br><span class="line">    classify = <span class="string">"positive"</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    classify = <span class="string">"negative"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ?: conditional operator.</span></span><br><span class="line">classify = (input &gt; <span class="number">0</span>) ? <span class="string">"positive"</span> : <span class="string">"negative"</span>;</span><br></pre></td></tr></table></figure><blockquote><p>条件运算符为右联运算符。 表达式 <code>a ? b : c ? d : e</code> 作为 <code>a ? b : (c ? d : e)</code> 而非 <code>(a ? b : c) ? d : e</code> 进行计算。</p><p>无法重载条件运算符。</p></blockquote><h1 id="类型的分类"><a href="#类型的分类" class="headerlink" title="类型的分类"></a>类型的分类</h1><h2 id="值类型"><a href="#值类型" class="headerlink" title="值类型"></a>值类型</h2><p>C# 中有两种类型：==引用类型==和==值类型==。 引用类型的变量存储对其数据（对象）的引用，而值类型的变量直接包含其数据。 对于引用类型，两种变量可引用同一对象；因此，对一个变量执行的操作会影响另一个变量所引用的对象。 对于值类型，每个变量都具有其自己的数据副本，对一个变量执行的操作不会影响另一个变量（ref 和 out 参数变量除外，请参阅 ref 和 out 参数修饰符）。</p><blockquote><p>值类型直接包含值，变量引用的位置就是值在内存中的实际存储位置。</p><ul><li>将一个变量的值赋给另一个变量会导致在新变量的位置创建原始变量值的一个内存副本。</li><li>类似的，将值类型的示例传给方法，如 Console.WriteLine(),也会产生一个内存副本。</li><li>由于值类型需要创建内存副本，因此定义时不要让它们占用太多内存（通常应该给小于16字节）。</li></ul></blockquote><h2 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h2><blockquote><p>引用类型的变量存储的时对数据存储位置的引用，而不是直接存储数据。</p></blockquote><h1 id="数据类型-转换"><a href="#数据类型-转换" class="headerlink" title="数据类型 转换"></a>数据类型 转换</h1><h2 id="显式转换（explicit-conversions-casts-强制转换）"><a href="#显式转换（explicit-conversions-casts-强制转换）" class="headerlink" title="显式转换（explicit conversions | casts | 强制转换）"></a>显式转换（explicit conversions | casts | 强制转换）</h2><blockquote><p>显式转换需要强制转换运算符。在==转换中可能丢失信息时或在出于其他原因转换可能不成功==时，必须进行强制转换。 典型的示例包括从数值到精度较低或范围较小的类型的转换和从基类实例到派生类的转换。</p><p>如果进行转换可能会导致信息丢失，则编译器会要求执行显式转换，显式转换也称为强制转换。 强制转换是显式告知编译器你打算进行转换且你知道可能会发生数据丢失的一种方式。 若要执行强制转换，请在要转换的值或变量前面的括号中指定要强制转换到的类型。下面的程序将 double 强制转换为 int。==如不强制转换则该程序不会进行编译==。</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Test</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> x = <span class="number">1234.7</span>;</span><br><span class="line">        <span class="keyword">int</span> a;</span><br><span class="line">        <span class="comment">// Cast double to int.</span></span><br><span class="line">        a = (<span class="keyword">int</span>)x;</span><br><span class="line">        System.Console.WriteLine(a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Output: 1234</span></span><br></pre></td></tr></table></figure><blockquote><p>有关支持的显式数值转换的列表，请参阅<a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/explicit-numeric-conversions-table" target="_blank" rel="noopener">显式数值转换表</a>。</p></blockquote><h3 id="高级主题：checked-和-unchecked-转换"><a href="#高级主题：checked-和-unchecked-转换" class="headerlink" title="高级主题：checked 和 unchecked 转换"></a>高级主题：checked 和 unchecked 转换</h3><blockquote><ul><li>在 cheecked 块内，如果在运行时发生一次溢出的赋值，就会引发异常。</li></ul></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">checked</span> &#123;</span><br><span class="line">            <span class="comment">// int.MaxValue equals 2147483647</span></span><br><span class="line">            <span class="keyword">int</span> n = <span class="keyword">int</span>.MaxValue;</span><br><span class="line">            n = n + <span class="number">1</span>;</span><br><span class="line">            System.Console.WriteLine (n);</span><br><span class="line">        &#125;</span><br><span class="line">        Console.ReadKey ();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>输出结果</p></blockquote><pre><code>未经处理的异常:  System.OverflowException: 算术运算导致溢出。在 Program.Main()</code></pre><blockquote><p>unchecked 块，强制不进行一处检查，不会为块中溢出的赋值引发异常。</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">unchecked</span> &#123;</span><br><span class="line">            <span class="comment">// int.MaxValue equals 2147483647</span></span><br><span class="line">            <span class="keyword">int</span> n = <span class="keyword">int</span>.MaxValue;</span><br><span class="line">            n = n + <span class="number">1</span>;</span><br><span class="line">            System.Console.WriteLine (n);</span><br><span class="line">        &#125;</span><br><span class="line">        Console.ReadKey ();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>输出结果</p></blockquote><pre><code>-2147483648</code></pre><h2 id="隐式转换（implicit-conversions）"><a href="#隐式转换（implicit-conversions）" class="headerlink" title="隐式转换（implicit conversions）"></a>隐式转换（implicit conversions）</h2><blockquote><p>由于该转换是一种类型==安全的转换，不会导致数据丢失==，因此不需要任何特殊的语法。 </p><p>对于内置数值类型，如果要存储的值==无需截断或四舍五入==即可适应变量，则可以进行隐式转换。 例如，long 类型的变量（8 字节整数）能够存储 int（在 32 位计算机上为 4 字节）可存储的任何值。</p><ul><li>隐式转换无需使用转换操作符</li></ul></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> intNumber = <span class="number">31416</span>;</span><br><span class="line"><span class="keyword">long</span> longNumber = intNumber;</span><br></pre></td></tr></table></figure><blockquote><ul><li>隐式转换 也可以强制添加转换操作符</li></ul></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> intNumber = <span class="number">31416</span>;</span><br><span class="line"><span class="keyword">long</span> longNumber = (<span class="keyword">long</span>) intNumber;</span><br></pre></td></tr></table></figure><h2 id="不使用转型操作符的类型转换"><a href="#不使用转型操作符的类型转换" class="headerlink" title="不使用转型操作符的类型转换"></a>不使用转型操作符的类型转换</h2><blockquote><p>==字符串到数值类型== 转换，需要使用 Parse()/TryParse() 这样的方法。每个数值类型都包含 Parse()/TryParse() 方法，它允许将字符串还换成对应的数值类型。</p><p>例子</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">string</span> text = <span class="string">"9.11E-31"</span>;</span><br><span class="line"><span class="keyword">float</span> kgElectronMass = <span class="keyword">float</span>.Parse(text);</span><br></pre></td></tr></table></figure><blockquote><p>还可以利用 ==特殊类型System.Convert== 将一种类型转换成另一种类型。不过，System.Convert只支持预定义类型，而且是不可扩展的。它允许从任何==基元(基本)类型==（bool, char, sbyte, short, int, long, ushort, uint, ulong, float, double, decimal, DateTime, and string）转换到任何其它基元(基本)类型。参考 MSDN <a href="https://msdn.microsoft.com/zh-cn/library/system.convert(v=vs.110" target="_blank" rel="noopener">Convert</a>.aspx) 类。</p><p>例子</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">string</span> middleCText = <span class="string">"261.626"</span>;</span><br><span class="line"><span class="keyword">double</span> middleC = System.Convert.ToDouble(middleCText);</span><br><span class="line"><span class="keyword">bool</span> boolean = System.Convert.ToBoolean(middleC);</span><br></pre></td></tr></table></figure><blockquote><p>除了以上方法，所有类型都支持==ToString()方法== 转换，可以用它得到一个类型的值的字符串表示。</p><p>例子</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bool</span> boolean = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">string</span> text = boolean.ToString();</span><br><span class="line">System.Console.WriteLine(text); <span class="comment">// Display "True"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> dVal = <span class="number">-1.123456</span>;</span><br><span class="line">text=dVal.ToString();</span><br><span class="line">System.Console.WriteLine(dVal);<span class="comment">// Display "-1.123456"</span></span><br></pre></td></tr></table></figure><h2 id="高级主题：TryParse"><a href="#高级主题：TryParse" class="headerlink" title="高级主题：TryParse()"></a>高级主题：TryParse()</h2><p>从 C# 2.0 开始，所有基元数据数据类型都包含静态 TryParse() 方法。该方法与 Parse() 非常相似，知识在缓缓失败的清康熙，它不引发异常，而是返回 false ，如下示例：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> number;</span><br><span class="line"><span class="keyword">string</span> input;</span><br><span class="line"></span><br><span class="line">System.Console.Write(<span class="string">"Enter a number: "</span>);</span><br><span class="line">input = System.Console.ReadLine();</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">double</span>.TryParse(input, <span class="keyword">out</span> number))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Converted correctly, now use number</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    System.Console.WriteLine(</span><br><span class="line">        <span class="string">"The text entered was not a valid number."</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="高级主题：字符串转换为数字"><a href="#高级主题：字符串转换为数字" class="headerlink" title="高级主题：字符串转换为数字"></a>高级主题：字符串转换为数字</h2><blockquote><p>字符串转数字的几种方法：</p><ul><li>Parse 转换对象必须是组成合适数值类型（int、long、ulong、float、decimal 等）的字符。(例如：Int32.Parse(“-15”))</li><li>TryParse 转换对象必须是组成合适数值类型（int、long、ulong、float、decimal 等）的字符。（例如：Int32.TryParse(“-15”, out j)）</li><li>Convert.ToInt32 针对各种数值类型(int、long、float等，例如：Convert.ToInt32(“-15”))</li></ul><p>如果你具有字符串，则调用 TryParse 方法（例如 int.TryParse(“11”)）会稍微更加高效且简单。 使用 Convert 方法对于实现 IConvertible 的常规对象更有用。</p><p>可以对预期字符串会包含的数值类型（如 ==System.Int32== 类型）使用 Parse 或 TryParse 方法。 <strong>Convert.ToUInt32</strong> 方法在内部使用 Parse。 如果字符串的格式无效，则 Parse 会引发异常，而 TryParse 会返回 false。</p></blockquote><h3 id="示例-Parse-和-TryParse-例：System-Int32-Parse"><a href="#示例-Parse-和-TryParse-例：System-Int32-Parse" class="headerlink" title="示例 Parse 和 TryParse 例：System.Int32.Parse"></a>示例 Parse 和 TryParse 例：System.Int32.Parse</h3><blockquote><p>==Parse 和 TryParse== 方法会忽略字符串开头和末尾的空格，但所有其他字符必须是组成合适数值类型（int、long、ulong、float、decimal 等）的字符。 组成数字的字符中的任何空格都会导致错误。 例如，可以使用 decimal.TryParse 分析“10”、“10.3”、“ 10 ”，但不能使用此方法分析从“10X”、“1 0”（注意空格）、“10 .3”（注意空格）、“10e1”（float.TryParse 在此处适用）等中分析出 10。</p><p>下面的示例演示了对 Parse 和 TryParse 的成功调用和不成功的调用。</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> numVal = Int32.Parse (<span class="string">"-105"</span>);</span><br><span class="line">        Console.WriteLine (numVal);</span><br><span class="line">        <span class="comment">// Output: -105</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">double</span> dVal = Double.Parse(<span class="string">"105.12345"</span>);</span><br><span class="line">        Console.WriteLine(dVal);</span><br><span class="line">        <span class="comment">// 输出 105.12345</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// TryParse returns true if the conversion succeeded</span></span><br><span class="line">        <span class="comment">// and stores the result in j.</span></span><br><span class="line">        <span class="keyword">int</span> j;</span><br><span class="line">        <span class="keyword">if</span> (Int32.TryParse (<span class="string">"-105"</span>, <span class="keyword">out</span> j))</span><br><span class="line">            Console.WriteLine (j);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            Console.WriteLine (<span class="string">"String could not be parsed."</span>);</span><br><span class="line">        <span class="comment">// Output: -105</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> m = Int32.Parse (<span class="string">"abc"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FormatException e) &#123;</span><br><span class="line">            Console.WriteLine (e.Message);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Output: Input string was not in a correct format.</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">string</span> inputString = <span class="string">"abc"</span>;</span><br><span class="line">        <span class="keyword">int</span> numValue;</span><br><span class="line">        <span class="keyword">bool</span> parsed = Int32.TryParse (inputString, <span class="keyword">out</span> numValue);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!parsed)</span><br><span class="line">            Console.WriteLine (<span class="string">"Int32.TryParse could not parse '&#123;0&#125;' to an int.\n"</span>, inputString);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Output: Int32.TryParse could not parse 'abc' to an int.</span></span><br><span class="line"></span><br><span class="line">        Console.ReadKey ();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="示例-Convert-例：System-Convert-ToInt32"><a href="#示例-Convert-例：System-Convert-ToInt32" class="headerlink" title="示例 Convert  例：System.Convert.ToInt32"></a>示例 Convert  例：System.Convert.ToInt32</h3><blockquote><p>下表列出了 Convert 类中可使用的一些方法。</p></blockquote><table><thead><tr><th>数值类型</th><th>方法</th></tr></thead><tbody><tr><td>decimal</td><td>ToDecimal(String)</td></tr><tr><td>float</td><td>ToSingle(String)</td></tr><tr><td>double</td><td>ToDouble(String)</td></tr><tr><td>short</td><td>ToInt16(String)</td></tr><tr><td>int</td><td>ToInt32(String)</td></tr><tr><td>long</td><td>ToInt64(String)</td></tr><tr><td>ushort</td><td>ToUInt16(String)</td></tr><tr><td>uint</td><td>ToUInt32(String)</td></tr><tr><td>ulong</td><td>ToUInt64(String)</td></tr></tbody></table><blockquote><p>此示例调用 Convert.ToInt32(String) 方法将输入的 string 转换为 int。 代码将捕获此方法可能引发的最常见的两个异常：FormatException 和 OverflowException。 如果该数字可以递增而不溢出整数存储位置，则程序使结果加上 1 并打印输出。</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span> (<span class="params"><span class="keyword">string</span>[] args</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> numVal = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">bool</span> repeat = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (repeat) &#123;</span><br><span class="line">            Console.WriteLine (<span class="string">"Enter a number between −2,147,483,648 and +2,147,483,647 (inclusive)."</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">string</span> input = Console.ReadLine ();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// ToInt32 can throw FormatException or OverflowException.</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                numVal = Convert.ToInt32 (input);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (FormatException e) &#123;</span><br><span class="line">                Console.WriteLine (<span class="string">"Input string is not a sequence of digits."</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (OverflowException e) &#123;</span><br><span class="line">                Console.WriteLine (<span class="string">"The number cannot fit in an Int32."</span>);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (numVal &lt; Int32.MaxValue) &#123;</span><br><span class="line">                    Console.WriteLine (<span class="string">"The new value is &#123;0&#125;"</span>, numVal + <span class="number">1</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    Console.WriteLine (<span class="string">"numVal cannot be incremented beyond its current value"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            Console.WriteLine (<span class="string">"Go again? Y/N"</span>);</span><br><span class="line">            <span class="keyword">string</span> go = Console.ReadLine ();</span><br><span class="line">            <span class="keyword">if</span> (go == <span class="string">"Y"</span> || go == <span class="string">"y"</span>) &#123;</span><br><span class="line">                repeat = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                repeat = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Keep the console open in debug mode.</span></span><br><span class="line">        Console.WriteLine (<span class="string">"Press any key to exit."</span>);</span><br><span class="line">        Console.ReadKey ();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Sample Output:</span></span><br><span class="line">    <span class="comment">// Enter a number between -2,147,483,648 and +2,147,483,647 (inclusive).</span></span><br><span class="line">    <span class="comment">// 473</span></span><br><span class="line">    <span class="comment">// The new value is 474</span></span><br><span class="line">    <span class="comment">// Go again? Y/N</span></span><br><span class="line">    <span class="comment">// y</span></span><br><span class="line">    <span class="comment">// Enter a number between -2,147,483,648 and +2,147,483,647 (inclusive).</span></span><br><span class="line">    <span class="comment">// 2147483647</span></span><br><span class="line">    <span class="comment">// numVal cannot be incremented beyond its current value</span></span><br><span class="line">    <span class="comment">// Go again? Y/N</span></span><br><span class="line">    <span class="comment">// Y</span></span><br><span class="line">    <span class="comment">// Enter a number between -2,147,483,648 and +2,147,483,647 (inclusive).</span></span><br><span class="line">    <span class="comment">// -1000</span></span><br><span class="line">    <span class="comment">// The new value is -999</span></span><br><span class="line">    <span class="comment">// Go again? Y/N</span></span><br><span class="line">    <span class="comment">// n</span></span><br><span class="line">    <span class="comment">// Press any key to exit.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="高级主题：字节数组转换为数字-BitConverter"><a href="#高级主题：字节数组转换为数字-BitConverter" class="headerlink" title="高级主题：字节数组转换为数字 BitConverter"></a>高级主题：字节数组转换为数字 BitConverter</h2><blockquote><p>此示例演示如何使用 BitConverter 类将字节数组转换为 int 然后又转换回字节数组。 例如，在从网络读取字节之后，可能需要将字节转换为内置数据类型。 除了示例中的 ToInt32(Byte[],Int32) 方法之外，下表还列出了 BitConverter 类中将字节（来自字节数组）转换为其他内置类型的方法。</p></blockquote><table><thead><tr><th>返回类型</th><th>方法</th></tr></thead><tbody><tr><td>bool</td><td>ToBoolean(Byte[],Int32)</td></tr><tr><td>char</td><td>ToChar(Byte[],Int32)</td></tr><tr><td>double</td><td>ToDouble(Byte[],Int32)</td></tr><tr><td>short</td><td>ToInt16(Byte[],Int32)</td></tr><tr><td>int</td><td>ToInt32(Byte[],Int32)</td></tr><tr><td>long</td><td>ToInt64(Byte[],Int32)</td></tr><tr><td>float</td><td>ToSingle(Byte[],Int32)</td></tr><tr><td>ushort</td><td>ToUInt16(Byte[],Int32)</td></tr><tr><td>uint</td><td>ToUInt32(Byte[],Int32)</td></tr><tr><td>ulong</td><td>ToUInt64(Byte[],Int32)</td></tr></tbody></table><blockquote><p>Returns a 32-bit signed integer converted from four bytes at a specified position in a byte array.</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">ToInt32</span> (<span class="params"><span class="keyword">byte</span>[] <span class="keyword">value</span>, <span class="keyword">int</span> startIndex</span>)</span>;</span><br></pre></td></tr></table></figure><h3 id="示例-BitConverter-ToInt32"><a href="#示例-BitConverter-ToInt32" class="headerlink" title="示例 BitConverter.ToInt32"></a>示例 BitConverter.ToInt32</h3><blockquote><p>此示例初始化字节数组，并在计算机体系结构为 ==little-endian==（即首先存储最低有效字节）的情况下==反转数组==，然后调用 ToInt32(Byte[],Int32) 方法以将数组中的四个字节转换为 int。 ToInt32(Byte[],Int32) 的第二个参数指定字节数组的起始索引。</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">byte</span>[] bytes = &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">25</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// If the system architecture is little-endian (that is, little end first),</span></span><br><span class="line"><span class="comment">// reverse the byte array.</span></span><br><span class="line"><span class="keyword">if</span> (BitConverter.IsLittleEndian)</span><br><span class="line">    Array.Reverse(bytes);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i = BitConverter.ToInt32(bytes, <span class="number">0</span>);</span><br><span class="line">Console.WriteLine(<span class="string">"int: &#123;0&#125;"</span>, i);</span><br><span class="line"><span class="comment">// Output: int: 25</span></span><br></pre></td></tr></table></figure><h3 id="示例-BitConverter-GetBytes"><a href="#示例-BitConverter-GetBytes" class="headerlink" title="示例 BitConverter.GetBytes"></a>示例 BitConverter.GetBytes</h3><blockquote><p>在本示例中，将调用 BitConverter 类的 GetBytes(Int32) 方法，将 int 转换为字节数组。</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">byte</span>[] bytes = BitConverter.GetBytes(<span class="number">201805978</span>);</span><br><span class="line">Console.WriteLine(<span class="string">"byte array: "</span> + BitConverter.ToString(bytes));</span><br><span class="line"><span class="comment">// Output: byte array: 9A-50-07-0C</span></span><br></pre></td></tr></table></figure><h2 id="高级主题：十六进制字符串与数值类型之间转换"><a href="#高级主题：十六进制字符串与数值类型之间转换" class="headerlink" title="高级主题：十六进制字符串与数值类型之间转换"></a>高级主题：十六进制字符串与数值类型之间转换</h2><blockquote><p>以下示例演示如何执行下列任务：</p><ul><li>获取字符串中每个字符的十六进制值。</li><li>获取与十六进制字符串中的每个值对应的 char。</li><li>将十六进制 string 转换为 int。</li><li>将十六进制 string 转换为 float。</li><li>将字节数组转换为十六进制 string。&gt; - </li></ul></blockquote><h3 id="示例-解析字符得到16进制值"><a href="#示例-解析字符得到16进制值" class="headerlink" title="示例 解析字符得到16进制值"></a>示例 解析字符得到16进制值</h3><p>此示例输出 string 中每个字符的十六进制值。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span> (<span class="params"><span class="keyword">string</span>[] args</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">string</span> input = <span class="string">"你好 大世界！Hello World!"</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; input.Length; i++) &#123;</span><br><span class="line">            <span class="comment">// 占位符 方式</span></span><br><span class="line">            <span class="comment">//Console.Write ("&#123;0&#125; &#123;1&#125; ", input[i], ((int) input[i]).ToString ("X"));</span></span><br><span class="line">            <span class="comment">// 字符串内插 $ 方式</span></span><br><span class="line">            Console.Write (<span class="string">$"<span class="subst">&#123;input[i]&#125;</span> <span class="subst">&#123;((<span class="keyword">int</span>)input[i]).ToString(<span class="string">"X"</span>)&#125;</span> "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.Console.WriteLine ();</span><br><span class="line">        Console.ReadKey ();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>你 4F60 好 597D   20 大 5927 世 4E16 界 754C ！ FF01 H 48 e 65 l 6C l 6C o 6F   20 W 57 o 6F r 72 l 6C d 64 ! 21</code></pre><h3 id="示例-从16进制值得到对应字符"><a href="#示例-从16进制值得到对应字符" class="headerlink" title="示例 从16进制值得到对应字符"></a>示例 从16进制值得到对应字符</h3><p>此示例分析十六进制值的 string 并输出对应于每个十六进制值的字符。 首先，调用 Split(Char[]) 方法以获取每个十六进制值作为数组中的单个 string。 然后，调用 ToInt32(String, Int32)将十六进制值转换为表示为 int 的十进制值。示例中演示了 2 种不同方法，用于获取对应于该字符代码的字符。 第 1 种方法是使用 ConvertFromUtf32(Int32)，它将对应于整型参数的字符作为 string 返回。 第 2 种方法是将 int 显式转换为 char。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span> (<span class="params"><span class="keyword">string</span>[] args</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将指定的 Unicode 码位转换为 UTF-16 编码字符串。</span></span><br><span class="line">        <span class="keyword">string</span> hexValues = <span class="string">"5927 20 48 65 6C 6C 6F 20 57 6F 72 6C 64 21"</span>; <span class="comment">// 大 Hello World！</span></span><br><span class="line">        <span class="keyword">string</span>[] hexValuesSplit = hexValues.Split(<span class="string">' '</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; hexValuesSplit.Length; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 将 16 进制数值 转换为 整型（10进制）</span></span><br><span class="line">            <span class="keyword">int</span> <span class="keyword">value</span> = Convert.ToInt32(hexValuesSplit[i], <span class="number">16</span>);</span><br><span class="line">            <span class="comment">// 得到 编码值对应的 字符 | 将指定的 Unicode 码位转换为 UTF-16 编码字符串。</span></span><br><span class="line">            <span class="keyword">string</span> stringValule = <span class="keyword">char</span>.ConvertFromUtf32(<span class="keyword">value</span>);</span><br><span class="line">            System.Console.Write(stringValule);</span><br><span class="line">            <span class="comment">//一句话表示，有点难于解读</span></span><br><span class="line">            <span class="comment">//System.Console.Write(char.ConvertFromUtf32(Convert.ToInt32(hexValuesSplit[i],16)));</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.Console.WriteLine ();</span><br><span class="line">        Console.ReadKey ();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果</p><pre><code>大 Hello World!</code></pre><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><p>可以将同一类型的多个变量存储在一个数组数据结构中。 通过指定数组的元素类型来声明数组。</p><pre><code>type[] arrayName;</code></pre><p>数组具有以下属性：</p><ul><li>数组可以是一维(==Single-Dimesional==)、多维(==Multidimesional==)或交错(==Jagged==)的。</li><li>创建数组实例时，将建立纬度数量和每个纬度的长度。这些值在实例的生存期内无法更改。</li><li>交错数组是数组的数组,因此其元素为引用类型且被初始化为<code>null</code>。</li><li>数组从零开始编制索引：包含 <code>n</code> 元素的数组从 <code>0</code> 索引到 <code>n-1</code>。</li><li>数组元素可以是任何类型，其中包括数组类型。</li></ul><h2 id="数组的维数"><a href="#数组的维数" class="headerlink" title="数组的维数"></a>数组的维数</h2><p>使用 <code>Rank</code> 属性显示数组的维数。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Declare and initialize an array:</span></span><br><span class="line"><span class="keyword">int</span>[,] theArray = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>, <span class="number">10</span>];</span><br><span class="line"><span class="comment">// 输出 这是一个 2 维数组。</span></span><br><span class="line">System.Console.WriteLine(<span class="string">"这是一个 &#123;0&#125; 维数组。"</span>, theArray.Rank);</span><br></pre></td></tr></table></figure><h2 id="一维数组"><a href="#一维数组" class="headerlink" title="一维数组"></a>一维数组</h2><h3 id="数组声明-一维"><a href="#数组声明-一维" class="headerlink" title="数组声明 一维"></a>数组声明 一维</h3><blockquote><p>声明五个整数的一维数组，如以下示例所示：</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] array = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>];</span><br></pre></td></tr></table></figure><blockquote><p>此数组包含从 <code>array[0]</code> 到 <code>array[4]</code> 的元素。 <code>new</code> 运算符用于创建数组并将数组元素初始化为其默认值。在此示例中，所有数组元素都将被==初始化为零==。</p><p>声明字符串数组</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">string</span>[] stringArray = <span class="keyword">new</span> <span class="keyword">string</span>[<span class="number">6</span>];</span><br></pre></td></tr></table></figure><h3 id="数组初始化-一维"><a href="#数组初始化-一维" class="headerlink" title="数组初始化 一维"></a>数组初始化 一维</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] array1 = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; <span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span> &#125;;</span><br><span class="line"><span class="keyword">string</span>[] weekDays = <span class="keyword">new</span> <span class="keyword">string</span>[] &#123; <span class="string">"Sun"</span>, <span class="string">"Mon"</span>, <span class="string">"Tue"</span>, <span class="string">"Wed"</span>, <span class="string">"Thu"</span>, <span class="string">"Fri"</span>, <span class="string">"Sat"</span> &#125;;</span><br></pre></td></tr></table></figure><blockquote><p>声明初始化的缩写(快捷)方式</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] array1 = &#123; <span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span> &#125;;</span><br><span class="line"><span class="keyword">string</span>[] weekDays = &#123; <span class="string">"Sun"</span>, <span class="string">"Mon"</span>, <span class="string">"Tue"</span>, <span class="string">"Wed"</span>, <span class="string">"Thu"</span>, <span class="string">"Fri"</span>, <span class="string">"Sat"</span> &#125;;</span><br></pre></td></tr></table></figure><blockquote><p>可以在不初始化的情况下声明数组变量，但必须使用 <code>new</code> 运算符向此变量分配数组。 例如:</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] array3;</span><br><span class="line">array3 = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; <span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span> &#125;;   <span class="comment">// OK</span></span><br><span class="line"><span class="comment">//array3 = &#123;1, 3, 5, 7, 9&#125;;   // Error</span></span><br></pre></td></tr></table></figure><h2 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h2><blockquote><p>多为数组的每一维的大小都必须一致。而 ==交错数组== （jagged array）则不需要。</p><p>得到多维数组中某一维的长度，不是使用Length属性，而是使用数组的GetLength()示例方法。</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bool</span>[,,] cells;</span><br><span class="line">cells = <span class="keyword">new</span> <span class="keyword">bool</span>[<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>];</span><br><span class="line">System.Console.WriteLine(cells.GetLength(<span class="number">0</span>));   <span class="comment">// Displays 2</span></span><br></pre></td></tr></table></figure><h3 id="数组声明-多维"><a href="#数组声明-多维" class="headerlink" title="数组声明 多维"></a>数组声明 多维</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明创建一个具有四行两列的二维数组。</span></span><br><span class="line"><span class="keyword">int</span>[,] array = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">4</span>, <span class="number">2</span>];</span><br><span class="line"><span class="comment">// 声明创建一个具有三个维度（4、2 和 3）的数组。</span></span><br><span class="line"><span class="keyword">int</span>[, ,] array1 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">4</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br></pre></td></tr></table></figure><h3 id="数组初始化-多维"><a href="#数组初始化-多维" class="headerlink" title="数组初始化 多维"></a>数组初始化 多维</h3><blockquote><p>声明后即可初始化数组，如以下示例所示。</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Two-dimensional array.</span></span><br><span class="line"><span class="keyword">int</span>[,] array2D = <span class="keyword">new</span> <span class="keyword">int</span>[,] &#123; &#123; <span class="number">1</span>, <span class="number">2</span> &#125;, &#123; <span class="number">3</span>, <span class="number">4</span> &#125;, &#123; <span class="number">5</span>, <span class="number">6</span> &#125;, &#123; <span class="number">7</span>, <span class="number">8</span> &#125; &#125;;</span><br><span class="line"><span class="comment">// The same array with dimensions specified.</span></span><br><span class="line"><span class="keyword">int</span>[,] array2Da = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">4</span>, <span class="number">2</span>] &#123; &#123; <span class="number">1</span>, <span class="number">2</span> &#125;, &#123; <span class="number">3</span>, <span class="number">4</span> &#125;, &#123; <span class="number">5</span>, <span class="number">6</span> &#125;, &#123; <span class="number">7</span>, <span class="number">8</span> &#125; &#125;;</span><br><span class="line"><span class="comment">// A similar array with string elements.</span></span><br><span class="line"><span class="keyword">string</span>[,] array2Db = <span class="keyword">new</span> <span class="keyword">string</span>[<span class="number">3</span>, <span class="number">2</span>] &#123; &#123; <span class="string">"one"</span>, <span class="string">"two"</span> &#125;, &#123; <span class="string">"three"</span>, <span class="string">"four"</span> &#125;,</span><br><span class="line">                                        &#123; <span class="string">"five"</span>, <span class="string">"six"</span> &#125; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Three-dimensional array.</span></span><br><span class="line"><span class="keyword">int</span>[, ,] array3D = <span class="keyword">new</span> <span class="keyword">int</span>[,,] &#123; &#123; &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> &#125;, &#123; <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span> &#125; &#125;, </span><br><span class="line">                                 &#123; &#123; <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span> &#125;, &#123; <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span> &#125; &#125; &#125;;</span><br><span class="line"><span class="comment">// The same array with dimensions specified.</span></span><br><span class="line"><span class="keyword">int</span>[, ,] array3Da = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>] &#123; &#123; &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> &#125;, &#123; <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span> &#125; &#125;, </span><br><span class="line">                                       &#123; &#123; <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span> &#125;, &#123; <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span> &#125; &#125; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Accessing array elements.</span></span><br><span class="line">System.Console.WriteLine(array2D[<span class="number">0</span>, <span class="number">0</span>]);</span><br><span class="line">System.Console.WriteLine(array2D[<span class="number">0</span>, <span class="number">1</span>]);</span><br><span class="line">System.Console.WriteLine(array2D[<span class="number">1</span>, <span class="number">0</span>]);</span><br><span class="line">System.Console.WriteLine(array2D[<span class="number">1</span>, <span class="number">1</span>]);</span><br><span class="line">System.Console.WriteLine(array2D[<span class="number">3</span>, <span class="number">0</span>]);</span><br><span class="line">System.Console.WriteLine(array2Db[<span class="number">1</span>, <span class="number">0</span>]);</span><br><span class="line">System.Console.WriteLine(array3Da[<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>]);</span><br><span class="line">System.Console.WriteLine(array3D[<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Getting the total count of elements or the length of a given dimension.</span></span><br><span class="line"><span class="keyword">var</span> allLength = array3D.Length;</span><br><span class="line"><span class="keyword">var</span> total = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array3D.Rank; i++) &#123;</span><br><span class="line">    total *= array3D.GetLength(i);</span><br><span class="line">&#125;</span><br><span class="line">System.Console.WriteLine(<span class="string">"&#123;0&#125; equals &#123;1&#125;"</span>, allLength, total);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Output:</span></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"><span class="comment">// 4</span></span><br><span class="line"><span class="comment">// 7</span></span><br><span class="line"><span class="comment">// three</span></span><br><span class="line"><span class="comment">// 8</span></span><br><span class="line"><span class="comment">// 12</span></span><br><span class="line"><span class="comment">// 12 equals 12</span></span><br></pre></td></tr></table></figure><h2 id="交错数组-jagged-array"><a href="#交错数组-jagged-array" class="headerlink" title="交错数组 jagged array"></a>交错数组 jagged array</h2><blockquote><p>交错数组是元素为数组的数组。 交错数组元素的维度和大小可以不同。 交错数组有时称为“数组的数组”。 </p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[][] cells = &#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>&#125;,</span><br><span class="line">    <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>&#125;,</span><br><span class="line">    <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>&#125;,</span><br><span class="line">    <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>声明一个具有三个元素的一维数组，其中每个元素都是一维整数数组：</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[][] jaggedArray = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>][];</span><br></pre></td></tr></table></figure><blockquote><p>必须初始化 <code>jaggedArray</code> 的元素后才可使用它。 可按下方操作初始化元素：</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">jaggedArray[<span class="number">0</span>] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>];</span><br><span class="line">jaggedArray[<span class="number">1</span>] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">4</span>];</span><br><span class="line">jaggedArray[<span class="number">2</span>] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br></pre></td></tr></table></figure><blockquote><p>每个元素都是一维整数数组。 第一个元素是由 5 个整数组成的数组，第二个是由 4 个整数组成的数组，而第三个是由 2 个整数组成的数组。</p><p>也可使用初始化表达式通过值来填充数组元素，这种情况下不需要数组大小。 例如:</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">jaggedArray[<span class="number">0</span>] = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; <span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span> &#125;;</span><br><span class="line">jaggedArray[<span class="number">1</span>] = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; <span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span> &#125;;</span><br><span class="line">jaggedArray[<span class="number">2</span>] = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; <span class="number">11</span>, <span class="number">22</span> &#125;;</span><br></pre></td></tr></table></figure><blockquote><p>还可在声明数组时将其初始化，如：</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[][] jaggedArray2 = <span class="keyword">new</span> <span class="keyword">int</span>[][] &#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; <span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span> &#125;,</span><br><span class="line">    <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; <span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span> &#125;,</span><br><span class="line">    <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; <span class="number">11</span>, <span class="number">22</span> &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>可以使用下面的缩写形式。 请注意：不能从元素初始化中省略 <code>new</code> 运算符，因为不存在元素的默认初始化：</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[][] jaggedArray3 = &#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; <span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span> &#125;,</span><br><span class="line">    <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; <span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span> &#125;,</span><br><span class="line">    <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; <span class="number">11</span>, <span class="number">22</span> &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>可以混合使用交错数组和多维数组。 下面声明和初始化一个包含大小不同的三个二维数组元素的一维交错数组。 </p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[][,] jaggedArray4 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>][,] </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="keyword">int</span>[,] &#123; &#123;<span class="number">1</span>,<span class="number">3</span>&#125;, &#123;<span class="number">5</span>,<span class="number">7</span>&#125; &#125;,</span><br><span class="line">    <span class="keyword">new</span> <span class="keyword">int</span>[,] &#123; &#123;<span class="number">0</span>,<span class="number">2</span>&#125;, &#123;<span class="number">4</span>,<span class="number">6</span>&#125;, &#123;<span class="number">8</span>,<span class="number">10</span>&#125; &#125;,</span><br><span class="line">    <span class="keyword">new</span> <span class="keyword">int</span>[,] &#123; &#123;<span class="number">11</span>,<span class="number">22</span>&#125;, &#123;<span class="number">99</span>,<span class="number">88</span>&#125;, &#123;<span class="number">0</span>,<span class="number">9</span>&#125; &#125; </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>可以如本例所示访问个别元素，示例显示第一个数组的元素 <code>[1,0]</code> 的值（值为 <code>5</code>）：</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.Console.Write(<span class="string">"&#123;0&#125;"</span>, jaggedArray4[<span class="number">0</span>][<span class="number">1</span>, <span class="number">0</span>]);</span><br></pre></td></tr></table></figure><blockquote><p>方法 Length 返回包含在交错数组中的数组的数目。例如，假定已声明了前一个数组，则下行返回值 <code>3</code>。</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.Console.WriteLine(jaggedArray4.Length);</span><br></pre></td></tr></table></figure><h2 id="隐式类型的数组"><a href="#隐式类型的数组" class="headerlink" title="隐式类型的数组"></a>隐式类型的数组</h2><blockquote><p>可以创建隐式类型化的数组，其中数组实例的类型通过数组初始值设定项中指定的元素来推断。 针对隐式类型化变量的任何规则也适用于隐式类型化数组。 </p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">ImplicitlyTypedArraySample</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> a = <span class="keyword">new</span>[] &#123; <span class="number">1</span>, <span class="number">10</span>, <span class="number">100</span>, <span class="number">1000</span> &#125;; <span class="comment">// int[]</span></span><br><span class="line">        <span class="keyword">var</span> b = <span class="keyword">new</span>[] &#123; <span class="string">"hello"</span>, <span class="literal">null</span>, <span class="string">"world"</span> &#125;; <span class="comment">// string[]</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// single-dimension jagged array</span></span><br><span class="line">        <span class="keyword">var</span> c = <span class="keyword">new</span>[]</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">new</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;,</span><br><span class="line">            <span class="keyword">new</span>[]&#123;<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// jagged array of strings</span></span><br><span class="line">        <span class="keyword">var</span> d = <span class="keyword">new</span>[]</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">new</span>[]&#123;<span class="string">"Luca"</span>, <span class="string">"Mads"</span>, <span class="string">"Luke"</span>, <span class="string">"Dinesh"</span>&#125;,</span><br><span class="line">            <span class="keyword">new</span>[]&#123;<span class="string">"Karen"</span>, <span class="string">"Suma"</span>, <span class="string">"Frances"</span>&#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在上个示例中，请注意对于隐式类型化数组，初始化语句的左侧没有使用方括号。 另请注意，和一维数组一样，通过使用 new [] 来初始化交错数组。</p></blockquote><h2 id="对数组使用循环-for-foreach"><a href="#对数组使用循环-for-foreach" class="headerlink" title="对数组使用循环 for foreach"></a>对数组使用循环 for foreach</h2><blockquote><p>一维数组</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] numbers = &#123; <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">-2</span>, <span class="number">-1</span>, <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">int</span> i <span class="keyword">in</span> numbers)</span><br><span class="line">&#123;</span><br><span class="line">    System.Console.Write(<span class="string">"&#123;0&#125; "</span>, i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Output: 4 5 6 1 2 3 -2 -1 0</span></span><br></pre></td></tr></table></figure><blockquote><p>多维数组</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[,] numbers2D = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>, <span class="number">2</span>] &#123; &#123; <span class="number">9</span>, <span class="number">99</span> &#125;, &#123; <span class="number">3</span>, <span class="number">33</span> &#125;, &#123; <span class="number">5</span>, <span class="number">55</span> &#125; &#125;;</span><br><span class="line"><span class="comment">// Or use the short form:</span></span><br><span class="line"><span class="comment">// int[,] numbers2D = &#123; &#123; 9, 99 &#125;, &#123; 3, 33 &#125;, &#123; 5, 55 &#125; &#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">int</span> i <span class="keyword">in</span> numbers2D)</span><br><span class="line">&#123;</span><br><span class="line">    System.Console.Write(<span class="string">"&#123;0&#125; "</span>, i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Output: 9 99 3 33 5 55</span></span><br></pre></td></tr></table></figure><blockquote><p>交错数组</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[][] jaggedArray3 = &#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; <span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span> &#125;,</span><br><span class="line">    <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; <span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span> &#125;,</span><br><span class="line">    <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; <span class="number">11</span>, <span class="number">22</span> &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> jaggedArray3) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; item.Length; i++) &#123;</span><br><span class="line">        System.Console.Write (<span class="string">"&#123;0&#125; "</span>, item[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出：1 3 5 7 9 0 2 4 6 11 22</span></span><br></pre></td></tr></table></figure><h2 id="常见数组编码错误"><a href="#常见数组编码错误" class="headerlink" title="常见数组编码错误"></a>常见数组编码错误</h2><p>代码中包含双重大括号，hexo无法编译，用转义的话Markdown文件不利阅读，所以采用图片替代。</p><p><img src="https://slowread.cn/images/material/array-normal-error.png" alt="image"></p><h1 id="枚举类型"><a href="#枚举类型" class="headerlink" title="枚举类型"></a>枚举类型</h1><h2 id="声明定义"><a href="#声明定义" class="headerlink" title="声明定义"></a>声明定义</h2><p><code>enum</code> 关键字用于声明枚举，一种包含一组被称为枚举数列表的已命名常数的不同类型。<br>通常最好是直接在命名空间内定义枚举，以便命名空间中的所有类都可以同样方便地访问它。 但是，也可能会在类或结构中嵌套枚举。<br>默认情况下，枚举中每个元素的==基础类型都为 int==。默认情况下，==第一个枚举数具有值 0==，并且每个连续枚举数的值将增加 1。 例如，在以下枚举中， Sat 的值为 0， Sun 的值为 1， Mon 的值为 2，依次类推。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> Days &#123;Sat, Sun, Mon, Tue, Wed, Thu, Fri&#125;;</span><br></pre></td></tr></table></figure><p>枚举数可以使用初始值设定项来替代默认值，如下面的示例中所示。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> Days &#123;Sat=<span class="number">1</span>, Sun, Mon, Tue, Wed, Thu, Fri&#125;;</span><br></pre></td></tr></table></figure><p>在此枚举中，强制元素的序列从 1 开始，而不是 0。 但建议包括一个值为 0 的常量。 有关详细信息，请参阅<a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/programming-guide/enumeration-types/" target="_blank" rel="noopener">枚举类型</a>。</p><p>每个枚举类型都有一个基础类型，该基础类型可以是除 char 外的任何整型类型。 枚举元素的默认基础类型是 int。若要声明另一整型的枚举（如 byte），则请在后跟该类型的标识符后使用冒号，如以下示例所示。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> Days : <span class="keyword">byte</span> &#123;Sat=<span class="number">1</span>, Sun, Mon, Tue, Wed, Thu, Fri&#125;;</span><br></pre></td></tr></table></figure><p>枚举的已批准类型有 byte、 sbyte、 short、 ushort、 int、 uint、 long或 ulong。有关可能的类型的完整列表，请参阅 <a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/enum" target="_blank" rel="noopener">enum（C# 参考</a>）。</p><p>基础类型指定为每个枚举数分配多少存储空间。 但要将 enum 类型转换为整型，==则必须使用显示转换==。 例如，以下语句通过使用转换将 Sun 转换为 ，从而将枚举数 赋值为 enum int int类型的变量。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> x = (<span class="keyword">int</span>)Days.Sun;</span><br></pre></td></tr></table></figure><p>可以为枚举类型的枚举器列表中的元素分配任何值，也==可以使用计算值==，计算因子必须是已经有确定的值的枚举元素，不能包含后面的值未确定的元素：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">EnumTest</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">enum</span> Day &#123; Sunday=<span class="number">6</span>, Monday=<span class="number">3</span>, Tuesday = Sunday + Monday, Wednesday, Thursday, Friday, Saturday &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Console.WriteLine(Day.Sunday);</span><br><span class="line">        Console.WriteLine(Day.Friday);</span><br><span class="line">        Console.WriteLine((<span class="keyword">int</span>)Day.Sunday);</span><br><span class="line">        Console.WriteLine((<span class="keyword">int</span>)Day.Monday);</span><br><span class="line">        Console.WriteLine((<span class="keyword">int</span>)Day.Tuesday);</span><br><span class="line">        Console.WriteLine((<span class="keyword">int</span>)Day.Wednesday);</span><br><span class="line">        Console.WriteLine((<span class="keyword">int</span>)Day.Thursday);</span><br><span class="line">        Console.WriteLine((<span class="keyword">int</span>)Day.Friday);</span><br><span class="line">        Console.WriteLine((<span class="keyword">int</span>)Day.Saturday);        </span><br><span class="line"></span><br><span class="line">        Console.ReadKey();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*  输出</span></span><br><span class="line"><span class="comment">Sunday</span></span><br><span class="line"><span class="comment">Friday</span></span><br><span class="line"><span class="comment">6</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">9</span></span><br><span class="line"><span class="comment">10</span></span><br><span class="line"><span class="comment">11</span></span><br><span class="line"><span class="comment">12</span></span><br><span class="line"><span class="comment">13</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="使用-System-Enum-方法来发现和操作枚举值"><a href="#使用-System-Enum-方法来发现和操作枚举值" class="headerlink" title="使用 System.Enum 方法来发现和操作枚举值"></a>使用 System.Enum 方法来发现和操作枚举值</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">string</span> s = Enum.GetName(<span class="keyword">typeof</span>(Days), <span class="number">16</span>);</span><br><span class="line">Console.WriteLine(s);</span><br><span class="line"></span><br><span class="line">Console.WriteLine(<span class="string">"The values of the Day Enum are:"</span>);</span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">int</span> i <span class="keyword">in</span> Enum.GetValues(<span class="keyword">typeof</span>(Days)))</span><br><span class="line">    Console.WriteLine(i);</span><br><span class="line"></span><br><span class="line">Console.WriteLine(<span class="string">"The names of the Day Enum are:"</span>);</span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">string</span> str <span class="keyword">in</span> Enum.GetNames(<span class="keyword">typeof</span>(Days)))</span><br><span class="line">    Console.WriteLine(str);</span><br></pre></td></tr></table></figure><blockquote><p>输出结果</p></blockquote><pre><code>ThursdayThe values of the Day Enum are:01248163264The names of the Day Enum are:NoneSundayMondayTuesdayWednesdayThursdayFridaySaturday</code></pre><h2 id="高级主题：作为位标志的枚举类型"><a href="#高级主题：作为位标志的枚举类型" class="headerlink" title="高级主题：作为位标志的枚举类型"></a>高级主题：作为位标志的枚举类型</h2><p>创建==位标志枚举==的方法是，应用 <a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.flagsattribute/" target="_blank" rel="noopener">FlagsAttribute</a> 属性并适当定义一些值，以便可以对这些值执行 AND、OR、NOT 和 XOR 按位运算。 在位标志枚举中，包括一个值为零（表示“未设置任何标志”）的命名常量。 如果零值不表示“未设置任何标志”，请勿为标志指定零值。</p><p>在以下示例中，定义了名为 Days 枚举的另一个版本。 Days 具有 Flags 属性，且它的每个值都是 2 的若干次幂，指数依次递增。 这样，你就能够创建值为 <code>Days.Tuesday | Days.Thursday</code> 的 Days 变量。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">Flags</span>]</span><br><span class="line"><span class="keyword">enum</span> Days</span><br><span class="line">&#123;</span><br><span class="line">    None = <span class="number">0x0</span>,</span><br><span class="line">    Sunday = <span class="number">0x1</span>,</span><br><span class="line">    Monday = <span class="number">0x2</span>,</span><br><span class="line">    Tuesday = <span class="number">0x4</span>,</span><br><span class="line">    Wednesday = <span class="number">0x8</span>,</span><br><span class="line">    Thursday = <span class="number">0x10</span>,</span><br><span class="line">    Friday = <span class="number">0x20</span>,</span><br><span class="line">    Saturday = <span class="number">0x40</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title">MyClass</span></span><br><span class="line">&#123;</span><br><span class="line">    Days meetingDays = Days.Tuesday | Days.Thursday;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>若要在枚举上设置标志，请使用按位 OR 运算符，如以下示例所示：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Initialize with two flags using bitwise OR.</span></span><br><span class="line">meetingDays = Days.Tuesday | Days.Thursday;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Set an additional flag using bitwise OR.</span></span><br><span class="line">meetingDays = meetingDays | Days.Friday;</span><br><span class="line"></span><br><span class="line">Console.WriteLine(<span class="string">"Meeting days are &#123;0&#125;"</span>, meetingDays);</span><br><span class="line"><span class="comment">// Output: Meeting days are Tuesday, Thursday, Friday</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Remove a flag using bitwise XOR.</span></span><br><span class="line">meetingDays = meetingDays ^ Days.Tuesday;</span><br><span class="line">Console.WriteLine(<span class="string">"Meeting days are &#123;0&#125;"</span>, meetingDays);</span><br><span class="line"><span class="comment">// Output: Meeting days are Thursday, Friday</span></span><br></pre></td></tr></table></figure><p>若要确定是否设置了特定标志，请使用按位 AND 运算，如以下示例所示：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Test value of flags using bitwise AND.</span></span><br><span class="line"><span class="keyword">bool</span> test = (meetingDays &amp; Days.Thursday) == Days.Thursday;</span><br><span class="line">Console.WriteLine(<span class="string">"Thursday &#123;0&#125; a meeting day."</span>, test == <span class="literal">true</span> ? <span class="string">"is"</span> : <span class="string">"is not"</span>);</span><br><span class="line"><span class="comment">// Output: Thursday is a meeting day.</span></span><br></pre></td></tr></table></figure><hr><h1 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h1><iframe src="https://slowread.cn/EssentialCSharp5-Index.html" width="100%" height="300" frameborder="0" allowfullscreen></iframe>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;数据类型&quot;&gt;&lt;a href=&quot;#数据类型&quot; class=&quot;headerlink&quot; title=&quot;数据类型&quot;&gt;&lt;/a&gt;数据类型&lt;/h1&gt;&lt;p&gt;预定义类型(predefined type)/基元类型(primitive type)，也翻译为基本类型、基础类型或者原始类型。&lt;/p&gt;
    
    </summary>
    
    
      <category term="C#" scheme="https://at2008.github.io/tags/C/"/>
    
      <category term="C#本质论" scheme="https://at2008.github.io/tags/C-%E6%9C%AC%E8%B4%A8%E8%AE%BA/"/>
    
      <category term="Essential C#" scheme="https://at2008.github.io/tags/Essential-C/"/>
    
  </entry>
  
  <entry>
    <title>C#本质论笔记 第1章 C#概述</title>
    <link href="https://at2008.github.io/2017/12/13/CSharp%E6%9C%AC%E8%B4%A8%E8%AE%BA%E7%AC%94%E8%AE%B0-%E7%AC%AC1%E7%AB%A0-CSharp%E6%A6%82%E8%BF%B0/"/>
    <id>https://at2008.github.io/2017/12/13/CSharp本质论笔记-第1章-CSharp概述/</id>
    <published>2017-12-13T05:35:26.000Z</published>
    <updated>2018-08-03T13:46:36.980Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://slowread.cn/images/material/EssentialCSharp5.jpg" alt="alt"></p><h1 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h1><ul><li>CLI   Common Language Infrastructure  公共语言基础结构</li><li>CIL   Common Intermediate Language    公共中间语言</li><li>BCL   Base Class Library 基础类库</li><li>overload 重载：指的是<strong>同一个类</strong>中有两个或多个名字相同但是<strong>参数不同</strong>的方法，(注:返回值不能区别函数是否重载)，<strong>重载没有关键字</strong>。</li><li>override 重写 过载：指子类对父类中<strong>虚函数或抽象函数</strong>的“覆盖”（这也就是有些书将过载翻译为覆盖的原因），但是这种“覆盖”和用new关键字来覆盖是有区别的。</li><li>new 覆盖：指的是不同类中（基类或派生类）有两个或多个返回类型、方法名、参数都相同，但是方法体不同的方法。但是这种覆盖是一种表面上的覆盖，所以也叫<strong>隐藏</strong>，被覆盖的父类方法是可以调用得到的。</li></ul><a id="more"></a><h1 id="HelloWorld"><a href="#HelloWorld" class="headerlink" title="HelloWorld"></a>HelloWorld</h1><h2 id="本书中的例子"><a href="#本书中的例子" class="headerlink" title="本书中的例子"></a>本书中的例子</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">HelloWorld</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.Console.WriteLine(<span class="string">"Hello World!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="其他例子"><a href="#其他例子" class="headerlink" title="其他例子"></a>其他例子</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Hello</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Console.WriteLine(<span class="string">"Hello World!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="VS-IDE自动生成例子"><a href="#VS-IDE自动生成例子" class="headerlink" title="VS IDE自动生成例子"></a>VS IDE自动生成例子</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">HelloWorld</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            Console.WriteLine(<span class="string">"Hello World!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="语法基础"><a href="#语法基础" class="headerlink" title="语法基础"></a>语法基础</h1><h2 id="标识符大小写风格"><a href="#标识符大小写风格" class="headerlink" title="标识符大小写风格"></a>标识符大小写风格</h2><h3 id="Pacal风格-PascalCase-Pascal-case"><a href="#Pacal风格-PascalCase-Pascal-case" class="headerlink" title="Pacal风格 (PascalCase/Pascal case)"></a>Pacal风格 (PascalCase/Pascal case)</h3><blockquote><p>每个单词首字母大写，例如：ComponentModel, Configuration, and HttpFileCollection. 注意在 HttpFileCollection中，由于首字母缩写词HTTP的长度超过两个字母，所以仅首字母大写。</p></blockquote><h2 id="camel风格-camelCase-camel-Case"><a href="#camel风格-camelCase-camel-Case" class="headerlink" title="camel风格 (camelCase/camel Case)"></a>camel风格 (camelCase/camel Case)</h2><blockquote><p>除了第一个字母小写，其他约定与Pascal大小写放个一样，例如：quotient, firstName, httpFileCollection, ioStream, and theDreadPirateRoberts.</p></blockquote><h2 id="形参与实参"><a href="#形参与实参" class="headerlink" title="形参与实参"></a>形参与实参</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApplication</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> a = <span class="number">5</span>;</span><br><span class="line">            abc(a); <span class="comment">//a就是实参</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">abc</span>(<span class="params"><span class="keyword">int</span> c</span>) <span class="comment">//c就是形参</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">5</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Main"><a href="#Main" class="headerlink" title="Main"></a>Main</h2><ul><li>Main 方法是 C# 控制台应用程序或窗口应用程序的入口点。 （库和服务不要求将 Main 方法作为入口点。） 应用程序启动时，Main 方法是第一个调用的方法。</li><li>C# 程序中只能有一个入口点。 如果您有多个类都包含 Main 方法，则必须使用 /main 编译器选项编译您的程序，以指定用作入口点的 Main 方法。 </li></ul><h3 id="不带参数的Main"><a href="#不带参数的Main" class="headerlink" title="不带参数的Main"></a><code>不带参数</code>的Main</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Hello</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.Console.WriteLine(<span class="string">"Hello World!"</span>);</span><br><span class="line">        System.Console.ReadKey();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="带参数的Main"><a href="#带参数的Main" class="headerlink" title="带参数的Main"></a><code>带参数</code>的Main</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Hello</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.Console.WriteLine(<span class="string">"Hello World!"</span>);</span><br><span class="line">        System.Console.ReadKey();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Main-概述"><a href="#Main-概述" class="headerlink" title="Main 概述"></a>Main 概述</h3><ul><li>Main 方法是 .exe 程序的入口点，程序控制流在该处开始和结束。</li><li>Main 在类或结构内声明。 Main 必须是静态的，且不应该是 公用的。 （在前面的示例中，它接受默认访问级别 private。）但不要求封闭类或结构是静态的。</li><li>Main 的返回类型有两种：void 或 int。</li><li>所声明的 Main 方法可以具有包含命令行实参的 string[] 形参，也可以不具有这样的形参。 使用 Visual Studio 创建 Windows 窗体应用程序时，可以手动添加形参，也可以使用 Environment 类获取命令行实参。 形参读取为从零开始编制索引的命令行实参。 与 C 和 C++ 不同，不会将程序名称视为第一个命令行实参。</li></ul><h3 id="Main-例子"><a href="#Main-例子" class="headerlink" title="Main 例子"></a>Main 例子</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Hello</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.Console.WriteLine(<span class="string">"Hello World!"</span>);</span><br><span class="line">        System.Console.WriteLine(args.Length);</span><br><span class="line">        System.Console.WriteLine(System.Environment.CommandLine);</span><br><span class="line">        System.Console.WriteLine(System.Environment.CurrentDirectory);</span><br><span class="line">        System.Console.WriteLine(System.Environment.MachineName);</span><br><span class="line">        System.Console.WriteLine(System.Environment.UserName);</span><br><span class="line">        System.Console.ReadKey();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>编译上面代码，在控制台输入 ==HelloWorld.exe== 输出结果</p></blockquote><pre><code>Hello World!0helloworld.exeD:\WaProj\Essential C#5.0, 4th Edition\第一章DESKTOP-D10TF3Cihome</code></pre><blockquote><p>编译上面代码，在控制台输入 ==HelloWorld== 输出结果</p></blockquote><pre><code>Hello World!0helloworldD:\WaProj\Essential C#5.0, 4th Edition\第一章DESKTOP-D10TF3Cihome</code></pre><h2 id="单行多行语句"><a href="#单行多行语句" class="headerlink" title="单行多行语句"></a>单行多行语句</h2><h3 id="一行包含多条语句"><a href="#一行包含多条语句" class="headerlink" title="一行包含多条语句"></a>一行包含多条语句</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.Console.WriteLine(<span class="string">"1"</span>);System.Console.WriteLine(<span class="string">"2"</span>);</span><br></pre></td></tr></table></figure><p>输出结果</p><pre><code>12</code></pre><h3 id="一条语句跨越多行"><a href="#一条语句跨越多行" class="headerlink" title="一条语句跨越多行"></a>一条语句跨越多行</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.Console.WriteLine(</span><br><span class="line"><span class="string">"Hello World!"</span>);</span><br></pre></td></tr></table></figure><p>输出结果</p><pre><code>Hello World!</code></pre><h3 id="错误示例"><a href="#错误示例" class="headerlink" title="错误示例"></a>错误示例</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.Console.WriteLine(<span class="string">"Hello </span></span><br><span class="line"><span class="string">        World!"</span>);</span><br></pre></td></tr></table></figure><p>错误提示</p><pre><code>HelloWorld.cs(5,31): error CS1010: 常量中有换行符HelloWorld.cs(6,12): error CS1010: 常量中有换行符</code></pre><h2 id="缩进和空白"><a href="#缩进和空白" class="headerlink" title="缩进和空白"></a>缩进和空白</h2><blockquote><p>例子1</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Hello</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.Console.WriteLine(<span class="string">"Hello World!"</span>);</span><br><span class="line">        System.Console.ReadKey();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>例子2</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Hello</span>&#123;<span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span>&#123;System.Console.WriteLine(<span class="string">"Hello World!"</span>);System.Console.ReadKey();&#125;&#125;</span><br></pre></td></tr></table></figure><blockquote><p>上面两个例子输出结果相同，对编译器来说无差别。</p></blockquote><h2 id="变量声明与赋值"><a href="#变量声明与赋值" class="headerlink" title="变量声明与赋值"></a>变量声明与赋值</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Hello</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">string</span> valerie;</span><br><span class="line">        <span class="comment">//定义变量并赋值</span></span><br><span class="line">        <span class="keyword">string</span> max = <span class="string">"Have fun storming the castle!"</span>;</span><br><span class="line"></span><br><span class="line">        valerie = <span class="string">"Think it will work?"</span>;</span><br><span class="line"></span><br><span class="line">        System.Console.WriteLine(max);</span><br><span class="line">        System.Console.WriteLine(valerie);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//重新赋值</span></span><br><span class="line">        max = <span class="string">"It would take a miracle."</span>;</span><br><span class="line">        System.Console.WriteLine(max);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">string</span> boys,girls;</span><br><span class="line">        <span class="comment">//多赋值操作</span></span><br><span class="line">        boys = girls = <span class="string">"We Are Young."</span>;</span><br><span class="line">        System.Console.WriteLine(boys);</span><br><span class="line">        System.Console.WriteLine(girls);</span><br><span class="line"></span><br><span class="line">        System.Console.ReadKey();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>输出结果</p></blockquote><pre><code>Have fun storming the castle!Think it will work?It would take a miracle.We Are Young.We Are Young.</code></pre><h3 id="高级主题：字符串不可变"><a href="#高级主题：字符串不可变" class="headerlink" title="高级主题：字符串不可变"></a>高级主题：字符串不可变</h3><p>所有string类型数据，都是不可变的（或者说不可修改的），例如：不可能将字符串“We Are Yong.”修改为“We Are Old.”。也就是说，不能修改变量最初引用的数据，只能重新赋值，让它指向内存中的新位置。</p><h1 id="控制台输入输出"><a href="#控制台输入输出" class="headerlink" title="控制台输入输出"></a>控制台输入输出</h1><h2 id="从控制台获取输入"><a href="#从控制台获取输入" class="headerlink" title="从控制台获取输入"></a>从控制台获取输入</h2><h3 id="使用System-Console-ReadLine"><a href="#使用System-Console-ReadLine" class="headerlink" title="使用System.Console.ReadLine()"></a>使用System.Console.ReadLine()</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Hello</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line">        <span class="keyword">string</span> firstName;</span><br><span class="line">        <span class="keyword">string</span> lastName;</span><br><span class="line"></span><br><span class="line">        System.Console.Write(<span class="string">"Enter your first name: "</span>);</span><br><span class="line">        firstName = System.Console.ReadLine();</span><br><span class="line"></span><br><span class="line">        System.Console.Write(<span class="string">"Enter your last name: "</span>);</span><br><span class="line">        lastName = System.Console.ReadLine();</span><br><span class="line"></span><br><span class="line">        System.Console.WriteLine(<span class="string">"Hello "</span> + firstName + <span class="string">" "</span> + lastName);</span><br><span class="line">        System.Console.ReadKey();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>输出结果</p></blockquote><pre><code>Enter your first name: JonEnter your last name: SnowHello Jon Snow</code></pre><h3 id="高级主题：System-Console-Read"><a href="#高级主题：System-Console-Read" class="headerlink" title="高级主题：System.Console.Read()"></a>高级主题：System.Console.Read()</h3><blockquote><p>System.Console.Read()方法返回的是与读取的字符值对应的证书，如果没有更多的字符可用，就返回-1。为了获取实际字符，需要先将证书转型为字符，代码如下：</p></blockquote><h4 id="代码示例-1"><a href="#代码示例-1" class="headerlink" title="代码示例 1"></a>代码示例 1</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Hello</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> readValue;</span><br><span class="line">        <span class="keyword">char</span> character;</span><br><span class="line"></span><br><span class="line">        readValue = System.Console.Read();</span><br><span class="line">        character = (<span class="keyword">char</span>) readValue;</span><br><span class="line">        System.Console.WriteLine(character);</span><br><span class="line"></span><br><span class="line">        System.Console.ReadKey();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>System.Console.Read() 从标准输入流读取下一个字符。</p><p>System.Console.ReadKey() 获取用户按下的下一个字符或功能键。 按下的键显示在控制台窗口中。</p><p>按回车键之前，System.Console.Read()方法不会返回输入，即使用户输入了多个字符。</p><p>输入 123，按回车，再输入 a，输出结果</p></blockquote><pre><code>1231a</code></pre><h4 id="代码示例-2"><a href="#代码示例-2" class="headerlink" title="代码示例 2"></a>代码示例 2</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Hello</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> readValueFirst,readValueSecond,readValueThird;</span><br><span class="line">        <span class="keyword">char</span> character;</span><br><span class="line"></span><br><span class="line">        readValueFirst = System.Console.Read();</span><br><span class="line">        character = (<span class="keyword">char</span>) readValueFirst;</span><br><span class="line">        System.Console.WriteLine(character);</span><br><span class="line">        readValueSecond = System.Console.Read();</span><br><span class="line">        character = (<span class="keyword">char</span>) readValueSecond;</span><br><span class="line">        System.Console.WriteLine(character);</span><br><span class="line">        readValueThird = System.Console.Read();</span><br><span class="line">        character = (<span class="keyword">char</span>) readValueThird;</span><br><span class="line">        System.Console.WriteLine(character);</span><br><span class="line"></span><br><span class="line">        System.Console.ReadKey();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>System.Console.Read() 从标准输入流读取下一个字符。</p><p>System.Console.ReadKey() 获取用户按下的下一个字符或功能键。 按下的键显示在控制台窗口中。</p><p>按回车键之前，System.Console.Read()方法不会返回输入，即使用户输入了多个字符。</p><p>输入 123，按回车，再输入 a，输出结果</p></blockquote><pre><code>123123a</code></pre><blockquote><p>上面两个示例，输入信息相同，由于代码不同因而输出结果不同。</p></blockquote><h2 id="输出到控制台"><a href="#输出到控制台" class="headerlink" title="输出到控制台"></a>输出到控制台</h2><blockquote><p>System.Console.Write() 输出后不添加换行符（当前行终止符）。<br>System.Console.WriteLine() 将参数内容（后跟当前行终止符）写入标准输出流，输出后，光标切换到下一行。</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Hello</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">string</span> firstName;</span><br><span class="line">        <span class="keyword">string</span> lastName;</span><br><span class="line"></span><br><span class="line">        System.Console.Write(<span class="string">"Enter your first name: "</span>);</span><br><span class="line">        firstName = System.Console.ReadLine();</span><br><span class="line"></span><br><span class="line">        System.Console.Write(<span class="string">"Enter your last name: "</span>);</span><br><span class="line">        lastName = System.Console.ReadLine();</span><br><span class="line"></span><br><span class="line">        System.Console.WriteLine(</span><br><span class="line">        <span class="string">"Hello &#123;0&#125; &#123;1&#125;."</span>, firstName, lastName);</span><br><span class="line">      System.Console.ReadKey();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>示例代码中”Hello {0} {1}.”，标识了两个索引占位符，用于在字符串中插入数据。</p><p>输出结果</p></blockquote><pre><code>Enter your first name: JonEnter your last name: SnowHello Jon Snow.</code></pre><blockquote><p>交换索引占位符和对应变量</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.Console.WriteLine(</span><br><span class="line">        <span class="string">"Hello &#123;1&#125;, &#123;0&#125;."</span>, firstName, lastName);</span><br></pre></td></tr></table></figure><blockquote><p>输出结果</p></blockquote><pre><code>Enter your first name: JonEnter your last name: SnowHello Snow, Jon.</code></pre><h2 id="代码注释"><a href="#代码注释" class="headerlink" title="代码注释"></a>代码注释</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Hello</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">string</span> firstName;   <span class="comment">//存储名字的变量【单行注释】</span></span><br><span class="line">        <span class="keyword">string</span> lastName;    <span class="comment">//存储姓氏的变量【单行注释】</span></span><br><span class="line"></span><br><span class="line">        System.Console.Write<span class="comment">/*不换行输出【语句内部带分隔符注释】*/</span>(</span><br><span class="line">            <span class="string">"Enter your first name: "</span>);</span><br><span class="line">        firstName = System.Console.ReadLine();</span><br><span class="line"></span><br><span class="line">        System.Console.Write<span class="comment">/*不换行输出【语句内部带分隔符注释】*/</span>(</span><br><span class="line">            <span class="string">"Enter your last name: "</span>);</span><br><span class="line">        lastName = System.Console.ReadLine();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        使用复合格式化在控制台显示问候语。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        System.Console.WriteLine(</span><br><span class="line">            <span class="string">"Hello &#123;1&#125;, &#123;0&#125;."</span>, firstName, lastName);</span><br><span class="line"></span><br><span class="line">        System.Console.ReadKey();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//这是程序列表的结尾</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>目前观点</p></blockquote><ul><li><strong>不要</strong>使用注释，除非代码本身“一言难尽”。</li><li><strong>要</strong>尽量编写清晰的代码，而不是通过注释澄清复杂算法。</li></ul><h2 id="CIL和ILDAASM-公共中间语言和IL反汇编"><a href="#CIL和ILDAASM-公共中间语言和IL反汇编" class="headerlink" title="CIL和ILDAASM (公共中间语言和IL反汇编)"></a>CIL和ILDAASM (公共中间语言和IL反汇编)</h2><p>C#编译器将C#代码转换成CIL代码而不是机器码。对于一个程序集(DLL文件或可执行文件)，可以使用CIL反汇编程序将其析构成对应的CIL表示，从而查看其CIL代码。微软的反汇编程序文件：ILDASM（IL Disassembler）,可以对程序或者类库执行反汇编，显示由C#编译器生成的CIL代码。</p><blockquote><p>ildasm.exe存在与C:\Program Files (x86)\Microsoft SDKs\Windows\v10.0A\bin\NETFX 4.6.1 Tools类似位置</p><p>例子</p></blockquote><pre><code>ildasm /text hello.exe</code></pre><blockquote><p>输出结果</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">D:\WaProj\Essential C#5.0, 4th Edition\第一章&gt;ildasm /text hello.exe</span><br><span class="line"></span><br><span class="line">//  Microsoft (R) .NET Framework IL Disassembler.  Version 4.6.1055.0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// Metadata version: v4.0.30319</span><br><span class="line">.assembly extern mscorlib</span><br><span class="line">&#123;</span><br><span class="line">  .publickeytoken = (B7 7A 5C 56 19 34 E0 89 )                         // .z\V.4..</span><br><span class="line">  .ver 4:0:0:0</span><br><span class="line">&#125;</span><br><span class="line">.assembly Hello</span><br><span class="line">&#123;</span><br><span class="line">  .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilationRelaxationsAttribute::.ctor(int32) = ( 01 00 08 00 00 00 00 00 )</span><br><span class="line">  .custom instance void [mscorlib]System.Runtime.CompilerServices.RuntimeCompatibilityAttribute::.ctor() = ( 01 00 01 00 54 02 16 57 72 61 70 4E 6F 6E 45 78   // ....T..WrapNonEx</span><br><span class="line">                                                                                                             63 65 70 74 69 6F 6E 54 68 72 6F 77 73 01 )       // ceptionThrows.</span><br><span class="line">  .hash algorithm 0x00008004</span><br><span class="line">  .ver 0:0:0:0</span><br><span class="line">&#125;</span><br><span class="line">.module Hello.exe</span><br><span class="line">// MVID: &#123;BDAC1292-8393-4BEB-9AD7-40DC171B0BF9&#125;</span><br><span class="line">.imagebase 0x00400000</span><br><span class="line">.file alignment 0x00000200</span><br><span class="line">.stackreserve 0x00100000</span><br><span class="line">.subsystem 0x0003       // WINDOWS_CUI</span><br><span class="line">.corflags 0x00000001    //  ILONLY</span><br><span class="line">// Image base: 0x02CF0000</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// =============== CLASS MEMBERS DECLARATION ===================</span><br><span class="line"></span><br><span class="line">.class private auto ansi beforefieldinit Hello</span><br><span class="line">       extends [mscorlib]System.Object</span><br><span class="line">&#123;</span><br><span class="line">  .method private hidebysig static void  Main(string[] args) cil managed</span><br><span class="line">  &#123;</span><br><span class="line">    .entrypoint</span><br><span class="line">    // 代码大小       19 (0x13)</span><br><span class="line">    .maxstack  8</span><br><span class="line">    IL_0000:  nop</span><br><span class="line">    IL_0001:  ldstr      &quot;Hello World!&quot;</span><br><span class="line">    IL_0006:  call       void [mscorlib]System.Console::WriteLine(string)</span><br><span class="line">    IL_000b:  nop</span><br><span class="line">    IL_000c:  call       valuetype [mscorlib]System.ConsoleKeyInfo [mscorlib]System.Console::ReadKey()</span><br><span class="line">    IL_0011:  pop</span><br><span class="line">    IL_0012:  ret</span><br><span class="line">  &#125; // end of method Hello::Main</span><br><span class="line"></span><br><span class="line">  .method public hidebysig specialname rtspecialname</span><br><span class="line">          instance void  .ctor() cil managed</span><br><span class="line">  &#123;</span><br><span class="line">    // 代码大小       7 (0x7)</span><br><span class="line">    .maxstack  8</span><br><span class="line">    IL_0000:  ldarg.0</span><br><span class="line">    IL_0001:  call       instance void [mscorlib]System.Object::.ctor()</span><br><span class="line">    IL_0006:  ret</span><br><span class="line">  &#125; // end of method Hello::.ctor</span><br><span class="line"></span><br><span class="line">&#125; // end of class Hello</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// =============================================================</span><br><span class="line"></span><br><span class="line">// *********** 反汇编完成 ***********************</span><br></pre></td></tr></table></figure><blockquote><p>/text 选项制定输出到命令控制台，而不是在ildasm的图形界面程序中显示。</p><p>常见.NET反汇编工具</p><ul><li><a href="https://github.com/0xd4d/dnSpy/releases/" target="_blank" rel="noopener">dnSpy (免费)</a>   具备调试功能</li><li><a href="http://ilspy.net/" target="_blank" rel="noopener">ILSpy (免费)</a></li><li><a href="http://www.jetbrains.com/decompiler/" target="_blank" rel="noopener">dotPeek (免费)</a>    生成代码质量较高，Visual Studio风格界面</li><li><a href="http://www.red-gate.com/products/dotnet-development/reflector/" target="_blank" rel="noopener">.Net Reflector (收费)</a></li></ul></blockquote><blockquote><p>为了减少程序被别人轻松反编译，可以考虑使用混淆器(obfuscator)产品。这些混淆器会打开IL代码，将代码加密成一种功能不变但更难于理解的形式。</p></blockquote><hr><h1 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h1><iframe src="https://slowread.cn/EssentialCSharp5-Index.html" width="100%" height="300" frameborder="0" allowfullscreen></iframe>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://slowread.cn/images/material/EssentialCSharp5.jpg&quot; alt=&quot;alt&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;名词解释&quot;&gt;&lt;a href=&quot;#名词解释&quot; class=&quot;headerlink&quot; title=&quot;名词解释&quot;&gt;&lt;/a&gt;名词解释&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;CLI   Common Language Infrastructure  公共语言基础结构&lt;/li&gt;
&lt;li&gt;CIL   Common Intermediate Language    公共中间语言&lt;/li&gt;
&lt;li&gt;BCL   Base Class Library 基础类库&lt;/li&gt;
&lt;li&gt;overload 重载：指的是&lt;strong&gt;同一个类&lt;/strong&gt;中有两个或多个名字相同但是&lt;strong&gt;参数不同&lt;/strong&gt;的方法，(注:返回值不能区别函数是否重载)，&lt;strong&gt;重载没有关键字&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;override 重写 过载：指子类对父类中&lt;strong&gt;虚函数或抽象函数&lt;/strong&gt;的“覆盖”（这也就是有些书将过载翻译为覆盖的原因），但是这种“覆盖”和用new关键字来覆盖是有区别的。&lt;/li&gt;
&lt;li&gt;new 覆盖：指的是不同类中（基类或派生类）有两个或多个返回类型、方法名、参数都相同，但是方法体不同的方法。但是这种覆盖是一种表面上的覆盖，所以也叫&lt;strong&gt;隐藏&lt;/strong&gt;，被覆盖的父类方法是可以调用得到的。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="C#" scheme="https://at2008.github.io/tags/C/"/>
    
      <category term="C#本质论" scheme="https://at2008.github.io/tags/C-%E6%9C%AC%E8%B4%A8%E8%AE%BA/"/>
    
      <category term="Essential C#" scheme="https://at2008.github.io/tags/Essential-C/"/>
    
  </entry>
  
</feed>
